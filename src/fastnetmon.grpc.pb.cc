// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: fastnetmon.proto

#include "fastnetmon.pb.h"
#include "fastnetmon.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>
namespace fastmitigation {

static const char* Fastnetmon_method_names[] = {
  "/fastmitigation.Fastnetmon/GetBanlist",
  "/fastmitigation.Fastnetmon/ExecuteBan",
  "/fastmitigation.Fastnetmon/ExecuteUnBan",
};

std::unique_ptr< Fastnetmon::Stub> Fastnetmon::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Fastnetmon::Stub> stub(new Fastnetmon::Stub(channel));
  return stub;
}

Fastnetmon::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_GetBanlist_(Fastnetmon_method_names[0], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ExecuteBan_(Fastnetmon_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecuteUnBan_(Fastnetmon_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::fastmitigation::BanListReply>* Fastnetmon::Stub::GetBanlistRaw(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request) {
  return new ::grpc::ClientReader< ::fastmitigation::BanListReply>(channel_.get(), rpcmethod_GetBanlist_, context, request);
}

::grpc::ClientAsyncReader< ::fastmitigation::BanListReply>* Fastnetmon::Stub::AsyncGetBanlistRaw(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::fastmitigation::BanListReply>(channel_.get(), cq, rpcmethod_GetBanlist_, context, request, tag);
}

::grpc::Status Fastnetmon::Stub::ExecuteBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::fastmitigation::ExecuteBanReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ExecuteBan_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>* Fastnetmon::Stub::AsyncExecuteBanRaw(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>(channel_.get(), cq, rpcmethod_ExecuteBan_, context, request);
}

::grpc::Status Fastnetmon::Stub::ExecuteUnBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::fastmitigation::ExecuteBanReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ExecuteUnBan_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>* Fastnetmon::Stub::AsyncExecuteUnBanRaw(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>(channel_.get(), cq, rpcmethod_ExecuteUnBan_, context, request);
}

Fastnetmon::AsyncService::AsyncService() : ::grpc::AsynchronousService(Fastnetmon_method_names, 3) {}

Fastnetmon::Service::~Service() {
  delete service_;
}

::grpc::Status Fastnetmon::Service::GetBanlist(::grpc::ServerContext* context, const ::fastmitigation::BanListRequest* request, ::grpc::ServerWriter< ::fastmitigation::BanListReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void Fastnetmon::AsyncService::RequestGetBanlist(::grpc::ServerContext* context, ::fastmitigation::BanListRequest* request, ::grpc::ServerAsyncWriter< ::fastmitigation::BanListReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status Fastnetmon::Service::ExecuteBan(::grpc::ServerContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void Fastnetmon::AsyncService::RequestExecuteBan(::grpc::ServerContext* context, ::fastmitigation::ExecuteBanRequest* request, ::grpc::ServerAsyncResponseWriter< ::fastmitigation::ExecuteBanReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status Fastnetmon::Service::ExecuteUnBan(::grpc::ServerContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void Fastnetmon::AsyncService::RequestExecuteUnBan(::grpc::ServerContext* context, ::fastmitigation::ExecuteBanRequest* request, ::grpc::ServerAsyncResponseWriter< ::fastmitigation::ExecuteBanReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* Fastnetmon::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      Fastnetmon_method_names[0],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Fastnetmon::Service, ::fastmitigation::BanListRequest, ::fastmitigation::BanListReply>(
          std::mem_fn(&Fastnetmon::Service::GetBanlist), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      Fastnetmon_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Fastnetmon::Service, ::fastmitigation::ExecuteBanRequest, ::fastmitigation::ExecuteBanReply>(
          std::mem_fn(&Fastnetmon::Service::ExecuteBan), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      Fastnetmon_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Fastnetmon::Service, ::fastmitigation::ExecuteBanRequest, ::fastmitigation::ExecuteBanReply>(
          std::mem_fn(&Fastnetmon::Service::ExecuteUnBan), this)));
  return service_;
}


}  // namespace fastmitigation

