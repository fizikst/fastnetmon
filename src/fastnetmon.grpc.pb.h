// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: fastnetmon.proto
#ifndef GRPC_fastnetmon_2eproto__INCLUDED
#define GRPC_fastnetmon_2eproto__INCLUDED

#include "fastnetmon.pb.h"

#include <grpc++/support/async_stream.h>
#include <grpc++/impl/rpc_method.h>
#include <grpc++/impl/proto_utils.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/status.h>
#include <grpc++/support/stub_options.h>
#include <grpc++/support/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace fastmitigation {

class Fastnetmon GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::fastmitigation::BanListReply>> GetBanlist(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::fastmitigation::BanListReply>>(GetBanlistRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fastmitigation::BanListReply>> AsyncGetBanlist(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::fastmitigation::BanListReply>>(AsyncGetBanlistRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status ExecuteBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::fastmitigation::ExecuteBanReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastmitigation::ExecuteBanReply>> AsyncExecuteBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastmitigation::ExecuteBanReply>>(AsyncExecuteBanRaw(context, request, cq));
    }
    virtual ::grpc::Status ExecuteUnBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::fastmitigation::ExecuteBanReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastmitigation::ExecuteBanReply>> AsyncExecuteUnBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fastmitigation::ExecuteBanReply>>(AsyncExecuteUnBanRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::fastmitigation::BanListReply>* GetBanlistRaw(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::fastmitigation::BanListReply>* AsyncGetBanlistRaw(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastmitigation::ExecuteBanReply>* AsyncExecuteBanRaw(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fastmitigation::ExecuteBanReply>* AsyncExecuteUnBanRaw(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::Channel>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::fastmitigation::BanListReply>> GetBanlist(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::fastmitigation::BanListReply>>(GetBanlistRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::fastmitigation::BanListReply>> AsyncGetBanlist(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::fastmitigation::BanListReply>>(AsyncGetBanlistRaw(context, request, cq, tag));
    }
    ::grpc::Status ExecuteBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::fastmitigation::ExecuteBanReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>> AsyncExecuteBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>>(AsyncExecuteBanRaw(context, request, cq));
    }
    ::grpc::Status ExecuteUnBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::fastmitigation::ExecuteBanReply* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>> AsyncExecuteUnBan(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>>(AsyncExecuteUnBanRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::Channel> channel_;
    ::grpc::ClientReader< ::fastmitigation::BanListReply>* GetBanlistRaw(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::fastmitigation::BanListReply>* AsyncGetBanlistRaw(::grpc::ClientContext* context, const ::fastmitigation::BanListRequest& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>* AsyncExecuteBanRaw(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::fastmitigation::ExecuteBanReply>* AsyncExecuteUnBanRaw(::grpc::ClientContext* context, const ::fastmitigation::ExecuteBanRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_GetBanlist_;
    const ::grpc::RpcMethod rpcmethod_ExecuteBan_;
    const ::grpc::RpcMethod rpcmethod_ExecuteUnBan_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::SynchronousService {
   public:
    Service() : service_(nullptr) {}
    virtual ~Service();
    virtual ::grpc::Status GetBanlist(::grpc::ServerContext* context, const ::fastmitigation::BanListRequest* request, ::grpc::ServerWriter< ::fastmitigation::BanListReply>* writer);
    virtual ::grpc::Status ExecuteBan(::grpc::ServerContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response);
    virtual ::grpc::Status ExecuteUnBan(::grpc::ServerContext* context, const ::fastmitigation::ExecuteBanRequest* request, ::fastmitigation::ExecuteBanReply* response);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    ::grpc::RpcService* service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService();
    ~AsyncService() {};
    void RequestGetBanlist(::grpc::ServerContext* context, ::fastmitigation::BanListRequest* request, ::grpc::ServerAsyncWriter< ::fastmitigation::BanListReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestExecuteBan(::grpc::ServerContext* context, ::fastmitigation::ExecuteBanRequest* request, ::grpc::ServerAsyncResponseWriter< ::fastmitigation::ExecuteBanReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestExecuteUnBan(::grpc::ServerContext* context, ::fastmitigation::ExecuteBanRequest* request, ::grpc::ServerAsyncResponseWriter< ::fastmitigation::ExecuteBanReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
  };
};

}  // namespace fastmitigation


#endif  // GRPC_fastnetmon_2eproto__INCLUDED
