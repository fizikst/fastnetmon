// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fastnetmon.proto

#ifndef PROTOBUF_fastnetmon_2eproto__INCLUDED
#define PROTOBUF_fastnetmon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fastmitigation {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_fastnetmon_2eproto();
void protobuf_AssignDesc_fastnetmon_2eproto();
void protobuf_ShutdownFile_fastnetmon_2eproto();

class BanListReply;
class BanListRequest;
class ExecuteBanReply;
class ExecuteBanRequest;

// ===================================================================

class BanListRequest : public ::google::protobuf::Message {
 public:
  BanListRequest();
  virtual ~BanListRequest();

  BanListRequest(const BanListRequest& from);

  inline BanListRequest& operator=(const BanListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BanListRequest& default_instance();

  void Swap(BanListRequest* other);

  // implements Message ----------------------------------------------

  inline BanListRequest* New() const { return New(NULL); }

  BanListRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BanListRequest& from);
  void MergeFrom(const BanListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BanListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:fastmitigation.BanListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fastnetmon_2eproto();
  friend void protobuf_AssignDesc_fastnetmon_2eproto();
  friend void protobuf_ShutdownFile_fastnetmon_2eproto();

  void InitAsDefaultInstance();
  static BanListRequest* default_instance_;
};
// -------------------------------------------------------------------

class BanListReply : public ::google::protobuf::Message {
 public:
  BanListReply();
  virtual ~BanListReply();

  BanListReply(const BanListReply& from);

  inline BanListReply& operator=(const BanListReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BanListReply& default_instance();

  void Swap(BanListReply* other);

  // implements Message ----------------------------------------------

  inline BanListReply* New() const { return New(NULL); }

  BanListReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BanListReply& from);
  void MergeFrom(const BanListReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BanListReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip_address = 1;
  void clear_ip_address();
  static const int kIpAddressFieldNumber = 1;
  const ::std::string& ip_address() const;
  void set_ip_address(const ::std::string& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  ::std::string* mutable_ip_address();
  ::std::string* release_ip_address();
  void set_allocated_ip_address(::std::string* ip_address);

  // @@protoc_insertion_point(class_scope:fastmitigation.BanListReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr ip_address_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fastnetmon_2eproto();
  friend void protobuf_AssignDesc_fastnetmon_2eproto();
  friend void protobuf_ShutdownFile_fastnetmon_2eproto();

  void InitAsDefaultInstance();
  static BanListReply* default_instance_;
};
// -------------------------------------------------------------------

class ExecuteBanRequest : public ::google::protobuf::Message {
 public:
  ExecuteBanRequest();
  virtual ~ExecuteBanRequest();

  ExecuteBanRequest(const ExecuteBanRequest& from);

  inline ExecuteBanRequest& operator=(const ExecuteBanRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecuteBanRequest& default_instance();

  void Swap(ExecuteBanRequest* other);

  // implements Message ----------------------------------------------

  inline ExecuteBanRequest* New() const { return New(NULL); }

  ExecuteBanRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecuteBanRequest& from);
  void MergeFrom(const ExecuteBanRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExecuteBanRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip_address = 1;
  void clear_ip_address();
  static const int kIpAddressFieldNumber = 1;
  const ::std::string& ip_address() const;
  void set_ip_address(const ::std::string& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  ::std::string* mutable_ip_address();
  ::std::string* release_ip_address();
  void set_allocated_ip_address(::std::string* ip_address);

  // @@protoc_insertion_point(class_scope:fastmitigation.ExecuteBanRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr ip_address_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fastnetmon_2eproto();
  friend void protobuf_AssignDesc_fastnetmon_2eproto();
  friend void protobuf_ShutdownFile_fastnetmon_2eproto();

  void InitAsDefaultInstance();
  static ExecuteBanRequest* default_instance_;
};
// -------------------------------------------------------------------

class ExecuteBanReply : public ::google::protobuf::Message {
 public:
  ExecuteBanReply();
  virtual ~ExecuteBanReply();

  ExecuteBanReply(const ExecuteBanReply& from);

  inline ExecuteBanReply& operator=(const ExecuteBanReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecuteBanReply& default_instance();

  void Swap(ExecuteBanReply* other);

  // implements Message ----------------------------------------------

  inline ExecuteBanReply* New() const { return New(NULL); }

  ExecuteBanReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecuteBanReply& from);
  void MergeFrom(const ExecuteBanReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExecuteBanReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:fastmitigation.ExecuteBanReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_fastnetmon_2eproto();
  friend void protobuf_AssignDesc_fastnetmon_2eproto();
  friend void protobuf_ShutdownFile_fastnetmon_2eproto();

  void InitAsDefaultInstance();
  static ExecuteBanReply* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BanListRequest

// -------------------------------------------------------------------

// BanListReply

// optional string ip_address = 1;
inline void BanListReply::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BanListReply::ip_address() const {
  // @@protoc_insertion_point(field_get:fastmitigation.BanListReply.ip_address)
  return ip_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BanListReply::set_ip_address(const ::std::string& value) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fastmitigation.BanListReply.ip_address)
}
inline void BanListReply::set_ip_address(const char* value) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fastmitigation.BanListReply.ip_address)
}
inline void BanListReply::set_ip_address(const char* value, size_t size) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fastmitigation.BanListReply.ip_address)
}
inline ::std::string* BanListReply::mutable_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:fastmitigation.BanListReply.ip_address)
  return ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BanListReply::release_ip_address() {
  
  return ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BanListReply::set_allocated_ip_address(::std::string* ip_address) {
  if (ip_address != NULL) {
    
  } else {
    
  }
  ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:fastmitigation.BanListReply.ip_address)
}

// -------------------------------------------------------------------

// ExecuteBanRequest

// optional string ip_address = 1;
inline void ExecuteBanRequest::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecuteBanRequest::ip_address() const {
  // @@protoc_insertion_point(field_get:fastmitigation.ExecuteBanRequest.ip_address)
  return ip_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecuteBanRequest::set_ip_address(const ::std::string& value) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fastmitigation.ExecuteBanRequest.ip_address)
}
inline void ExecuteBanRequest::set_ip_address(const char* value) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fastmitigation.ExecuteBanRequest.ip_address)
}
inline void ExecuteBanRequest::set_ip_address(const char* value, size_t size) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fastmitigation.ExecuteBanRequest.ip_address)
}
inline ::std::string* ExecuteBanRequest::mutable_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:fastmitigation.ExecuteBanRequest.ip_address)
  return ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecuteBanRequest::release_ip_address() {
  
  return ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecuteBanRequest::set_allocated_ip_address(::std::string* ip_address) {
  if (ip_address != NULL) {
    
  } else {
    
  }
  ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:fastmitigation.ExecuteBanRequest.ip_address)
}

// -------------------------------------------------------------------

// ExecuteBanReply

// optional bool result = 1;
inline void ExecuteBanReply::clear_result() {
  result_ = false;
}
inline bool ExecuteBanReply::result() const {
  // @@protoc_insertion_point(field_get:fastmitigation.ExecuteBanReply.result)
  return result_;
}
inline void ExecuteBanReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:fastmitigation.ExecuteBanReply.result)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fastmitigation

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fastnetmon_2eproto__INCLUDED
