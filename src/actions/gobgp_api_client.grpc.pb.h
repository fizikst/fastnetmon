// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: gobgp_api_client.proto
#ifndef GRPC_gobgp_5fapi_5fclient_2eproto__INCLUDED
#define GRPC_gobgp_5fapi_5fclient_2eproto__INCLUDED

#include "gobgp_api_client.pb.h"

#include <grpc++/support/async_stream.h>
#include <grpc++/impl/rpc_method.h>
#include <grpc++/impl/proto_utils.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/status.h>
#include <grpc++/support/stub_options.h>
#include <grpc++/support/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace gobgpapi {

class GobgpApi GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetGlobalConfig(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Global* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Global>> AsyncGetGlobalConfig(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Global>>(AsyncGetGlobalConfigRaw(context, request, cq));
    }
    virtual ::grpc::Status ModGlobalConfig(::grpc::ClientContext* context, const ::gobgpapi::ModGlobalConfigArguments& request, ::gobgpapi::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>> AsyncModGlobalConfig(::grpc::ClientContext* context, const ::gobgpapi::ModGlobalConfigArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>>(AsyncModGlobalConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::Peer>> GetNeighbors(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::Peer>>(GetNeighborsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Peer>> AsyncGetNeighbors(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Peer>>(AsyncGetNeighborsRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status GetNeighbor(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Peer* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Peer>> AsyncGetNeighbor(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Peer>>(AsyncGetNeighborRaw(context, request, cq));
    }
    virtual ::grpc::Status ModNeighbor(::grpc::ClientContext* context, const ::gobgpapi::ModNeighborArguments& request, ::gobgpapi::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>> AsyncModNeighbor(::grpc::ClientContext* context, const ::gobgpapi::ModNeighborArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>>(AsyncModNeighborRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRib(::grpc::ClientContext* context, const ::gobgpapi::Table& request, ::gobgpapi::Table* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Table>> AsyncGetRib(::grpc::ClientContext* context, const ::gobgpapi::Table& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Table>>(AsyncGetRibRaw(context, request, cq));
    }
    virtual ::grpc::Status Reset(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>> AsyncReset(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>>(AsyncResetRaw(context, request, cq));
    }
    virtual ::grpc::Status SoftReset(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>> AsyncSoftReset(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>>(AsyncSoftResetRaw(context, request, cq));
    }
    virtual ::grpc::Status SoftResetIn(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>> AsyncSoftResetIn(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>>(AsyncSoftResetInRaw(context, request, cq));
    }
    virtual ::grpc::Status SoftResetOut(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>> AsyncSoftResetOut(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>>(AsyncSoftResetOutRaw(context, request, cq));
    }
    virtual ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>> AsyncShutdown(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>>(AsyncShutdownRaw(context, request, cq));
    }
    virtual ::grpc::Status Enable(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>> AsyncEnable(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>>(AsyncEnableRaw(context, request, cq));
    }
    virtual ::grpc::Status Disable(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>> AsyncDisable(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>>(AsyncDisableRaw(context, request, cq));
    }
    virtual ::grpc::Status ModPath(::grpc::ClientContext* context, const ::gobgpapi::ModPathArguments& request, ::gobgpapi::ModPathResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::ModPathResponse>> AsyncModPath(::grpc::ClientContext* context, const ::gobgpapi::ModPathArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::ModPathResponse>>(AsyncModPathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::gobgpapi::ModPathsArguments>> ModPaths(::grpc::ClientContext* context, ::gobgpapi::Error* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::gobgpapi::ModPathsArguments>>(ModPathsRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::gobgpapi::ModPathsArguments>> AsyncModPaths(::grpc::ClientContext* context, ::gobgpapi::Error* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::gobgpapi::ModPathsArguments>>(AsyncModPathsRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::Destination>> MonitorRib(::grpc::ClientContext* context, const ::gobgpapi::Table& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::Destination>>(MonitorRibRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Destination>> AsyncMonitorRib(::grpc::ClientContext* context, const ::gobgpapi::Table& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Destination>>(AsyncMonitorRibRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::Destination>> MonitorBestChanged(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::Destination>>(MonitorBestChangedRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Destination>> AsyncMonitorBestChanged(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Destination>>(AsyncMonitorBestChangedRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::Peer>> MonitorPeerState(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::Peer>>(MonitorPeerStateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Peer>> AsyncMonitorPeerState(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Peer>>(AsyncMonitorPeerStateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::ROAResult>> MonitorROAValidation(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::ROAResult>>(MonitorROAValidationRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::ROAResult>> AsyncMonitorROAValidation(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::ROAResult>>(AsyncMonitorROAValidationRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::MrtMessage>> GetMrt(::grpc::ClientContext* context, const ::gobgpapi::MrtArguments& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::MrtMessage>>(GetMrtRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::MrtMessage>> AsyncGetMrt(::grpc::ClientContext* context, const ::gobgpapi::MrtArguments& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::MrtMessage>>(AsyncGetMrtRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status ModMrt(::grpc::ClientContext* context, const ::gobgpapi::ModMrtArguments& request, ::gobgpapi::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>> AsyncModMrt(::grpc::ClientContext* context, const ::gobgpapi::ModMrtArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>>(AsyncModMrtRaw(context, request, cq));
    }
    virtual ::grpc::Status ModBmp(::grpc::ClientContext* context, const ::gobgpapi::ModBmpArguments& request, ::gobgpapi::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>> AsyncModBmp(::grpc::ClientContext* context, const ::gobgpapi::ModBmpArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>>(AsyncModBmpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::RPKI>> GetRPKI(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::RPKI>>(GetRPKIRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::RPKI>> AsyncGetRPKI(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::RPKI>>(AsyncGetRPKIRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status ModRPKI(::grpc::ClientContext* context, const ::gobgpapi::ModRpkiArguments& request, ::gobgpapi::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>> AsyncModRPKI(::grpc::ClientContext* context, const ::gobgpapi::ModRpkiArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>>(AsyncModRPKIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::ROA>> GetROA(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::ROA>>(GetROARaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::ROA>> AsyncGetROA(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::ROA>>(AsyncGetROARaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::Vrf>> GetVrfs(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::Vrf>>(GetVrfsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Vrf>> AsyncGetVrfs(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Vrf>>(AsyncGetVrfsRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status ModVrf(::grpc::ClientContext* context, const ::gobgpapi::ModVrfArguments& request, ::gobgpapi::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>> AsyncModVrf(::grpc::ClientContext* context, const ::gobgpapi::ModVrfArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>>(AsyncModVrfRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDefinedSet(::grpc::ClientContext* context, const ::gobgpapi::DefinedSet& request, ::gobgpapi::DefinedSet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::DefinedSet>> AsyncGetDefinedSet(::grpc::ClientContext* context, const ::gobgpapi::DefinedSet& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::DefinedSet>>(AsyncGetDefinedSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::DefinedSet>> GetDefinedSets(::grpc::ClientContext* context, const ::gobgpapi::DefinedSet& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::DefinedSet>>(GetDefinedSetsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::DefinedSet>> AsyncGetDefinedSets(::grpc::ClientContext* context, const ::gobgpapi::DefinedSet& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::DefinedSet>>(AsyncGetDefinedSetsRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status ModDefinedSet(::grpc::ClientContext* context, const ::gobgpapi::ModDefinedSetArguments& request, ::gobgpapi::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>> AsyncModDefinedSet(::grpc::ClientContext* context, const ::gobgpapi::ModDefinedSetArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>>(AsyncModDefinedSetRaw(context, request, cq));
    }
    virtual ::grpc::Status GetStatement(::grpc::ClientContext* context, const ::gobgpapi::Statement& request, ::gobgpapi::Statement* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Statement>> AsyncGetStatement(::grpc::ClientContext* context, const ::gobgpapi::Statement& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Statement>>(AsyncGetStatementRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::Statement>> GetStatements(::grpc::ClientContext* context, const ::gobgpapi::Statement& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::Statement>>(GetStatementsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Statement>> AsyncGetStatements(::grpc::ClientContext* context, const ::gobgpapi::Statement& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Statement>>(AsyncGetStatementsRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status ModStatement(::grpc::ClientContext* context, const ::gobgpapi::ModStatementArguments& request, ::gobgpapi::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>> AsyncModStatement(::grpc::ClientContext* context, const ::gobgpapi::ModStatementArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>>(AsyncModStatementRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPolicy(::grpc::ClientContext* context, const ::gobgpapi::Policy& request, ::gobgpapi::Policy* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Policy>> AsyncGetPolicy(::grpc::ClientContext* context, const ::gobgpapi::Policy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Policy>>(AsyncGetPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::Policy>> GetPolicies(::grpc::ClientContext* context, const ::gobgpapi::Policy& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::gobgpapi::Policy>>(GetPoliciesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Policy>> AsyncGetPolicies(::grpc::ClientContext* context, const ::gobgpapi::Policy& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Policy>>(AsyncGetPoliciesRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status ModPolicy(::grpc::ClientContext* context, const ::gobgpapi::ModPolicyArguments& request, ::gobgpapi::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>> AsyncModPolicy(::grpc::ClientContext* context, const ::gobgpapi::ModPolicyArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>>(AsyncModPolicyRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPolicyAssignment(::grpc::ClientContext* context, const ::gobgpapi::PolicyAssignment& request, ::gobgpapi::PolicyAssignment* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::PolicyAssignment>> AsyncGetPolicyAssignment(::grpc::ClientContext* context, const ::gobgpapi::PolicyAssignment& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::PolicyAssignment>>(AsyncGetPolicyAssignmentRaw(context, request, cq));
    }
    virtual ::grpc::Status ModPolicyAssignment(::grpc::ClientContext* context, const ::gobgpapi::ModPolicyAssignmentArguments& request, ::gobgpapi::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>> AsyncModPolicyAssignment(::grpc::ClientContext* context, const ::gobgpapi::ModPolicyAssignmentArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>>(AsyncModPolicyAssignmentRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Global>* AsyncGetGlobalConfigRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>* AsyncModGlobalConfigRaw(::grpc::ClientContext* context, const ::gobgpapi::ModGlobalConfigArguments& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::gobgpapi::Peer>* GetNeighborsRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Peer>* AsyncGetNeighborsRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Peer>* AsyncGetNeighborRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>* AsyncModNeighborRaw(::grpc::ClientContext* context, const ::gobgpapi::ModNeighborArguments& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Table>* AsyncGetRibRaw(::grpc::ClientContext* context, const ::gobgpapi::Table& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>* AsyncResetRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>* AsyncSoftResetRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>* AsyncSoftResetInRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>* AsyncSoftResetOutRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>* AsyncEnableRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>* AsyncDisableRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::ModPathResponse>* AsyncModPathRaw(::grpc::ClientContext* context, const ::gobgpapi::ModPathArguments& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::gobgpapi::ModPathsArguments>* ModPathsRaw(::grpc::ClientContext* context, ::gobgpapi::Error* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::gobgpapi::ModPathsArguments>* AsyncModPathsRaw(::grpc::ClientContext* context, ::gobgpapi::Error* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::gobgpapi::Destination>* MonitorRibRaw(::grpc::ClientContext* context, const ::gobgpapi::Table& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Destination>* AsyncMonitorRibRaw(::grpc::ClientContext* context, const ::gobgpapi::Table& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::gobgpapi::Destination>* MonitorBestChangedRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Destination>* AsyncMonitorBestChangedRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::gobgpapi::Peer>* MonitorPeerStateRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Peer>* AsyncMonitorPeerStateRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::gobgpapi::ROAResult>* MonitorROAValidationRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gobgpapi::ROAResult>* AsyncMonitorROAValidationRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::gobgpapi::MrtMessage>* GetMrtRaw(::grpc::ClientContext* context, const ::gobgpapi::MrtArguments& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gobgpapi::MrtMessage>* AsyncGetMrtRaw(::grpc::ClientContext* context, const ::gobgpapi::MrtArguments& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>* AsyncModMrtRaw(::grpc::ClientContext* context, const ::gobgpapi::ModMrtArguments& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>* AsyncModBmpRaw(::grpc::ClientContext* context, const ::gobgpapi::ModBmpArguments& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::gobgpapi::RPKI>* GetRPKIRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gobgpapi::RPKI>* AsyncGetRPKIRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>* AsyncModRPKIRaw(::grpc::ClientContext* context, const ::gobgpapi::ModRpkiArguments& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::gobgpapi::ROA>* GetROARaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gobgpapi::ROA>* AsyncGetROARaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::gobgpapi::Vrf>* GetVrfsRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Vrf>* AsyncGetVrfsRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>* AsyncModVrfRaw(::grpc::ClientContext* context, const ::gobgpapi::ModVrfArguments& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::DefinedSet>* AsyncGetDefinedSetRaw(::grpc::ClientContext* context, const ::gobgpapi::DefinedSet& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::gobgpapi::DefinedSet>* GetDefinedSetsRaw(::grpc::ClientContext* context, const ::gobgpapi::DefinedSet& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gobgpapi::DefinedSet>* AsyncGetDefinedSetsRaw(::grpc::ClientContext* context, const ::gobgpapi::DefinedSet& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>* AsyncModDefinedSetRaw(::grpc::ClientContext* context, const ::gobgpapi::ModDefinedSetArguments& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Statement>* AsyncGetStatementRaw(::grpc::ClientContext* context, const ::gobgpapi::Statement& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::gobgpapi::Statement>* GetStatementsRaw(::grpc::ClientContext* context, const ::gobgpapi::Statement& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Statement>* AsyncGetStatementsRaw(::grpc::ClientContext* context, const ::gobgpapi::Statement& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>* AsyncModStatementRaw(::grpc::ClientContext* context, const ::gobgpapi::ModStatementArguments& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Policy>* AsyncGetPolicyRaw(::grpc::ClientContext* context, const ::gobgpapi::Policy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::gobgpapi::Policy>* GetPoliciesRaw(::grpc::ClientContext* context, const ::gobgpapi::Policy& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::gobgpapi::Policy>* AsyncGetPoliciesRaw(::grpc::ClientContext* context, const ::gobgpapi::Policy& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>* AsyncModPolicyRaw(::grpc::ClientContext* context, const ::gobgpapi::ModPolicyArguments& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::PolicyAssignment>* AsyncGetPolicyAssignmentRaw(::grpc::ClientContext* context, const ::gobgpapi::PolicyAssignment& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gobgpapi::Error>* AsyncModPolicyAssignmentRaw(::grpc::ClientContext* context, const ::gobgpapi::ModPolicyAssignmentArguments& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::Channel>& channel);
    ::grpc::Status GetGlobalConfig(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Global* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Global>> AsyncGetGlobalConfig(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Global>>(AsyncGetGlobalConfigRaw(context, request, cq));
    }
    ::grpc::Status ModGlobalConfig(::grpc::ClientContext* context, const ::gobgpapi::ModGlobalConfigArguments& request, ::gobgpapi::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>> AsyncModGlobalConfig(::grpc::ClientContext* context, const ::gobgpapi::ModGlobalConfigArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>>(AsyncModGlobalConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::Peer>> GetNeighbors(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::Peer>>(GetNeighborsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::Peer>> AsyncGetNeighbors(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::Peer>>(AsyncGetNeighborsRaw(context, request, cq, tag));
    }
    ::grpc::Status GetNeighbor(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Peer* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Peer>> AsyncGetNeighbor(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Peer>>(AsyncGetNeighborRaw(context, request, cq));
    }
    ::grpc::Status ModNeighbor(::grpc::ClientContext* context, const ::gobgpapi::ModNeighborArguments& request, ::gobgpapi::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>> AsyncModNeighbor(::grpc::ClientContext* context, const ::gobgpapi::ModNeighborArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>>(AsyncModNeighborRaw(context, request, cq));
    }
    ::grpc::Status GetRib(::grpc::ClientContext* context, const ::gobgpapi::Table& request, ::gobgpapi::Table* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Table>> AsyncGetRib(::grpc::ClientContext* context, const ::gobgpapi::Table& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Table>>(AsyncGetRibRaw(context, request, cq));
    }
    ::grpc::Status Reset(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>> AsyncReset(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>>(AsyncResetRaw(context, request, cq));
    }
    ::grpc::Status SoftReset(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>> AsyncSoftReset(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>>(AsyncSoftResetRaw(context, request, cq));
    }
    ::grpc::Status SoftResetIn(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>> AsyncSoftResetIn(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>>(AsyncSoftResetInRaw(context, request, cq));
    }
    ::grpc::Status SoftResetOut(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>> AsyncSoftResetOut(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>>(AsyncSoftResetOutRaw(context, request, cq));
    }
    ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>> AsyncShutdown(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>>(AsyncShutdownRaw(context, request, cq));
    }
    ::grpc::Status Enable(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>> AsyncEnable(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>>(AsyncEnableRaw(context, request, cq));
    }
    ::grpc::Status Disable(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>> AsyncDisable(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>>(AsyncDisableRaw(context, request, cq));
    }
    ::grpc::Status ModPath(::grpc::ClientContext* context, const ::gobgpapi::ModPathArguments& request, ::gobgpapi::ModPathResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::ModPathResponse>> AsyncModPath(::grpc::ClientContext* context, const ::gobgpapi::ModPathArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::ModPathResponse>>(AsyncModPathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::gobgpapi::ModPathsArguments>> ModPaths(::grpc::ClientContext* context, ::gobgpapi::Error* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::gobgpapi::ModPathsArguments>>(ModPathsRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::gobgpapi::ModPathsArguments>> AsyncModPaths(::grpc::ClientContext* context, ::gobgpapi::Error* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::gobgpapi::ModPathsArguments>>(AsyncModPathsRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::Destination>> MonitorRib(::grpc::ClientContext* context, const ::gobgpapi::Table& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::Destination>>(MonitorRibRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::Destination>> AsyncMonitorRib(::grpc::ClientContext* context, const ::gobgpapi::Table& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::Destination>>(AsyncMonitorRibRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::Destination>> MonitorBestChanged(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::Destination>>(MonitorBestChangedRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::Destination>> AsyncMonitorBestChanged(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::Destination>>(AsyncMonitorBestChangedRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::Peer>> MonitorPeerState(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::Peer>>(MonitorPeerStateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::Peer>> AsyncMonitorPeerState(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::Peer>>(AsyncMonitorPeerStateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::ROAResult>> MonitorROAValidation(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::ROAResult>>(MonitorROAValidationRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::ROAResult>> AsyncMonitorROAValidation(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::ROAResult>>(AsyncMonitorROAValidationRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::MrtMessage>> GetMrt(::grpc::ClientContext* context, const ::gobgpapi::MrtArguments& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::MrtMessage>>(GetMrtRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::MrtMessage>> AsyncGetMrt(::grpc::ClientContext* context, const ::gobgpapi::MrtArguments& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::MrtMessage>>(AsyncGetMrtRaw(context, request, cq, tag));
    }
    ::grpc::Status ModMrt(::grpc::ClientContext* context, const ::gobgpapi::ModMrtArguments& request, ::gobgpapi::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>> AsyncModMrt(::grpc::ClientContext* context, const ::gobgpapi::ModMrtArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>>(AsyncModMrtRaw(context, request, cq));
    }
    ::grpc::Status ModBmp(::grpc::ClientContext* context, const ::gobgpapi::ModBmpArguments& request, ::gobgpapi::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>> AsyncModBmp(::grpc::ClientContext* context, const ::gobgpapi::ModBmpArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>>(AsyncModBmpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::RPKI>> GetRPKI(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::RPKI>>(GetRPKIRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::RPKI>> AsyncGetRPKI(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::RPKI>>(AsyncGetRPKIRaw(context, request, cq, tag));
    }
    ::grpc::Status ModRPKI(::grpc::ClientContext* context, const ::gobgpapi::ModRpkiArguments& request, ::gobgpapi::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>> AsyncModRPKI(::grpc::ClientContext* context, const ::gobgpapi::ModRpkiArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>>(AsyncModRPKIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::ROA>> GetROA(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::ROA>>(GetROARaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::ROA>> AsyncGetROA(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::ROA>>(AsyncGetROARaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::Vrf>> GetVrfs(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::Vrf>>(GetVrfsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::Vrf>> AsyncGetVrfs(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::Vrf>>(AsyncGetVrfsRaw(context, request, cq, tag));
    }
    ::grpc::Status ModVrf(::grpc::ClientContext* context, const ::gobgpapi::ModVrfArguments& request, ::gobgpapi::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>> AsyncModVrf(::grpc::ClientContext* context, const ::gobgpapi::ModVrfArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>>(AsyncModVrfRaw(context, request, cq));
    }
    ::grpc::Status GetDefinedSet(::grpc::ClientContext* context, const ::gobgpapi::DefinedSet& request, ::gobgpapi::DefinedSet* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::DefinedSet>> AsyncGetDefinedSet(::grpc::ClientContext* context, const ::gobgpapi::DefinedSet& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::DefinedSet>>(AsyncGetDefinedSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::DefinedSet>> GetDefinedSets(::grpc::ClientContext* context, const ::gobgpapi::DefinedSet& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::DefinedSet>>(GetDefinedSetsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::DefinedSet>> AsyncGetDefinedSets(::grpc::ClientContext* context, const ::gobgpapi::DefinedSet& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::DefinedSet>>(AsyncGetDefinedSetsRaw(context, request, cq, tag));
    }
    ::grpc::Status ModDefinedSet(::grpc::ClientContext* context, const ::gobgpapi::ModDefinedSetArguments& request, ::gobgpapi::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>> AsyncModDefinedSet(::grpc::ClientContext* context, const ::gobgpapi::ModDefinedSetArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>>(AsyncModDefinedSetRaw(context, request, cq));
    }
    ::grpc::Status GetStatement(::grpc::ClientContext* context, const ::gobgpapi::Statement& request, ::gobgpapi::Statement* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Statement>> AsyncGetStatement(::grpc::ClientContext* context, const ::gobgpapi::Statement& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Statement>>(AsyncGetStatementRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::Statement>> GetStatements(::grpc::ClientContext* context, const ::gobgpapi::Statement& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::Statement>>(GetStatementsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::Statement>> AsyncGetStatements(::grpc::ClientContext* context, const ::gobgpapi::Statement& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::Statement>>(AsyncGetStatementsRaw(context, request, cq, tag));
    }
    ::grpc::Status ModStatement(::grpc::ClientContext* context, const ::gobgpapi::ModStatementArguments& request, ::gobgpapi::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>> AsyncModStatement(::grpc::ClientContext* context, const ::gobgpapi::ModStatementArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>>(AsyncModStatementRaw(context, request, cq));
    }
    ::grpc::Status GetPolicy(::grpc::ClientContext* context, const ::gobgpapi::Policy& request, ::gobgpapi::Policy* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Policy>> AsyncGetPolicy(::grpc::ClientContext* context, const ::gobgpapi::Policy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Policy>>(AsyncGetPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::Policy>> GetPolicies(::grpc::ClientContext* context, const ::gobgpapi::Policy& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::gobgpapi::Policy>>(GetPoliciesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::Policy>> AsyncGetPolicies(::grpc::ClientContext* context, const ::gobgpapi::Policy& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::gobgpapi::Policy>>(AsyncGetPoliciesRaw(context, request, cq, tag));
    }
    ::grpc::Status ModPolicy(::grpc::ClientContext* context, const ::gobgpapi::ModPolicyArguments& request, ::gobgpapi::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>> AsyncModPolicy(::grpc::ClientContext* context, const ::gobgpapi::ModPolicyArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>>(AsyncModPolicyRaw(context, request, cq));
    }
    ::grpc::Status GetPolicyAssignment(::grpc::ClientContext* context, const ::gobgpapi::PolicyAssignment& request, ::gobgpapi::PolicyAssignment* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::PolicyAssignment>> AsyncGetPolicyAssignment(::grpc::ClientContext* context, const ::gobgpapi::PolicyAssignment& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::PolicyAssignment>>(AsyncGetPolicyAssignmentRaw(context, request, cq));
    }
    ::grpc::Status ModPolicyAssignment(::grpc::ClientContext* context, const ::gobgpapi::ModPolicyAssignmentArguments& request, ::gobgpapi::Error* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>> AsyncModPolicyAssignment(::grpc::ClientContext* context, const ::gobgpapi::ModPolicyAssignmentArguments& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>>(AsyncModPolicyAssignmentRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::Channel> channel_;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Global>* AsyncGetGlobalConfigRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* AsyncModGlobalConfigRaw(::grpc::ClientContext* context, const ::gobgpapi::ModGlobalConfigArguments& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::gobgpapi::Peer>* GetNeighborsRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::gobgpapi::Peer>* AsyncGetNeighborsRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Peer>* AsyncGetNeighborRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* AsyncModNeighborRaw(::grpc::ClientContext* context, const ::gobgpapi::ModNeighborArguments& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Table>* AsyncGetRibRaw(::grpc::ClientContext* context, const ::gobgpapi::Table& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* AsyncResetRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* AsyncSoftResetRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* AsyncSoftResetInRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* AsyncSoftResetOutRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* AsyncEnableRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* AsyncDisableRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::ModPathResponse>* AsyncModPathRaw(::grpc::ClientContext* context, const ::gobgpapi::ModPathArguments& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientWriter< ::gobgpapi::ModPathsArguments>* ModPathsRaw(::grpc::ClientContext* context, ::gobgpapi::Error* response) GRPC_OVERRIDE;
    ::grpc::ClientAsyncWriter< ::gobgpapi::ModPathsArguments>* AsyncModPathsRaw(::grpc::ClientContext* context, ::gobgpapi::Error* response, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::gobgpapi::Destination>* MonitorRibRaw(::grpc::ClientContext* context, const ::gobgpapi::Table& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::gobgpapi::Destination>* AsyncMonitorRibRaw(::grpc::ClientContext* context, const ::gobgpapi::Table& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::gobgpapi::Destination>* MonitorBestChangedRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::gobgpapi::Destination>* AsyncMonitorBestChangedRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::gobgpapi::Peer>* MonitorPeerStateRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::gobgpapi::Peer>* AsyncMonitorPeerStateRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::gobgpapi::ROAResult>* MonitorROAValidationRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::gobgpapi::ROAResult>* AsyncMonitorROAValidationRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::gobgpapi::MrtMessage>* GetMrtRaw(::grpc::ClientContext* context, const ::gobgpapi::MrtArguments& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::gobgpapi::MrtMessage>* AsyncGetMrtRaw(::grpc::ClientContext* context, const ::gobgpapi::MrtArguments& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* AsyncModMrtRaw(::grpc::ClientContext* context, const ::gobgpapi::ModMrtArguments& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* AsyncModBmpRaw(::grpc::ClientContext* context, const ::gobgpapi::ModBmpArguments& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::gobgpapi::RPKI>* GetRPKIRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::gobgpapi::RPKI>* AsyncGetRPKIRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* AsyncModRPKIRaw(::grpc::ClientContext* context, const ::gobgpapi::ModRpkiArguments& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::gobgpapi::ROA>* GetROARaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::gobgpapi::ROA>* AsyncGetROARaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::gobgpapi::Vrf>* GetVrfsRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::gobgpapi::Vrf>* AsyncGetVrfsRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* AsyncModVrfRaw(::grpc::ClientContext* context, const ::gobgpapi::ModVrfArguments& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::DefinedSet>* AsyncGetDefinedSetRaw(::grpc::ClientContext* context, const ::gobgpapi::DefinedSet& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::gobgpapi::DefinedSet>* GetDefinedSetsRaw(::grpc::ClientContext* context, const ::gobgpapi::DefinedSet& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::gobgpapi::DefinedSet>* AsyncGetDefinedSetsRaw(::grpc::ClientContext* context, const ::gobgpapi::DefinedSet& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* AsyncModDefinedSetRaw(::grpc::ClientContext* context, const ::gobgpapi::ModDefinedSetArguments& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Statement>* AsyncGetStatementRaw(::grpc::ClientContext* context, const ::gobgpapi::Statement& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::gobgpapi::Statement>* GetStatementsRaw(::grpc::ClientContext* context, const ::gobgpapi::Statement& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::gobgpapi::Statement>* AsyncGetStatementsRaw(::grpc::ClientContext* context, const ::gobgpapi::Statement& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* AsyncModStatementRaw(::grpc::ClientContext* context, const ::gobgpapi::ModStatementArguments& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Policy>* AsyncGetPolicyRaw(::grpc::ClientContext* context, const ::gobgpapi::Policy& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::gobgpapi::Policy>* GetPoliciesRaw(::grpc::ClientContext* context, const ::gobgpapi::Policy& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::gobgpapi::Policy>* AsyncGetPoliciesRaw(::grpc::ClientContext* context, const ::gobgpapi::Policy& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* AsyncModPolicyRaw(::grpc::ClientContext* context, const ::gobgpapi::ModPolicyArguments& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::PolicyAssignment>* AsyncGetPolicyAssignmentRaw(::grpc::ClientContext* context, const ::gobgpapi::PolicyAssignment& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* AsyncModPolicyAssignmentRaw(::grpc::ClientContext* context, const ::gobgpapi::ModPolicyAssignmentArguments& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_GetGlobalConfig_;
    const ::grpc::RpcMethod rpcmethod_ModGlobalConfig_;
    const ::grpc::RpcMethod rpcmethod_GetNeighbors_;
    const ::grpc::RpcMethod rpcmethod_GetNeighbor_;
    const ::grpc::RpcMethod rpcmethod_ModNeighbor_;
    const ::grpc::RpcMethod rpcmethod_GetRib_;
    const ::grpc::RpcMethod rpcmethod_Reset_;
    const ::grpc::RpcMethod rpcmethod_SoftReset_;
    const ::grpc::RpcMethod rpcmethod_SoftResetIn_;
    const ::grpc::RpcMethod rpcmethod_SoftResetOut_;
    const ::grpc::RpcMethod rpcmethod_Shutdown_;
    const ::grpc::RpcMethod rpcmethod_Enable_;
    const ::grpc::RpcMethod rpcmethod_Disable_;
    const ::grpc::RpcMethod rpcmethod_ModPath_;
    const ::grpc::RpcMethod rpcmethod_ModPaths_;
    const ::grpc::RpcMethod rpcmethod_MonitorRib_;
    const ::grpc::RpcMethod rpcmethod_MonitorBestChanged_;
    const ::grpc::RpcMethod rpcmethod_MonitorPeerState_;
    const ::grpc::RpcMethod rpcmethod_MonitorROAValidation_;
    const ::grpc::RpcMethod rpcmethod_GetMrt_;
    const ::grpc::RpcMethod rpcmethod_ModMrt_;
    const ::grpc::RpcMethod rpcmethod_ModBmp_;
    const ::grpc::RpcMethod rpcmethod_GetRPKI_;
    const ::grpc::RpcMethod rpcmethod_ModRPKI_;
    const ::grpc::RpcMethod rpcmethod_GetROA_;
    const ::grpc::RpcMethod rpcmethod_GetVrfs_;
    const ::grpc::RpcMethod rpcmethod_ModVrf_;
    const ::grpc::RpcMethod rpcmethod_GetDefinedSet_;
    const ::grpc::RpcMethod rpcmethod_GetDefinedSets_;
    const ::grpc::RpcMethod rpcmethod_ModDefinedSet_;
    const ::grpc::RpcMethod rpcmethod_GetStatement_;
    const ::grpc::RpcMethod rpcmethod_GetStatements_;
    const ::grpc::RpcMethod rpcmethod_ModStatement_;
    const ::grpc::RpcMethod rpcmethod_GetPolicy_;
    const ::grpc::RpcMethod rpcmethod_GetPolicies_;
    const ::grpc::RpcMethod rpcmethod_ModPolicy_;
    const ::grpc::RpcMethod rpcmethod_GetPolicyAssignment_;
    const ::grpc::RpcMethod rpcmethod_ModPolicyAssignment_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::SynchronousService {
   public:
    Service() : service_(nullptr) {}
    virtual ~Service();
    virtual ::grpc::Status GetGlobalConfig(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::gobgpapi::Global* response);
    virtual ::grpc::Status ModGlobalConfig(::grpc::ServerContext* context, const ::gobgpapi::ModGlobalConfigArguments* request, ::gobgpapi::Error* response);
    virtual ::grpc::Status GetNeighbors(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::grpc::ServerWriter< ::gobgpapi::Peer>* writer);
    virtual ::grpc::Status GetNeighbor(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::gobgpapi::Peer* response);
    virtual ::grpc::Status ModNeighbor(::grpc::ServerContext* context, const ::gobgpapi::ModNeighborArguments* request, ::gobgpapi::Error* response);
    virtual ::grpc::Status GetRib(::grpc::ServerContext* context, const ::gobgpapi::Table* request, ::gobgpapi::Table* response);
    virtual ::grpc::Status Reset(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::gobgpapi::Error* response);
    virtual ::grpc::Status SoftReset(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::gobgpapi::Error* response);
    virtual ::grpc::Status SoftResetIn(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::gobgpapi::Error* response);
    virtual ::grpc::Status SoftResetOut(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::gobgpapi::Error* response);
    virtual ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::gobgpapi::Error* response);
    virtual ::grpc::Status Enable(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::gobgpapi::Error* response);
    virtual ::grpc::Status Disable(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::gobgpapi::Error* response);
    virtual ::grpc::Status ModPath(::grpc::ServerContext* context, const ::gobgpapi::ModPathArguments* request, ::gobgpapi::ModPathResponse* response);
    virtual ::grpc::Status ModPaths(::grpc::ServerContext* context, ::grpc::ServerReader< ::gobgpapi::ModPathsArguments>* reader, ::gobgpapi::Error* response);
    virtual ::grpc::Status MonitorRib(::grpc::ServerContext* context, const ::gobgpapi::Table* request, ::grpc::ServerWriter< ::gobgpapi::Destination>* writer);
    virtual ::grpc::Status MonitorBestChanged(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::grpc::ServerWriter< ::gobgpapi::Destination>* writer);
    virtual ::grpc::Status MonitorPeerState(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::grpc::ServerWriter< ::gobgpapi::Peer>* writer);
    virtual ::grpc::Status MonitorROAValidation(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::grpc::ServerWriter< ::gobgpapi::ROAResult>* writer);
    virtual ::grpc::Status GetMrt(::grpc::ServerContext* context, const ::gobgpapi::MrtArguments* request, ::grpc::ServerWriter< ::gobgpapi::MrtMessage>* writer);
    virtual ::grpc::Status ModMrt(::grpc::ServerContext* context, const ::gobgpapi::ModMrtArguments* request, ::gobgpapi::Error* response);
    virtual ::grpc::Status ModBmp(::grpc::ServerContext* context, const ::gobgpapi::ModBmpArguments* request, ::gobgpapi::Error* response);
    virtual ::grpc::Status GetRPKI(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::grpc::ServerWriter< ::gobgpapi::RPKI>* writer);
    virtual ::grpc::Status ModRPKI(::grpc::ServerContext* context, const ::gobgpapi::ModRpkiArguments* request, ::gobgpapi::Error* response);
    virtual ::grpc::Status GetROA(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::grpc::ServerWriter< ::gobgpapi::ROA>* writer);
    virtual ::grpc::Status GetVrfs(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::grpc::ServerWriter< ::gobgpapi::Vrf>* writer);
    virtual ::grpc::Status ModVrf(::grpc::ServerContext* context, const ::gobgpapi::ModVrfArguments* request, ::gobgpapi::Error* response);
    virtual ::grpc::Status GetDefinedSet(::grpc::ServerContext* context, const ::gobgpapi::DefinedSet* request, ::gobgpapi::DefinedSet* response);
    virtual ::grpc::Status GetDefinedSets(::grpc::ServerContext* context, const ::gobgpapi::DefinedSet* request, ::grpc::ServerWriter< ::gobgpapi::DefinedSet>* writer);
    virtual ::grpc::Status ModDefinedSet(::grpc::ServerContext* context, const ::gobgpapi::ModDefinedSetArguments* request, ::gobgpapi::Error* response);
    virtual ::grpc::Status GetStatement(::grpc::ServerContext* context, const ::gobgpapi::Statement* request, ::gobgpapi::Statement* response);
    virtual ::grpc::Status GetStatements(::grpc::ServerContext* context, const ::gobgpapi::Statement* request, ::grpc::ServerWriter< ::gobgpapi::Statement>* writer);
    virtual ::grpc::Status ModStatement(::grpc::ServerContext* context, const ::gobgpapi::ModStatementArguments* request, ::gobgpapi::Error* response);
    virtual ::grpc::Status GetPolicy(::grpc::ServerContext* context, const ::gobgpapi::Policy* request, ::gobgpapi::Policy* response);
    virtual ::grpc::Status GetPolicies(::grpc::ServerContext* context, const ::gobgpapi::Policy* request, ::grpc::ServerWriter< ::gobgpapi::Policy>* writer);
    virtual ::grpc::Status ModPolicy(::grpc::ServerContext* context, const ::gobgpapi::ModPolicyArguments* request, ::gobgpapi::Error* response);
    virtual ::grpc::Status GetPolicyAssignment(::grpc::ServerContext* context, const ::gobgpapi::PolicyAssignment* request, ::gobgpapi::PolicyAssignment* response);
    virtual ::grpc::Status ModPolicyAssignment(::grpc::ServerContext* context, const ::gobgpapi::ModPolicyAssignmentArguments* request, ::gobgpapi::Error* response);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    ::grpc::RpcService* service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService();
    ~AsyncService() {};
    void RequestGetGlobalConfig(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Global>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestModGlobalConfig(::grpc::ServerContext* context, ::gobgpapi::ModGlobalConfigArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestGetNeighbors(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncWriter< ::gobgpapi::Peer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestGetNeighbor(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Peer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestModNeighbor(::grpc::ServerContext* context, ::gobgpapi::ModNeighborArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestGetRib(::grpc::ServerContext* context, ::gobgpapi::Table* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Table>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestReset(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestSoftReset(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestSoftResetIn(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestSoftResetOut(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestShutdown(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestEnable(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestDisable(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestModPath(::grpc::ServerContext* context, ::gobgpapi::ModPathArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::ModPathResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestModPaths(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::gobgpapi::Error, ::gobgpapi::ModPathsArguments>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestMonitorRib(::grpc::ServerContext* context, ::gobgpapi::Table* request, ::grpc::ServerAsyncWriter< ::gobgpapi::Destination>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestMonitorBestChanged(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncWriter< ::gobgpapi::Destination>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestMonitorPeerState(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncWriter< ::gobgpapi::Peer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestMonitorROAValidation(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncWriter< ::gobgpapi::ROAResult>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestGetMrt(::grpc::ServerContext* context, ::gobgpapi::MrtArguments* request, ::grpc::ServerAsyncWriter< ::gobgpapi::MrtMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestModMrt(::grpc::ServerContext* context, ::gobgpapi::ModMrtArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestModBmp(::grpc::ServerContext* context, ::gobgpapi::ModBmpArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestGetRPKI(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncWriter< ::gobgpapi::RPKI>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestModRPKI(::grpc::ServerContext* context, ::gobgpapi::ModRpkiArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestGetROA(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncWriter< ::gobgpapi::ROA>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestGetVrfs(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncWriter< ::gobgpapi::Vrf>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestModVrf(::grpc::ServerContext* context, ::gobgpapi::ModVrfArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestGetDefinedSet(::grpc::ServerContext* context, ::gobgpapi::DefinedSet* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::DefinedSet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestGetDefinedSets(::grpc::ServerContext* context, ::gobgpapi::DefinedSet* request, ::grpc::ServerAsyncWriter< ::gobgpapi::DefinedSet>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestModDefinedSet(::grpc::ServerContext* context, ::gobgpapi::ModDefinedSetArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestGetStatement(::grpc::ServerContext* context, ::gobgpapi::Statement* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Statement>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestGetStatements(::grpc::ServerContext* context, ::gobgpapi::Statement* request, ::grpc::ServerAsyncWriter< ::gobgpapi::Statement>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestModStatement(::grpc::ServerContext* context, ::gobgpapi::ModStatementArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestGetPolicy(::grpc::ServerContext* context, ::gobgpapi::Policy* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Policy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestGetPolicies(::grpc::ServerContext* context, ::gobgpapi::Policy* request, ::grpc::ServerAsyncWriter< ::gobgpapi::Policy>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestModPolicy(::grpc::ServerContext* context, ::gobgpapi::ModPolicyArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestGetPolicyAssignment(::grpc::ServerContext* context, ::gobgpapi::PolicyAssignment* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::PolicyAssignment>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestModPolicyAssignment(::grpc::ServerContext* context, ::gobgpapi::ModPolicyAssignmentArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
  };
};

}  // namespace gobgpapi


#endif  // GRPC_gobgp_5fapi_5fclient_2eproto__INCLUDED
