// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gobgp_api_client.proto

#ifndef PROTOBUF_gobgp_5fapi_5fclient_2eproto__INCLUDED
#define PROTOBUF_gobgp_5fapi_5fclient_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gobgpapi {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

class Actions;
class ApplyPolicy;
class Arguments;
class AsPathLength;
class AsPrependAction;
class CommunityAction;
class Conditions;
class DefinedSet;
class Destination;
class EbgpMultihop;
class Error;
class Global;
class MatchSet;
class MedAction;
class Message;
class Messages;
class ModBmpArguments;
class ModDefinedSetArguments;
class ModGlobalConfigArguments;
class ModMrtArguments;
class ModNeighborArguments;
class ModPathArguments;
class ModPathResponse;
class ModPathsArguments;
class ModPolicyArguments;
class ModPolicyAssignmentArguments;
class ModRpkiArguments;
class ModStatementArguments;
class ModVrfArguments;
class MrtArguments;
class MrtMessage;
class Path;
class Peer;
class PeerConf;
class PeerState;
class Policy;
class PolicyAssignment;
class Prefix;
class Queues;
class ROA;
class ROAResult;
class RPKI;
class RPKIConf;
class RPKIState;
class RouteReflector;
class RouteServer;
class Statement;
class Table;
class Timers;
class TimersConfig;
class TimersState;
class Transport;
class Vrf;

enum Error_ErrorCode {
  Error_ErrorCode_SUCCESS = 0,
  Error_ErrorCode_FAIL = 1,
  Error_ErrorCode_Error_ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Error_ErrorCode_Error_ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Error_ErrorCode_IsValid(int value);
const Error_ErrorCode Error_ErrorCode_ErrorCode_MIN = Error_ErrorCode_SUCCESS;
const Error_ErrorCode Error_ErrorCode_ErrorCode_MAX = Error_ErrorCode_FAIL;
const int Error_ErrorCode_ErrorCode_ARRAYSIZE = Error_ErrorCode_ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Error_ErrorCode_descriptor();
inline const ::std::string& Error_ErrorCode_Name(Error_ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Error_ErrorCode_descriptor(), value);
}
inline bool Error_ErrorCode_Parse(
    const ::std::string& name, Error_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Error_ErrorCode>(
    Error_ErrorCode_descriptor(), name, value);
}
enum ModBmpArguments_MonitoringPolicy {
  ModBmpArguments_MonitoringPolicy_PRE = 0,
  ModBmpArguments_MonitoringPolicy_POST = 1,
  ModBmpArguments_MonitoringPolicy_BOTH = 2,
  ModBmpArguments_MonitoringPolicy_ModBmpArguments_MonitoringPolicy_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ModBmpArguments_MonitoringPolicy_ModBmpArguments_MonitoringPolicy_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ModBmpArguments_MonitoringPolicy_IsValid(int value);
const ModBmpArguments_MonitoringPolicy ModBmpArguments_MonitoringPolicy_MonitoringPolicy_MIN = ModBmpArguments_MonitoringPolicy_PRE;
const ModBmpArguments_MonitoringPolicy ModBmpArguments_MonitoringPolicy_MonitoringPolicy_MAX = ModBmpArguments_MonitoringPolicy_BOTH;
const int ModBmpArguments_MonitoringPolicy_MonitoringPolicy_ARRAYSIZE = ModBmpArguments_MonitoringPolicy_MonitoringPolicy_MAX + 1;

const ::google::protobuf::EnumDescriptor* ModBmpArguments_MonitoringPolicy_descriptor();
inline const ::std::string& ModBmpArguments_MonitoringPolicy_Name(ModBmpArguments_MonitoringPolicy value) {
  return ::google::protobuf::internal::NameOfEnum(
    ModBmpArguments_MonitoringPolicy_descriptor(), value);
}
inline bool ModBmpArguments_MonitoringPolicy_Parse(
    const ::std::string& name, ModBmpArguments_MonitoringPolicy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModBmpArguments_MonitoringPolicy>(
    ModBmpArguments_MonitoringPolicy_descriptor(), name, value);
}
enum ROAResult_ValidationReason {
  ROAResult_ValidationReason_UPDATE = 0,
  ROAResult_ValidationReason_WITHDRAW = 1,
  ROAResult_ValidationReason_PEER_DOWN = 2,
  ROAResult_ValidationReason_REVALIDATE = 3,
  ROAResult_ValidationReason_ROAResult_ValidationReason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ROAResult_ValidationReason_ROAResult_ValidationReason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ROAResult_ValidationReason_IsValid(int value);
const ROAResult_ValidationReason ROAResult_ValidationReason_ValidationReason_MIN = ROAResult_ValidationReason_UPDATE;
const ROAResult_ValidationReason ROAResult_ValidationReason_ValidationReason_MAX = ROAResult_ValidationReason_REVALIDATE;
const int ROAResult_ValidationReason_ValidationReason_ARRAYSIZE = ROAResult_ValidationReason_ValidationReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* ROAResult_ValidationReason_descriptor();
inline const ::std::string& ROAResult_ValidationReason_Name(ROAResult_ValidationReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    ROAResult_ValidationReason_descriptor(), value);
}
inline bool ROAResult_ValidationReason_Parse(
    const ::std::string& name, ROAResult_ValidationReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ROAResult_ValidationReason>(
    ROAResult_ValidationReason_descriptor(), name, value);
}
enum ROAResult_ValidationResult {
  ROAResult_ValidationResult_NONE = 0,
  ROAResult_ValidationResult_NOT_FOUND = 1,
  ROAResult_ValidationResult_VALID = 2,
  ROAResult_ValidationResult_INVALID = 3,
  ROAResult_ValidationResult_ROAResult_ValidationResult_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ROAResult_ValidationResult_ROAResult_ValidationResult_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ROAResult_ValidationResult_IsValid(int value);
const ROAResult_ValidationResult ROAResult_ValidationResult_ValidationResult_MIN = ROAResult_ValidationResult_NONE;
const ROAResult_ValidationResult ROAResult_ValidationResult_ValidationResult_MAX = ROAResult_ValidationResult_INVALID;
const int ROAResult_ValidationResult_ValidationResult_ARRAYSIZE = ROAResult_ValidationResult_ValidationResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* ROAResult_ValidationResult_descriptor();
inline const ::std::string& ROAResult_ValidationResult_Name(ROAResult_ValidationResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    ROAResult_ValidationResult_descriptor(), value);
}
inline bool ROAResult_ValidationResult_Parse(
    const ::std::string& name, ROAResult_ValidationResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ROAResult_ValidationResult>(
    ROAResult_ValidationResult_descriptor(), name, value);
}
enum Resource {
  GLOBAL = 0,
  LOCAL = 1,
  ADJ_IN = 2,
  ADJ_OUT = 3,
  VRF = 4,
  Resource_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Resource_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Resource_IsValid(int value);
const Resource Resource_MIN = GLOBAL;
const Resource Resource_MAX = VRF;
const int Resource_ARRAYSIZE = Resource_MAX + 1;

const ::google::protobuf::EnumDescriptor* Resource_descriptor();
inline const ::std::string& Resource_Name(Resource value) {
  return ::google::protobuf::internal::NameOfEnum(
    Resource_descriptor(), value);
}
inline bool Resource_Parse(
    const ::std::string& name, Resource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Resource>(
    Resource_descriptor(), name, value);
}
enum Operation {
  ADD = 0,
  DEL = 1,
  DEL_ALL = 2,
  REPLACE = 3,
  ENABLE = 4,
  DISABLE = 5,
  RESET = 6,
  SOFTRESET = 7,
  Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Operation_IsValid(int value);
const Operation Operation_MIN = ADD;
const Operation Operation_MAX = SOFTRESET;
const int Operation_ARRAYSIZE = Operation_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operation_descriptor();
inline const ::std::string& Operation_Name(Operation value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operation_descriptor(), value);
}
inline bool Operation_Parse(
    const ::std::string& name, Operation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation>(
    Operation_descriptor(), name, value);
}
enum DefinedType {
  PREFIX = 0,
  NEIGHBOR = 1,
  TAG = 2,
  AS_PATH = 3,
  COMMUNITY = 4,
  EXT_COMMUNITY = 5,
  DefinedType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DefinedType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DefinedType_IsValid(int value);
const DefinedType DefinedType_MIN = PREFIX;
const DefinedType DefinedType_MAX = EXT_COMMUNITY;
const int DefinedType_ARRAYSIZE = DefinedType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DefinedType_descriptor();
inline const ::std::string& DefinedType_Name(DefinedType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DefinedType_descriptor(), value);
}
inline bool DefinedType_Parse(
    const ::std::string& name, DefinedType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DefinedType>(
    DefinedType_descriptor(), name, value);
}
enum MatchType {
  ANY = 0,
  ALL = 1,
  INVERT = 2,
  MatchType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MatchType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MatchType_IsValid(int value);
const MatchType MatchType_MIN = ANY;
const MatchType MatchType_MAX = INVERT;
const int MatchType_ARRAYSIZE = MatchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MatchType_descriptor();
inline const ::std::string& MatchType_Name(MatchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MatchType_descriptor(), value);
}
inline bool MatchType_Parse(
    const ::std::string& name, MatchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MatchType>(
    MatchType_descriptor(), name, value);
}
enum AsPathLengthType {
  EQ = 0,
  GE = 1,
  LE = 2,
  AsPathLengthType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AsPathLengthType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AsPathLengthType_IsValid(int value);
const AsPathLengthType AsPathLengthType_MIN = EQ;
const AsPathLengthType AsPathLengthType_MAX = LE;
const int AsPathLengthType_ARRAYSIZE = AsPathLengthType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AsPathLengthType_descriptor();
inline const ::std::string& AsPathLengthType_Name(AsPathLengthType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AsPathLengthType_descriptor(), value);
}
inline bool AsPathLengthType_Parse(
    const ::std::string& name, AsPathLengthType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AsPathLengthType>(
    AsPathLengthType_descriptor(), name, value);
}
enum RouteAction {
  NONE = 0,
  ACCEPT = 1,
  REJECT = 2,
  RouteAction_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RouteAction_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RouteAction_IsValid(int value);
const RouteAction RouteAction_MIN = NONE;
const RouteAction RouteAction_MAX = REJECT;
const int RouteAction_ARRAYSIZE = RouteAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* RouteAction_descriptor();
inline const ::std::string& RouteAction_Name(RouteAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    RouteAction_descriptor(), value);
}
inline bool RouteAction_Parse(
    const ::std::string& name, RouteAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RouteAction>(
    RouteAction_descriptor(), name, value);
}
enum CommunityActionType {
  COMMUNITY_ADD = 0,
  COMMUNITY_REMOVE = 1,
  COMMUNITY_REPLACE = 2,
  CommunityActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommunityActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommunityActionType_IsValid(int value);
const CommunityActionType CommunityActionType_MIN = COMMUNITY_ADD;
const CommunityActionType CommunityActionType_MAX = COMMUNITY_REPLACE;
const int CommunityActionType_ARRAYSIZE = CommunityActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommunityActionType_descriptor();
inline const ::std::string& CommunityActionType_Name(CommunityActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommunityActionType_descriptor(), value);
}
inline bool CommunityActionType_Parse(
    const ::std::string& name, CommunityActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommunityActionType>(
    CommunityActionType_descriptor(), name, value);
}
enum MedActionType {
  MED_MOD = 0,
  MED_REPLACE = 1,
  MedActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MedActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MedActionType_IsValid(int value);
const MedActionType MedActionType_MIN = MED_MOD;
const MedActionType MedActionType_MAX = MED_REPLACE;
const int MedActionType_ARRAYSIZE = MedActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MedActionType_descriptor();
inline const ::std::string& MedActionType_Name(MedActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MedActionType_descriptor(), value);
}
inline bool MedActionType_Parse(
    const ::std::string& name, MedActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MedActionType>(
    MedActionType_descriptor(), name, value);
}
enum PolicyType {
  IN = 0,
  IMPORT = 1,
  EXPORT = 2,
  PolicyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PolicyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PolicyType_IsValid(int value);
const PolicyType PolicyType_MIN = IN;
const PolicyType PolicyType_MAX = EXPORT;
const int PolicyType_ARRAYSIZE = PolicyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PolicyType_descriptor();
inline const ::std::string& PolicyType_Name(PolicyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PolicyType_descriptor(), value);
}
inline bool PolicyType_Parse(
    const ::std::string& name, PolicyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PolicyType>(
    PolicyType_descriptor(), name, value);
}
// ===================================================================

class Error : public ::google::protobuf::Message {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  void Swap(Error* other);

  // implements Message ----------------------------------------------

  inline Error* New() const { return New(NULL); }

  Error* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Error_ErrorCode ErrorCode;
  static const ErrorCode SUCCESS = Error_ErrorCode_SUCCESS;
  static const ErrorCode FAIL = Error_ErrorCode_FAIL;
  static inline bool ErrorCode_IsValid(int value) {
    return Error_ErrorCode_IsValid(value);
  }
  static const ErrorCode ErrorCode_MIN =
    Error_ErrorCode_ErrorCode_MIN;
  static const ErrorCode ErrorCode_MAX =
    Error_ErrorCode_ErrorCode_MAX;
  static const int ErrorCode_ARRAYSIZE =
    Error_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorCode_descriptor() {
    return Error_ErrorCode_descriptor();
  }
  static inline const ::std::string& ErrorCode_Name(ErrorCode value) {
    return Error_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(const ::std::string& name,
      ErrorCode* value) {
    return Error_ErrorCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .gobgpapi.Error.ErrorCode code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::gobgpapi::Error_ErrorCode code() const;
  void set_code(::gobgpapi::Error_ErrorCode value);

  // optional string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:gobgpapi.Error)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  int code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// -------------------------------------------------------------------

class Arguments : public ::google::protobuf::Message {
 public:
  Arguments();
  virtual ~Arguments();

  Arguments(const Arguments& from);

  inline Arguments& operator=(const Arguments& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Arguments& default_instance();

  void Swap(Arguments* other);

  // implements Message ----------------------------------------------

  inline Arguments* New() const { return New(NULL); }

  Arguments* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Arguments& from);
  void MergeFrom(const Arguments& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Arguments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.Resource resource = 1;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  ::gobgpapi::Resource resource() const;
  void set_resource(::gobgpapi::Resource value);

  // optional uint32 family = 2;
  void clear_family();
  static const int kFamilyFieldNumber = 2;
  ::google::protobuf::uint32 family() const;
  void set_family(::google::protobuf::uint32 value);

  // optional string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:gobgpapi.Arguments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int resource_;
  ::google::protobuf::uint32 family_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static Arguments* default_instance_;
};
// -------------------------------------------------------------------

class ModPathArguments : public ::google::protobuf::Message {
 public:
  ModPathArguments();
  virtual ~ModPathArguments();

  ModPathArguments(const ModPathArguments& from);

  inline ModPathArguments& operator=(const ModPathArguments& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModPathArguments& default_instance();

  void Swap(ModPathArguments* other);

  // implements Message ----------------------------------------------

  inline ModPathArguments* New() const { return New(NULL); }

  ModPathArguments* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModPathArguments& from);
  void MergeFrom(const ModPathArguments& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModPathArguments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.Operation operation = 1;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::gobgpapi::Operation operation() const;
  void set_operation(::gobgpapi::Operation value);

  // optional .gobgpapi.Resource resource = 2;
  void clear_resource();
  static const int kResourceFieldNumber = 2;
  ::gobgpapi::Resource resource() const;
  void set_resource(::gobgpapi::Resource value);

  // optional string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .gobgpapi.Path path = 4;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 4;
  const ::gobgpapi::Path& path() const;
  ::gobgpapi::Path* mutable_path();
  ::gobgpapi::Path* release_path();
  void set_allocated_path(::gobgpapi::Path* path);

  // optional bytes uuid = 5;
  void clear_uuid();
  static const int kUuidFieldNumber = 5;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional uint32 family = 6;
  void clear_family();
  static const int kFamilyFieldNumber = 6;
  ::google::protobuf::uint32 family() const;
  void set_family(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.ModPathArguments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int operation_;
  int resource_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::gobgpapi::Path* path_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::uint32 family_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static ModPathArguments* default_instance_;
};
// -------------------------------------------------------------------

class ModPathResponse : public ::google::protobuf::Message {
 public:
  ModPathResponse();
  virtual ~ModPathResponse();

  ModPathResponse(const ModPathResponse& from);

  inline ModPathResponse& operator=(const ModPathResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModPathResponse& default_instance();

  void Swap(ModPathResponse* other);

  // implements Message ----------------------------------------------

  inline ModPathResponse* New() const { return New(NULL); }

  ModPathResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModPathResponse& from);
  void MergeFrom(const ModPathResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModPathResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:gobgpapi.ModPathResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static ModPathResponse* default_instance_;
};
// -------------------------------------------------------------------

class ModPathsArguments : public ::google::protobuf::Message {
 public:
  ModPathsArguments();
  virtual ~ModPathsArguments();

  ModPathsArguments(const ModPathsArguments& from);

  inline ModPathsArguments& operator=(const ModPathsArguments& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModPathsArguments& default_instance();

  void Swap(ModPathsArguments* other);

  // implements Message ----------------------------------------------

  inline ModPathsArguments* New() const { return New(NULL); }

  ModPathsArguments* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModPathsArguments& from);
  void MergeFrom(const ModPathsArguments& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModPathsArguments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.Resource resource = 1;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  ::gobgpapi::Resource resource() const;
  void set_resource(::gobgpapi::Resource value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .gobgpapi.Path paths = 3;
  int paths_size() const;
  void clear_paths();
  static const int kPathsFieldNumber = 3;
  const ::gobgpapi::Path& paths(int index) const;
  ::gobgpapi::Path* mutable_paths(int index);
  ::gobgpapi::Path* add_paths();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path >*
      mutable_paths();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path >&
      paths() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.ModPathsArguments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path > paths_;
  int resource_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static ModPathsArguments* default_instance_;
};
// -------------------------------------------------------------------

class ModNeighborArguments : public ::google::protobuf::Message {
 public:
  ModNeighborArguments();
  virtual ~ModNeighborArguments();

  ModNeighborArguments(const ModNeighborArguments& from);

  inline ModNeighborArguments& operator=(const ModNeighborArguments& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModNeighborArguments& default_instance();

  void Swap(ModNeighborArguments* other);

  // implements Message ----------------------------------------------

  inline ModNeighborArguments* New() const { return New(NULL); }

  ModNeighborArguments* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModNeighborArguments& from);
  void MergeFrom(const ModNeighborArguments& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModNeighborArguments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.Operation operation = 1;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::gobgpapi::Operation operation() const;
  void set_operation(::gobgpapi::Operation value);

  // optional .gobgpapi.Peer peer = 2;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 2;
  const ::gobgpapi::Peer& peer() const;
  ::gobgpapi::Peer* mutable_peer();
  ::gobgpapi::Peer* release_peer();
  void set_allocated_peer(::gobgpapi::Peer* peer);

  // @@protoc_insertion_point(class_scope:gobgpapi.ModNeighborArguments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::gobgpapi::Peer* peer_;
  int operation_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static ModNeighborArguments* default_instance_;
};
// -------------------------------------------------------------------

class MrtArguments : public ::google::protobuf::Message {
 public:
  MrtArguments();
  virtual ~MrtArguments();

  MrtArguments(const MrtArguments& from);

  inline MrtArguments& operator=(const MrtArguments& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MrtArguments& default_instance();

  void Swap(MrtArguments* other);

  // implements Message ----------------------------------------------

  inline MrtArguments* New() const { return New(NULL); }

  MrtArguments* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MrtArguments& from);
  void MergeFrom(const MrtArguments& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MrtArguments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.Resource resource = 1;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  ::gobgpapi::Resource resource() const;
  void set_resource(::gobgpapi::Resource value);

  // optional uint32 family = 2;
  void clear_family();
  static const int kFamilyFieldNumber = 2;
  ::google::protobuf::uint32 family() const;
  void set_family(::google::protobuf::uint32 value);

  // optional uint64 interval = 3;
  void clear_interval();
  static const int kIntervalFieldNumber = 3;
  ::google::protobuf::uint64 interval() const;
  void set_interval(::google::protobuf::uint64 value);

  // optional string neighbor_address = 4;
  void clear_neighbor_address();
  static const int kNeighborAddressFieldNumber = 4;
  const ::std::string& neighbor_address() const;
  void set_neighbor_address(const ::std::string& value);
  void set_neighbor_address(const char* value);
  void set_neighbor_address(const char* value, size_t size);
  ::std::string* mutable_neighbor_address();
  ::std::string* release_neighbor_address();
  void set_allocated_neighbor_address(::std::string* neighbor_address);

  // @@protoc_insertion_point(class_scope:gobgpapi.MrtArguments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int resource_;
  ::google::protobuf::uint32 family_;
  ::google::protobuf::uint64 interval_;
  ::google::protobuf::internal::ArenaStringPtr neighbor_address_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static MrtArguments* default_instance_;
};
// -------------------------------------------------------------------

class ModMrtArguments : public ::google::protobuf::Message {
 public:
  ModMrtArguments();
  virtual ~ModMrtArguments();

  ModMrtArguments(const ModMrtArguments& from);

  inline ModMrtArguments& operator=(const ModMrtArguments& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModMrtArguments& default_instance();

  void Swap(ModMrtArguments* other);

  // implements Message ----------------------------------------------

  inline ModMrtArguments* New() const { return New(NULL); }

  ModMrtArguments* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModMrtArguments& from);
  void MergeFrom(const ModMrtArguments& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModMrtArguments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.Operation operation = 1;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::gobgpapi::Operation operation() const;
  void set_operation(::gobgpapi::Operation value);

  // optional int32 dump_type = 2;
  void clear_dump_type();
  static const int kDumpTypeFieldNumber = 2;
  ::google::protobuf::int32 dump_type() const;
  void set_dump_type(::google::protobuf::int32 value);

  // optional string filename = 3;
  void clear_filename();
  static const int kFilenameFieldNumber = 3;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional uint64 interval = 4;
  void clear_interval();
  static const int kIntervalFieldNumber = 4;
  ::google::protobuf::uint64 interval() const;
  void set_interval(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.ModMrtArguments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int operation_;
  ::google::protobuf::int32 dump_type_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::uint64 interval_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static ModMrtArguments* default_instance_;
};
// -------------------------------------------------------------------

class ModBmpArguments : public ::google::protobuf::Message {
 public:
  ModBmpArguments();
  virtual ~ModBmpArguments();

  ModBmpArguments(const ModBmpArguments& from);

  inline ModBmpArguments& operator=(const ModBmpArguments& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModBmpArguments& default_instance();

  void Swap(ModBmpArguments* other);

  // implements Message ----------------------------------------------

  inline ModBmpArguments* New() const { return New(NULL); }

  ModBmpArguments* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModBmpArguments& from);
  void MergeFrom(const ModBmpArguments& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModBmpArguments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ModBmpArguments_MonitoringPolicy MonitoringPolicy;
  static const MonitoringPolicy PRE = ModBmpArguments_MonitoringPolicy_PRE;
  static const MonitoringPolicy POST = ModBmpArguments_MonitoringPolicy_POST;
  static const MonitoringPolicy BOTH = ModBmpArguments_MonitoringPolicy_BOTH;
  static inline bool MonitoringPolicy_IsValid(int value) {
    return ModBmpArguments_MonitoringPolicy_IsValid(value);
  }
  static const MonitoringPolicy MonitoringPolicy_MIN =
    ModBmpArguments_MonitoringPolicy_MonitoringPolicy_MIN;
  static const MonitoringPolicy MonitoringPolicy_MAX =
    ModBmpArguments_MonitoringPolicy_MonitoringPolicy_MAX;
  static const int MonitoringPolicy_ARRAYSIZE =
    ModBmpArguments_MonitoringPolicy_MonitoringPolicy_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MonitoringPolicy_descriptor() {
    return ModBmpArguments_MonitoringPolicy_descriptor();
  }
  static inline const ::std::string& MonitoringPolicy_Name(MonitoringPolicy value) {
    return ModBmpArguments_MonitoringPolicy_Name(value);
  }
  static inline bool MonitoringPolicy_Parse(const ::std::string& name,
      MonitoringPolicy* value) {
    return ModBmpArguments_MonitoringPolicy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .gobgpapi.Operation operation = 1;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::gobgpapi::Operation operation() const;
  void set_operation(::gobgpapi::Operation value);

  // optional string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional uint32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // optional .gobgpapi.ModBmpArguments.MonitoringPolicy type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::gobgpapi::ModBmpArguments_MonitoringPolicy type() const;
  void set_type(::gobgpapi::ModBmpArguments_MonitoringPolicy value);

  // @@protoc_insertion_point(class_scope:gobgpapi.ModBmpArguments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  int operation_;
  ::google::protobuf::uint32 port_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static ModBmpArguments* default_instance_;
};
// -------------------------------------------------------------------

class ModRpkiArguments : public ::google::protobuf::Message {
 public:
  ModRpkiArguments();
  virtual ~ModRpkiArguments();

  ModRpkiArguments(const ModRpkiArguments& from);

  inline ModRpkiArguments& operator=(const ModRpkiArguments& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModRpkiArguments& default_instance();

  void Swap(ModRpkiArguments* other);

  // implements Message ----------------------------------------------

  inline ModRpkiArguments* New() const { return New(NULL); }

  ModRpkiArguments* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModRpkiArguments& from);
  void MergeFrom(const ModRpkiArguments& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModRpkiArguments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.Operation operation = 1;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::gobgpapi::Operation operation() const;
  void set_operation(::gobgpapi::Operation value);

  // optional string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional uint32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.ModRpkiArguments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  int operation_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static ModRpkiArguments* default_instance_;
};
// -------------------------------------------------------------------

class ModVrfArguments : public ::google::protobuf::Message {
 public:
  ModVrfArguments();
  virtual ~ModVrfArguments();

  ModVrfArguments(const ModVrfArguments& from);

  inline ModVrfArguments& operator=(const ModVrfArguments& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModVrfArguments& default_instance();

  void Swap(ModVrfArguments* other);

  // implements Message ----------------------------------------------

  inline ModVrfArguments* New() const { return New(NULL); }

  ModVrfArguments* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModVrfArguments& from);
  void MergeFrom(const ModVrfArguments& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModVrfArguments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.Operation operation = 1;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::gobgpapi::Operation operation() const;
  void set_operation(::gobgpapi::Operation value);

  // optional .gobgpapi.Vrf vrf = 2;
  bool has_vrf() const;
  void clear_vrf();
  static const int kVrfFieldNumber = 2;
  const ::gobgpapi::Vrf& vrf() const;
  ::gobgpapi::Vrf* mutable_vrf();
  ::gobgpapi::Vrf* release_vrf();
  void set_allocated_vrf(::gobgpapi::Vrf* vrf);

  // @@protoc_insertion_point(class_scope:gobgpapi.ModVrfArguments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::gobgpapi::Vrf* vrf_;
  int operation_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static ModVrfArguments* default_instance_;
};
// -------------------------------------------------------------------

class ModDefinedSetArguments : public ::google::protobuf::Message {
 public:
  ModDefinedSetArguments();
  virtual ~ModDefinedSetArguments();

  ModDefinedSetArguments(const ModDefinedSetArguments& from);

  inline ModDefinedSetArguments& operator=(const ModDefinedSetArguments& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModDefinedSetArguments& default_instance();

  void Swap(ModDefinedSetArguments* other);

  // implements Message ----------------------------------------------

  inline ModDefinedSetArguments* New() const { return New(NULL); }

  ModDefinedSetArguments* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModDefinedSetArguments& from);
  void MergeFrom(const ModDefinedSetArguments& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModDefinedSetArguments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.Operation operation = 1;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::gobgpapi::Operation operation() const;
  void set_operation(::gobgpapi::Operation value);

  // optional .gobgpapi.DefinedSet set = 2;
  bool has_set() const;
  void clear_set();
  static const int kSetFieldNumber = 2;
  const ::gobgpapi::DefinedSet& set() const;
  ::gobgpapi::DefinedSet* mutable_set();
  ::gobgpapi::DefinedSet* release_set();
  void set_allocated_set(::gobgpapi::DefinedSet* set);

  // @@protoc_insertion_point(class_scope:gobgpapi.ModDefinedSetArguments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::gobgpapi::DefinedSet* set_;
  int operation_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static ModDefinedSetArguments* default_instance_;
};
// -------------------------------------------------------------------

class ModStatementArguments : public ::google::protobuf::Message {
 public:
  ModStatementArguments();
  virtual ~ModStatementArguments();

  ModStatementArguments(const ModStatementArguments& from);

  inline ModStatementArguments& operator=(const ModStatementArguments& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModStatementArguments& default_instance();

  void Swap(ModStatementArguments* other);

  // implements Message ----------------------------------------------

  inline ModStatementArguments* New() const { return New(NULL); }

  ModStatementArguments* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModStatementArguments& from);
  void MergeFrom(const ModStatementArguments& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModStatementArguments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.Operation operation = 1;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::gobgpapi::Operation operation() const;
  void set_operation(::gobgpapi::Operation value);

  // optional .gobgpapi.Statement statement = 2;
  bool has_statement() const;
  void clear_statement();
  static const int kStatementFieldNumber = 2;
  const ::gobgpapi::Statement& statement() const;
  ::gobgpapi::Statement* mutable_statement();
  ::gobgpapi::Statement* release_statement();
  void set_allocated_statement(::gobgpapi::Statement* statement);

  // @@protoc_insertion_point(class_scope:gobgpapi.ModStatementArguments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::gobgpapi::Statement* statement_;
  int operation_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static ModStatementArguments* default_instance_;
};
// -------------------------------------------------------------------

class ModPolicyArguments : public ::google::protobuf::Message {
 public:
  ModPolicyArguments();
  virtual ~ModPolicyArguments();

  ModPolicyArguments(const ModPolicyArguments& from);

  inline ModPolicyArguments& operator=(const ModPolicyArguments& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModPolicyArguments& default_instance();

  void Swap(ModPolicyArguments* other);

  // implements Message ----------------------------------------------

  inline ModPolicyArguments* New() const { return New(NULL); }

  ModPolicyArguments* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModPolicyArguments& from);
  void MergeFrom(const ModPolicyArguments& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModPolicyArguments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.Operation operation = 1;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::gobgpapi::Operation operation() const;
  void set_operation(::gobgpapi::Operation value);

  // optional .gobgpapi.Policy policy = 2;
  bool has_policy() const;
  void clear_policy();
  static const int kPolicyFieldNumber = 2;
  const ::gobgpapi::Policy& policy() const;
  ::gobgpapi::Policy* mutable_policy();
  ::gobgpapi::Policy* release_policy();
  void set_allocated_policy(::gobgpapi::Policy* policy);

  // optional bool refer_existing_statements = 3;
  void clear_refer_existing_statements();
  static const int kReferExistingStatementsFieldNumber = 3;
  bool refer_existing_statements() const;
  void set_refer_existing_statements(bool value);

  // optional bool preserve_statements = 4;
  void clear_preserve_statements();
  static const int kPreserveStatementsFieldNumber = 4;
  bool preserve_statements() const;
  void set_preserve_statements(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.ModPolicyArguments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::gobgpapi::Policy* policy_;
  int operation_;
  bool refer_existing_statements_;
  bool preserve_statements_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static ModPolicyArguments* default_instance_;
};
// -------------------------------------------------------------------

class ModPolicyAssignmentArguments : public ::google::protobuf::Message {
 public:
  ModPolicyAssignmentArguments();
  virtual ~ModPolicyAssignmentArguments();

  ModPolicyAssignmentArguments(const ModPolicyAssignmentArguments& from);

  inline ModPolicyAssignmentArguments& operator=(const ModPolicyAssignmentArguments& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModPolicyAssignmentArguments& default_instance();

  void Swap(ModPolicyAssignmentArguments* other);

  // implements Message ----------------------------------------------

  inline ModPolicyAssignmentArguments* New() const { return New(NULL); }

  ModPolicyAssignmentArguments* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModPolicyAssignmentArguments& from);
  void MergeFrom(const ModPolicyAssignmentArguments& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModPolicyAssignmentArguments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.Operation operation = 1;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::gobgpapi::Operation operation() const;
  void set_operation(::gobgpapi::Operation value);

  // optional .gobgpapi.PolicyAssignment assignment = 2;
  bool has_assignment() const;
  void clear_assignment();
  static const int kAssignmentFieldNumber = 2;
  const ::gobgpapi::PolicyAssignment& assignment() const;
  ::gobgpapi::PolicyAssignment* mutable_assignment();
  ::gobgpapi::PolicyAssignment* release_assignment();
  void set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment);

  // @@protoc_insertion_point(class_scope:gobgpapi.ModPolicyAssignmentArguments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::gobgpapi::PolicyAssignment* assignment_;
  int operation_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static ModPolicyAssignmentArguments* default_instance_;
};
// -------------------------------------------------------------------

class ModGlobalConfigArguments : public ::google::protobuf::Message {
 public:
  ModGlobalConfigArguments();
  virtual ~ModGlobalConfigArguments();

  ModGlobalConfigArguments(const ModGlobalConfigArguments& from);

  inline ModGlobalConfigArguments& operator=(const ModGlobalConfigArguments& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModGlobalConfigArguments& default_instance();

  void Swap(ModGlobalConfigArguments* other);

  // implements Message ----------------------------------------------

  inline ModGlobalConfigArguments* New() const { return New(NULL); }

  ModGlobalConfigArguments* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModGlobalConfigArguments& from);
  void MergeFrom(const ModGlobalConfigArguments& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModGlobalConfigArguments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.Operation operation = 1;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::gobgpapi::Operation operation() const;
  void set_operation(::gobgpapi::Operation value);

  // optional .gobgpapi.Global global = 2;
  bool has_global() const;
  void clear_global();
  static const int kGlobalFieldNumber = 2;
  const ::gobgpapi::Global& global() const;
  ::gobgpapi::Global* mutable_global();
  ::gobgpapi::Global* release_global();
  void set_allocated_global(::gobgpapi::Global* global);

  // @@protoc_insertion_point(class_scope:gobgpapi.ModGlobalConfigArguments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::gobgpapi::Global* global_;
  int operation_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static ModGlobalConfigArguments* default_instance_;
};
// -------------------------------------------------------------------

class Path : public ::google::protobuf::Message {
 public:
  Path();
  virtual ~Path();

  Path(const Path& from);

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Path& default_instance();

  void Swap(Path* other);

  // implements Message ----------------------------------------------

  inline Path* New() const { return New(NULL); }

  Path* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Path* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes nlri = 1;
  void clear_nlri();
  static const int kNlriFieldNumber = 1;
  const ::std::string& nlri() const;
  void set_nlri(const ::std::string& value);
  void set_nlri(const char* value);
  void set_nlri(const void* value, size_t size);
  ::std::string* mutable_nlri();
  ::std::string* release_nlri();
  void set_allocated_nlri(::std::string* nlri);

  // repeated bytes pattrs = 2;
  int pattrs_size() const;
  void clear_pattrs();
  static const int kPattrsFieldNumber = 2;
  const ::std::string& pattrs(int index) const;
  ::std::string* mutable_pattrs(int index);
  void set_pattrs(int index, const ::std::string& value);
  void set_pattrs(int index, const char* value);
  void set_pattrs(int index, const void* value, size_t size);
  ::std::string* add_pattrs();
  void add_pattrs(const ::std::string& value);
  void add_pattrs(const char* value);
  void add_pattrs(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& pattrs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pattrs();

  // optional int64 age = 3;
  void clear_age();
  static const int kAgeFieldNumber = 3;
  ::google::protobuf::int64 age() const;
  void set_age(::google::protobuf::int64 value);

  // optional bool best = 4;
  void clear_best();
  static const int kBestFieldNumber = 4;
  bool best() const;
  void set_best(bool value);

  // optional bool is_withdraw = 5;
  void clear_is_withdraw();
  static const int kIsWithdrawFieldNumber = 5;
  bool is_withdraw() const;
  void set_is_withdraw(bool value);

  // optional int32 validation = 6;
  void clear_validation();
  static const int kValidationFieldNumber = 6;
  ::google::protobuf::int32 validation() const;
  void set_validation(::google::protobuf::int32 value);

  // optional bool no_implicit_withdraw = 7;
  void clear_no_implicit_withdraw();
  static const int kNoImplicitWithdrawFieldNumber = 7;
  bool no_implicit_withdraw() const;
  void set_no_implicit_withdraw(bool value);

  // optional uint32 family = 8;
  void clear_family();
  static const int kFamilyFieldNumber = 8;
  ::google::protobuf::uint32 family() const;
  void set_family(::google::protobuf::uint32 value);

  // optional uint32 source_asn = 9;
  void clear_source_asn();
  static const int kSourceAsnFieldNumber = 9;
  ::google::protobuf::uint32 source_asn() const;
  void set_source_asn(::google::protobuf::uint32 value);

  // optional string source_id = 10;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 10;
  const ::std::string& source_id() const;
  void set_source_id(const ::std::string& value);
  void set_source_id(const char* value);
  void set_source_id(const char* value, size_t size);
  ::std::string* mutable_source_id();
  ::std::string* release_source_id();
  void set_allocated_source_id(::std::string* source_id);

  // optional bool filtered = 11;
  void clear_filtered();
  static const int kFilteredFieldNumber = 11;
  bool filtered() const;
  void set_filtered(bool value);

  // optional bool stale = 12;
  void clear_stale();
  static const int kStaleFieldNumber = 12;
  bool stale() const;
  void set_stale(bool value);

  // optional bool is_from_external = 13;
  void clear_is_from_external();
  static const int kIsFromExternalFieldNumber = 13;
  bool is_from_external() const;
  void set_is_from_external(bool value);

  // optional string neighbor_ip = 14;
  void clear_neighbor_ip();
  static const int kNeighborIpFieldNumber = 14;
  const ::std::string& neighbor_ip() const;
  void set_neighbor_ip(const ::std::string& value);
  void set_neighbor_ip(const char* value);
  void set_neighbor_ip(const char* value, size_t size);
  ::std::string* mutable_neighbor_ip();
  ::std::string* release_neighbor_ip();
  void set_allocated_neighbor_ip(::std::string* neighbor_ip);

  // @@protoc_insertion_point(class_scope:gobgpapi.Path)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr nlri_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pattrs_;
  ::google::protobuf::int64 age_;
  ::google::protobuf::int32 validation_;
  bool best_;
  bool is_withdraw_;
  bool no_implicit_withdraw_;
  bool filtered_;
  ::google::protobuf::uint32 family_;
  ::google::protobuf::uint32 source_asn_;
  ::google::protobuf::internal::ArenaStringPtr source_id_;
  ::google::protobuf::internal::ArenaStringPtr neighbor_ip_;
  bool stale_;
  bool is_from_external_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static Path* default_instance_;
};
// -------------------------------------------------------------------

class Destination : public ::google::protobuf::Message {
 public:
  Destination();
  virtual ~Destination();

  Destination(const Destination& from);

  inline Destination& operator=(const Destination& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Destination& default_instance();

  void Swap(Destination* other);

  // implements Message ----------------------------------------------

  inline Destination* New() const { return New(NULL); }

  Destination* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Destination& from);
  void MergeFrom(const Destination& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Destination* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string prefix = 1;
  void clear_prefix();
  static const int kPrefixFieldNumber = 1;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // repeated .gobgpapi.Path paths = 2;
  int paths_size() const;
  void clear_paths();
  static const int kPathsFieldNumber = 2;
  const ::gobgpapi::Path& paths(int index) const;
  ::gobgpapi::Path* mutable_paths(int index);
  ::gobgpapi::Path* add_paths();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path >*
      mutable_paths();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path >&
      paths() const;

  // optional bool longer_prefixes = 3;
  void clear_longer_prefixes();
  static const int kLongerPrefixesFieldNumber = 3;
  bool longer_prefixes() const;
  void set_longer_prefixes(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Destination)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path > paths_;
  bool longer_prefixes_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static Destination* default_instance_;
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();

  void Swap(Table* other);

  // implements Message ----------------------------------------------

  inline Table* New() const { return New(NULL); }

  Table* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Table* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.Resource type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gobgpapi::Resource type() const;
  void set_type(::gobgpapi::Resource value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 family = 3;
  void clear_family();
  static const int kFamilyFieldNumber = 3;
  ::google::protobuf::uint32 family() const;
  void set_family(::google::protobuf::uint32 value);

  // repeated .gobgpapi.Destination destinations = 4;
  int destinations_size() const;
  void clear_destinations();
  static const int kDestinationsFieldNumber = 4;
  const ::gobgpapi::Destination& destinations(int index) const;
  ::gobgpapi::Destination* mutable_destinations(int index);
  ::gobgpapi::Destination* add_destinations();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Destination >*
      mutable_destinations();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Destination >&
      destinations() const;

  // optional bool post_policy = 5;
  void clear_post_policy();
  static const int kPostPolicyFieldNumber = 5;
  bool post_policy() const;
  void set_post_policy(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Table)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  ::google::protobuf::uint32 family_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Destination > destinations_;
  bool post_policy_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static Table* default_instance_;
};
// -------------------------------------------------------------------

class Peer : public ::google::protobuf::Message {
 public:
  Peer();
  virtual ~Peer();

  Peer(const Peer& from);

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Peer& default_instance();

  void Swap(Peer* other);

  // implements Message ----------------------------------------------

  inline Peer* New() const { return New(NULL); }

  Peer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Peer& from);
  void MergeFrom(const Peer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Peer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 families = 2;
  int families_size() const;
  void clear_families();
  static const int kFamiliesFieldNumber = 2;
  ::google::protobuf::uint32 families(int index) const;
  void set_families(int index, ::google::protobuf::uint32 value);
  void add_families(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      families() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_families();

  // optional .gobgpapi.ApplyPolicy apply_policy = 3;
  bool has_apply_policy() const;
  void clear_apply_policy();
  static const int kApplyPolicyFieldNumber = 3;
  const ::gobgpapi::ApplyPolicy& apply_policy() const;
  ::gobgpapi::ApplyPolicy* mutable_apply_policy();
  ::gobgpapi::ApplyPolicy* release_apply_policy();
  void set_allocated_apply_policy(::gobgpapi::ApplyPolicy* apply_policy);

  // optional .gobgpapi.PeerConf conf = 5;
  bool has_conf() const;
  void clear_conf();
  static const int kConfFieldNumber = 5;
  const ::gobgpapi::PeerConf& conf() const;
  ::gobgpapi::PeerConf* mutable_conf();
  ::gobgpapi::PeerConf* release_conf();
  void set_allocated_conf(::gobgpapi::PeerConf* conf);

  // optional .gobgpapi.EbgpMultihop ebgp_multihop = 6;
  bool has_ebgp_multihop() const;
  void clear_ebgp_multihop();
  static const int kEbgpMultihopFieldNumber = 6;
  const ::gobgpapi::EbgpMultihop& ebgp_multihop() const;
  ::gobgpapi::EbgpMultihop* mutable_ebgp_multihop();
  ::gobgpapi::EbgpMultihop* release_ebgp_multihop();
  void set_allocated_ebgp_multihop(::gobgpapi::EbgpMultihop* ebgp_multihop);

  // optional .gobgpapi.RouteReflector route_reflector = 10;
  bool has_route_reflector() const;
  void clear_route_reflector();
  static const int kRouteReflectorFieldNumber = 10;
  const ::gobgpapi::RouteReflector& route_reflector() const;
  ::gobgpapi::RouteReflector* mutable_route_reflector();
  ::gobgpapi::RouteReflector* release_route_reflector();
  void set_allocated_route_reflector(::gobgpapi::RouteReflector* route_reflector);

  // optional .gobgpapi.PeerState info = 11;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 11;
  const ::gobgpapi::PeerState& info() const;
  ::gobgpapi::PeerState* mutable_info();
  ::gobgpapi::PeerState* release_info();
  void set_allocated_info(::gobgpapi::PeerState* info);

  // optional .gobgpapi.Timers timers = 12;
  bool has_timers() const;
  void clear_timers();
  static const int kTimersFieldNumber = 12;
  const ::gobgpapi::Timers& timers() const;
  ::gobgpapi::Timers* mutable_timers();
  ::gobgpapi::Timers* release_timers();
  void set_allocated_timers(::gobgpapi::Timers* timers);

  // optional .gobgpapi.Transport transport = 13;
  bool has_transport() const;
  void clear_transport();
  static const int kTransportFieldNumber = 13;
  const ::gobgpapi::Transport& transport() const;
  ::gobgpapi::Transport* mutable_transport();
  ::gobgpapi::Transport* release_transport();
  void set_allocated_transport(::gobgpapi::Transport* transport);

  // optional .gobgpapi.RouteServer route_server = 15;
  bool has_route_server() const;
  void clear_route_server();
  static const int kRouteServerFieldNumber = 15;
  const ::gobgpapi::RouteServer& route_server() const;
  ::gobgpapi::RouteServer* mutable_route_server();
  ::gobgpapi::RouteServer* release_route_server();
  void set_allocated_route_server(::gobgpapi::RouteServer* route_server);

  // @@protoc_insertion_point(class_scope:gobgpapi.Peer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > families_;
  mutable int _families_cached_byte_size_;
  ::gobgpapi::ApplyPolicy* apply_policy_;
  ::gobgpapi::PeerConf* conf_;
  ::gobgpapi::EbgpMultihop* ebgp_multihop_;
  ::gobgpapi::RouteReflector* route_reflector_;
  ::gobgpapi::PeerState* info_;
  ::gobgpapi::Timers* timers_;
  ::gobgpapi::Transport* transport_;
  ::gobgpapi::RouteServer* route_server_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static Peer* default_instance_;
};
// -------------------------------------------------------------------

class ApplyPolicy : public ::google::protobuf::Message {
 public:
  ApplyPolicy();
  virtual ~ApplyPolicy();

  ApplyPolicy(const ApplyPolicy& from);

  inline ApplyPolicy& operator=(const ApplyPolicy& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplyPolicy& default_instance();

  void Swap(ApplyPolicy* other);

  // implements Message ----------------------------------------------

  inline ApplyPolicy* New() const { return New(NULL); }

  ApplyPolicy* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApplyPolicy& from);
  void MergeFrom(const ApplyPolicy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ApplyPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.PolicyAssignment in_policy = 1;
  bool has_in_policy() const;
  void clear_in_policy();
  static const int kInPolicyFieldNumber = 1;
  const ::gobgpapi::PolicyAssignment& in_policy() const;
  ::gobgpapi::PolicyAssignment* mutable_in_policy();
  ::gobgpapi::PolicyAssignment* release_in_policy();
  void set_allocated_in_policy(::gobgpapi::PolicyAssignment* in_policy);

  // optional .gobgpapi.PolicyAssignment export_policy = 2;
  bool has_export_policy() const;
  void clear_export_policy();
  static const int kExportPolicyFieldNumber = 2;
  const ::gobgpapi::PolicyAssignment& export_policy() const;
  ::gobgpapi::PolicyAssignment* mutable_export_policy();
  ::gobgpapi::PolicyAssignment* release_export_policy();
  void set_allocated_export_policy(::gobgpapi::PolicyAssignment* export_policy);

  // optional .gobgpapi.PolicyAssignment import_policy = 3;
  bool has_import_policy() const;
  void clear_import_policy();
  static const int kImportPolicyFieldNumber = 3;
  const ::gobgpapi::PolicyAssignment& import_policy() const;
  ::gobgpapi::PolicyAssignment* mutable_import_policy();
  ::gobgpapi::PolicyAssignment* release_import_policy();
  void set_allocated_import_policy(::gobgpapi::PolicyAssignment* import_policy);

  // @@protoc_insertion_point(class_scope:gobgpapi.ApplyPolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::gobgpapi::PolicyAssignment* in_policy_;
  ::gobgpapi::PolicyAssignment* export_policy_;
  ::gobgpapi::PolicyAssignment* import_policy_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static ApplyPolicy* default_instance_;
};
// -------------------------------------------------------------------

class PeerConf : public ::google::protobuf::Message {
 public:
  PeerConf();
  virtual ~PeerConf();

  PeerConf(const PeerConf& from);

  inline PeerConf& operator=(const PeerConf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerConf& default_instance();

  void Swap(PeerConf* other);

  // implements Message ----------------------------------------------

  inline PeerConf* New() const { return New(NULL); }

  PeerConf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeerConf& from);
  void MergeFrom(const PeerConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeerConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string auth_password = 1;
  void clear_auth_password();
  static const int kAuthPasswordFieldNumber = 1;
  const ::std::string& auth_password() const;
  void set_auth_password(const ::std::string& value);
  void set_auth_password(const char* value);
  void set_auth_password(const char* value, size_t size);
  ::std::string* mutable_auth_password();
  ::std::string* release_auth_password();
  void set_allocated_auth_password(::std::string* auth_password);

  // optional string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional uint32 local_as = 3;
  void clear_local_as();
  static const int kLocalAsFieldNumber = 3;
  ::google::protobuf::uint32 local_as() const;
  void set_local_as(::google::protobuf::uint32 value);

  // optional string neighbor_address = 4;
  void clear_neighbor_address();
  static const int kNeighborAddressFieldNumber = 4;
  const ::std::string& neighbor_address() const;
  void set_neighbor_address(const ::std::string& value);
  void set_neighbor_address(const char* value);
  void set_neighbor_address(const char* value, size_t size);
  ::std::string* mutable_neighbor_address();
  ::std::string* release_neighbor_address();
  void set_allocated_neighbor_address(::std::string* neighbor_address);

  // optional uint32 peer_as = 5;
  void clear_peer_as();
  static const int kPeerAsFieldNumber = 5;
  ::google::protobuf::uint32 peer_as() const;
  void set_peer_as(::google::protobuf::uint32 value);

  // optional string peer_group = 6;
  void clear_peer_group();
  static const int kPeerGroupFieldNumber = 6;
  const ::std::string& peer_group() const;
  void set_peer_group(const ::std::string& value);
  void set_peer_group(const char* value);
  void set_peer_group(const char* value, size_t size);
  ::std::string* mutable_peer_group();
  ::std::string* release_peer_group();
  void set_allocated_peer_group(::std::string* peer_group);

  // optional uint32 peer_type = 7;
  void clear_peer_type();
  static const int kPeerTypeFieldNumber = 7;
  ::google::protobuf::uint32 peer_type() const;
  void set_peer_type(::google::protobuf::uint32 value);

  // optional uint32 remove_private_as = 8;
  void clear_remove_private_as();
  static const int kRemovePrivateAsFieldNumber = 8;
  ::google::protobuf::uint32 remove_private_as() const;
  void set_remove_private_as(::google::protobuf::uint32 value);

  // optional bool route_flap_damping = 9;
  void clear_route_flap_damping();
  static const int kRouteFlapDampingFieldNumber = 9;
  bool route_flap_damping() const;
  void set_route_flap_damping(bool value);

  // optional uint32 send_community = 10;
  void clear_send_community();
  static const int kSendCommunityFieldNumber = 10;
  ::google::protobuf::uint32 send_community() const;
  void set_send_community(::google::protobuf::uint32 value);

  // repeated bytes remote_cap = 11;
  int remote_cap_size() const;
  void clear_remote_cap();
  static const int kRemoteCapFieldNumber = 11;
  const ::std::string& remote_cap(int index) const;
  ::std::string* mutable_remote_cap(int index);
  void set_remote_cap(int index, const ::std::string& value);
  void set_remote_cap(int index, const char* value);
  void set_remote_cap(int index, const void* value, size_t size);
  ::std::string* add_remote_cap();
  void add_remote_cap(const ::std::string& value);
  void add_remote_cap(const char* value);
  void add_remote_cap(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& remote_cap() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_remote_cap();

  // repeated bytes local_cap = 12;
  int local_cap_size() const;
  void clear_local_cap();
  static const int kLocalCapFieldNumber = 12;
  const ::std::string& local_cap(int index) const;
  ::std::string* mutable_local_cap(int index);
  void set_local_cap(int index, const ::std::string& value);
  void set_local_cap(int index, const char* value);
  void set_local_cap(int index, const void* value, size_t size);
  ::std::string* add_local_cap();
  void add_local_cap(const ::std::string& value);
  void add_local_cap(const char* value);
  void add_local_cap(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& local_cap() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_local_cap();

  // optional string id = 13;
  void clear_id();
  static const int kIdFieldNumber = 13;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:gobgpapi.PeerConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr auth_password_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr neighbor_address_;
  ::google::protobuf::uint32 local_as_;
  ::google::protobuf::uint32 peer_as_;
  ::google::protobuf::internal::ArenaStringPtr peer_group_;
  ::google::protobuf::uint32 peer_type_;
  ::google::protobuf::uint32 remove_private_as_;
  bool route_flap_damping_;
  ::google::protobuf::uint32 send_community_;
  ::google::protobuf::RepeatedPtrField< ::std::string> remote_cap_;
  ::google::protobuf::RepeatedPtrField< ::std::string> local_cap_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static PeerConf* default_instance_;
};
// -------------------------------------------------------------------

class EbgpMultihop : public ::google::protobuf::Message {
 public:
  EbgpMultihop();
  virtual ~EbgpMultihop();

  EbgpMultihop(const EbgpMultihop& from);

  inline EbgpMultihop& operator=(const EbgpMultihop& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EbgpMultihop& default_instance();

  void Swap(EbgpMultihop* other);

  // implements Message ----------------------------------------------

  inline EbgpMultihop* New() const { return New(NULL); }

  EbgpMultihop* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EbgpMultihop& from);
  void MergeFrom(const EbgpMultihop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EbgpMultihop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // optional uint32 multihop_ttl = 2;
  void clear_multihop_ttl();
  static const int kMultihopTtlFieldNumber = 2;
  ::google::protobuf::uint32 multihop_ttl() const;
  void set_multihop_ttl(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.EbgpMultihop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool enabled_;
  ::google::protobuf::uint32 multihop_ttl_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static EbgpMultihop* default_instance_;
};
// -------------------------------------------------------------------

class RouteReflector : public ::google::protobuf::Message {
 public:
  RouteReflector();
  virtual ~RouteReflector();

  RouteReflector(const RouteReflector& from);

  inline RouteReflector& operator=(const RouteReflector& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteReflector& default_instance();

  void Swap(RouteReflector* other);

  // implements Message ----------------------------------------------

  inline RouteReflector* New() const { return New(NULL); }

  RouteReflector* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RouteReflector& from);
  void MergeFrom(const RouteReflector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RouteReflector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool route_reflector_client = 1;
  void clear_route_reflector_client();
  static const int kRouteReflectorClientFieldNumber = 1;
  bool route_reflector_client() const;
  void set_route_reflector_client(bool value);

  // optional uint32 route_reflector_cluster_id = 2;
  void clear_route_reflector_cluster_id();
  static const int kRouteReflectorClusterIdFieldNumber = 2;
  ::google::protobuf::uint32 route_reflector_cluster_id() const;
  void set_route_reflector_cluster_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteReflector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool route_reflector_client_;
  ::google::protobuf::uint32 route_reflector_cluster_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static RouteReflector* default_instance_;
};
// -------------------------------------------------------------------

class PeerState : public ::google::protobuf::Message {
 public:
  PeerState();
  virtual ~PeerState();

  PeerState(const PeerState& from);

  inline PeerState& operator=(const PeerState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerState& default_instance();

  void Swap(PeerState* other);

  // implements Message ----------------------------------------------

  inline PeerState* New() const { return New(NULL); }

  PeerState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeerState& from);
  void MergeFrom(const PeerState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeerState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string auth_password = 1;
  void clear_auth_password();
  static const int kAuthPasswordFieldNumber = 1;
  const ::std::string& auth_password() const;
  void set_auth_password(const ::std::string& value);
  void set_auth_password(const char* value);
  void set_auth_password(const char* value, size_t size);
  ::std::string* mutable_auth_password();
  ::std::string* release_auth_password();
  void set_allocated_auth_password(::std::string* auth_password);

  // optional string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional uint32 local_as = 3;
  void clear_local_as();
  static const int kLocalAsFieldNumber = 3;
  ::google::protobuf::uint32 local_as() const;
  void set_local_as(::google::protobuf::uint32 value);

  // optional .gobgpapi.Messages messages = 4;
  bool has_messages() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 4;
  const ::gobgpapi::Messages& messages() const;
  ::gobgpapi::Messages* mutable_messages();
  ::gobgpapi::Messages* release_messages();
  void set_allocated_messages(::gobgpapi::Messages* messages);

  // optional string neighbor_address = 5;
  void clear_neighbor_address();
  static const int kNeighborAddressFieldNumber = 5;
  const ::std::string& neighbor_address() const;
  void set_neighbor_address(const ::std::string& value);
  void set_neighbor_address(const char* value);
  void set_neighbor_address(const char* value, size_t size);
  ::std::string* mutable_neighbor_address();
  ::std::string* release_neighbor_address();
  void set_allocated_neighbor_address(::std::string* neighbor_address);

  // optional uint32 peer_as = 6;
  void clear_peer_as();
  static const int kPeerAsFieldNumber = 6;
  ::google::protobuf::uint32 peer_as() const;
  void set_peer_as(::google::protobuf::uint32 value);

  // optional string peer_group = 7;
  void clear_peer_group();
  static const int kPeerGroupFieldNumber = 7;
  const ::std::string& peer_group() const;
  void set_peer_group(const ::std::string& value);
  void set_peer_group(const char* value);
  void set_peer_group(const char* value, size_t size);
  ::std::string* mutable_peer_group();
  ::std::string* release_peer_group();
  void set_allocated_peer_group(::std::string* peer_group);

  // optional uint32 peer_type = 8;
  void clear_peer_type();
  static const int kPeerTypeFieldNumber = 8;
  ::google::protobuf::uint32 peer_type() const;
  void set_peer_type(::google::protobuf::uint32 value);

  // optional .gobgpapi.Queues queues = 9;
  bool has_queues() const;
  void clear_queues();
  static const int kQueuesFieldNumber = 9;
  const ::gobgpapi::Queues& queues() const;
  ::gobgpapi::Queues* mutable_queues();
  ::gobgpapi::Queues* release_queues();
  void set_allocated_queues(::gobgpapi::Queues* queues);

  // optional uint32 remove_private_as = 10;
  void clear_remove_private_as();
  static const int kRemovePrivateAsFieldNumber = 10;
  ::google::protobuf::uint32 remove_private_as() const;
  void set_remove_private_as(::google::protobuf::uint32 value);

  // optional bool route_flap_damping = 11;
  void clear_route_flap_damping();
  static const int kRouteFlapDampingFieldNumber = 11;
  bool route_flap_damping() const;
  void set_route_flap_damping(bool value);

  // optional uint32 send_community = 12;
  void clear_send_community();
  static const int kSendCommunityFieldNumber = 12;
  ::google::protobuf::uint32 send_community() const;
  void set_send_community(::google::protobuf::uint32 value);

  // optional uint32 session_state = 13;
  void clear_session_state();
  static const int kSessionStateFieldNumber = 13;
  ::google::protobuf::uint32 session_state() const;
  void set_session_state(::google::protobuf::uint32 value);

  // repeated string supported_capabilities = 14;
  int supported_capabilities_size() const;
  void clear_supported_capabilities();
  static const int kSupportedCapabilitiesFieldNumber = 14;
  const ::std::string& supported_capabilities(int index) const;
  ::std::string* mutable_supported_capabilities(int index);
  void set_supported_capabilities(int index, const ::std::string& value);
  void set_supported_capabilities(int index, const char* value);
  void set_supported_capabilities(int index, const char* value, size_t size);
  ::std::string* add_supported_capabilities();
  void add_supported_capabilities(const ::std::string& value);
  void add_supported_capabilities(const char* value);
  void add_supported_capabilities(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& supported_capabilities() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_supported_capabilities();

  // optional string bgp_state = 15;
  void clear_bgp_state();
  static const int kBgpStateFieldNumber = 15;
  const ::std::string& bgp_state() const;
  void set_bgp_state(const ::std::string& value);
  void set_bgp_state(const char* value);
  void set_bgp_state(const char* value, size_t size);
  ::std::string* mutable_bgp_state();
  ::std::string* release_bgp_state();
  void set_allocated_bgp_state(::std::string* bgp_state);

  // optional string admin_state = 16;
  void clear_admin_state();
  static const int kAdminStateFieldNumber = 16;
  const ::std::string& admin_state() const;
  void set_admin_state(const ::std::string& value);
  void set_admin_state(const char* value);
  void set_admin_state(const char* value, size_t size);
  ::std::string* mutable_admin_state();
  ::std::string* release_admin_state();
  void set_allocated_admin_state(::std::string* admin_state);

  // optional uint32 received = 17;
  void clear_received();
  static const int kReceivedFieldNumber = 17;
  ::google::protobuf::uint32 received() const;
  void set_received(::google::protobuf::uint32 value);

  // optional uint32 accepted = 18;
  void clear_accepted();
  static const int kAcceptedFieldNumber = 18;
  ::google::protobuf::uint32 accepted() const;
  void set_accepted(::google::protobuf::uint32 value);

  // optional uint32 advertised = 19;
  void clear_advertised();
  static const int kAdvertisedFieldNumber = 19;
  ::google::protobuf::uint32 advertised() const;
  void set_advertised(::google::protobuf::uint32 value);

  // optional uint32 out_q = 20;
  void clear_out_q();
  static const int kOutQFieldNumber = 20;
  ::google::protobuf::uint32 out_q() const;
  void set_out_q(::google::protobuf::uint32 value);

  // optional uint32 flops = 21;
  void clear_flops();
  static const int kFlopsFieldNumber = 21;
  ::google::protobuf::uint32 flops() const;
  void set_flops(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.PeerState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr auth_password_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::gobgpapi::Messages* messages_;
  ::google::protobuf::uint32 local_as_;
  ::google::protobuf::uint32 peer_as_;
  ::google::protobuf::internal::ArenaStringPtr neighbor_address_;
  ::google::protobuf::internal::ArenaStringPtr peer_group_;
  ::gobgpapi::Queues* queues_;
  ::google::protobuf::uint32 peer_type_;
  ::google::protobuf::uint32 remove_private_as_;
  bool route_flap_damping_;
  ::google::protobuf::uint32 send_community_;
  ::google::protobuf::RepeatedPtrField< ::std::string> supported_capabilities_;
  ::google::protobuf::internal::ArenaStringPtr bgp_state_;
  ::google::protobuf::uint32 session_state_;
  ::google::protobuf::uint32 received_;
  ::google::protobuf::internal::ArenaStringPtr admin_state_;
  ::google::protobuf::uint32 accepted_;
  ::google::protobuf::uint32 advertised_;
  ::google::protobuf::uint32 out_q_;
  ::google::protobuf::uint32 flops_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static PeerState* default_instance_;
};
// -------------------------------------------------------------------

class Messages : public ::google::protobuf::Message {
 public:
  Messages();
  virtual ~Messages();

  Messages(const Messages& from);

  inline Messages& operator=(const Messages& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Messages& default_instance();

  void Swap(Messages* other);

  // implements Message ----------------------------------------------

  inline Messages* New() const { return New(NULL); }

  Messages* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Messages& from);
  void MergeFrom(const Messages& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Messages* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.Message received = 1;
  bool has_received() const;
  void clear_received();
  static const int kReceivedFieldNumber = 1;
  const ::gobgpapi::Message& received() const;
  ::gobgpapi::Message* mutable_received();
  ::gobgpapi::Message* release_received();
  void set_allocated_received(::gobgpapi::Message* received);

  // optional .gobgpapi.Message sent = 2;
  bool has_sent() const;
  void clear_sent();
  static const int kSentFieldNumber = 2;
  const ::gobgpapi::Message& sent() const;
  ::gobgpapi::Message* mutable_sent();
  ::gobgpapi::Message* release_sent();
  void set_allocated_sent(::gobgpapi::Message* sent);

  // @@protoc_insertion_point(class_scope:gobgpapi.Messages)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::gobgpapi::Message* received_;
  ::gobgpapi::Message* sent_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static Messages* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  inline Message* New() const { return New(NULL); }

  Message* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 NOTIFICATION = 1;
  void clear_notification();
  static const int kNOTIFICATIONFieldNumber = 1;
  ::google::protobuf::uint64 notification() const;
  void set_notification(::google::protobuf::uint64 value);

  // optional uint64 UPDATE = 2;
  void clear_update();
  static const int kUPDATEFieldNumber = 2;
  ::google::protobuf::uint64 update() const;
  void set_update(::google::protobuf::uint64 value);

  // optional uint64 OPEN = 3;
  void clear_open();
  static const int kOPENFieldNumber = 3;
  ::google::protobuf::uint64 open() const;
  void set_open(::google::protobuf::uint64 value);

  // optional uint64 KEEPALIVE = 4;
  void clear_keepalive();
  static const int kKEEPALIVEFieldNumber = 4;
  ::google::protobuf::uint64 keepalive() const;
  void set_keepalive(::google::protobuf::uint64 value);

  // optional uint64 REFRESH = 5;
  void clear_refresh();
  static const int kREFRESHFieldNumber = 5;
  ::google::protobuf::uint64 refresh() const;
  void set_refresh(::google::protobuf::uint64 value);

  // optional uint64 DISCARDED = 6;
  void clear_discarded();
  static const int kDISCARDEDFieldNumber = 6;
  ::google::protobuf::uint64 discarded() const;
  void set_discarded(::google::protobuf::uint64 value);

  // optional uint64 TOTAL = 7;
  void clear_total();
  static const int kTOTALFieldNumber = 7;
  ::google::protobuf::uint64 total() const;
  void set_total(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 notification_;
  ::google::protobuf::uint64 update_;
  ::google::protobuf::uint64 open_;
  ::google::protobuf::uint64 keepalive_;
  ::google::protobuf::uint64 refresh_;
  ::google::protobuf::uint64 discarded_;
  ::google::protobuf::uint64 total_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// -------------------------------------------------------------------

class Queues : public ::google::protobuf::Message {
 public:
  Queues();
  virtual ~Queues();

  Queues(const Queues& from);

  inline Queues& operator=(const Queues& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Queues& default_instance();

  void Swap(Queues* other);

  // implements Message ----------------------------------------------

  inline Queues* New() const { return New(NULL); }

  Queues* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Queues& from);
  void MergeFrom(const Queues& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Queues* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 input = 1;
  void clear_input();
  static const int kInputFieldNumber = 1;
  ::google::protobuf::uint32 input() const;
  void set_input(::google::protobuf::uint32 value);

  // optional uint32 output = 2;
  void clear_output();
  static const int kOutputFieldNumber = 2;
  ::google::protobuf::uint32 output() const;
  void set_output(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Queues)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 input_;
  ::google::protobuf::uint32 output_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static Queues* default_instance_;
};
// -------------------------------------------------------------------

class Timers : public ::google::protobuf::Message {
 public:
  Timers();
  virtual ~Timers();

  Timers(const Timers& from);

  inline Timers& operator=(const Timers& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Timers& default_instance();

  void Swap(Timers* other);

  // implements Message ----------------------------------------------

  inline Timers* New() const { return New(NULL); }

  Timers* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Timers& from);
  void MergeFrom(const Timers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Timers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.TimersConfig config = 1;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  const ::gobgpapi::TimersConfig& config() const;
  ::gobgpapi::TimersConfig* mutable_config();
  ::gobgpapi::TimersConfig* release_config();
  void set_allocated_config(::gobgpapi::TimersConfig* config);

  // optional .gobgpapi.TimersState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::gobgpapi::TimersState& state() const;
  ::gobgpapi::TimersState* mutable_state();
  ::gobgpapi::TimersState* release_state();
  void set_allocated_state(::gobgpapi::TimersState* state);

  // @@protoc_insertion_point(class_scope:gobgpapi.Timers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::gobgpapi::TimersConfig* config_;
  ::gobgpapi::TimersState* state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static Timers* default_instance_;
};
// -------------------------------------------------------------------

class TimersConfig : public ::google::protobuf::Message {
 public:
  TimersConfig();
  virtual ~TimersConfig();

  TimersConfig(const TimersConfig& from);

  inline TimersConfig& operator=(const TimersConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimersConfig& default_instance();

  void Swap(TimersConfig* other);

  // implements Message ----------------------------------------------

  inline TimersConfig* New() const { return New(NULL); }

  TimersConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimersConfig& from);
  void MergeFrom(const TimersConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TimersConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 connect_retry = 1;
  void clear_connect_retry();
  static const int kConnectRetryFieldNumber = 1;
  ::google::protobuf::uint64 connect_retry() const;
  void set_connect_retry(::google::protobuf::uint64 value);

  // optional uint64 hold_time = 2;
  void clear_hold_time();
  static const int kHoldTimeFieldNumber = 2;
  ::google::protobuf::uint64 hold_time() const;
  void set_hold_time(::google::protobuf::uint64 value);

  // optional uint64 keepalive_interval = 3;
  void clear_keepalive_interval();
  static const int kKeepaliveIntervalFieldNumber = 3;
  ::google::protobuf::uint64 keepalive_interval() const;
  void set_keepalive_interval(::google::protobuf::uint64 value);

  // optional uint64 minimum_advertisement_interval = 4;
  void clear_minimum_advertisement_interval();
  static const int kMinimumAdvertisementIntervalFieldNumber = 4;
  ::google::protobuf::uint64 minimum_advertisement_interval() const;
  void set_minimum_advertisement_interval(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.TimersConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 connect_retry_;
  ::google::protobuf::uint64 hold_time_;
  ::google::protobuf::uint64 keepalive_interval_;
  ::google::protobuf::uint64 minimum_advertisement_interval_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static TimersConfig* default_instance_;
};
// -------------------------------------------------------------------

class TimersState : public ::google::protobuf::Message {
 public:
  TimersState();
  virtual ~TimersState();

  TimersState(const TimersState& from);

  inline TimersState& operator=(const TimersState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimersState& default_instance();

  void Swap(TimersState* other);

  // implements Message ----------------------------------------------

  inline TimersState* New() const { return New(NULL); }

  TimersState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimersState& from);
  void MergeFrom(const TimersState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TimersState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 connect_retry = 1;
  void clear_connect_retry();
  static const int kConnectRetryFieldNumber = 1;
  ::google::protobuf::uint64 connect_retry() const;
  void set_connect_retry(::google::protobuf::uint64 value);

  // optional uint64 hold_time = 2;
  void clear_hold_time();
  static const int kHoldTimeFieldNumber = 2;
  ::google::protobuf::uint64 hold_time() const;
  void set_hold_time(::google::protobuf::uint64 value);

  // optional uint64 keepalive_interval = 3;
  void clear_keepalive_interval();
  static const int kKeepaliveIntervalFieldNumber = 3;
  ::google::protobuf::uint64 keepalive_interval() const;
  void set_keepalive_interval(::google::protobuf::uint64 value);

  // optional uint64 minimum_advertisement_interval = 4;
  void clear_minimum_advertisement_interval();
  static const int kMinimumAdvertisementIntervalFieldNumber = 4;
  ::google::protobuf::uint64 minimum_advertisement_interval() const;
  void set_minimum_advertisement_interval(::google::protobuf::uint64 value);

  // optional uint64 negotiated_hold_time = 5;
  void clear_negotiated_hold_time();
  static const int kNegotiatedHoldTimeFieldNumber = 5;
  ::google::protobuf::uint64 negotiated_hold_time() const;
  void set_negotiated_hold_time(::google::protobuf::uint64 value);

  // optional uint64 uptime = 6;
  void clear_uptime();
  static const int kUptimeFieldNumber = 6;
  ::google::protobuf::uint64 uptime() const;
  void set_uptime(::google::protobuf::uint64 value);

  // optional uint64 downtime = 7;
  void clear_downtime();
  static const int kDowntimeFieldNumber = 7;
  ::google::protobuf::uint64 downtime() const;
  void set_downtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.TimersState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 connect_retry_;
  ::google::protobuf::uint64 hold_time_;
  ::google::protobuf::uint64 keepalive_interval_;
  ::google::protobuf::uint64 minimum_advertisement_interval_;
  ::google::protobuf::uint64 negotiated_hold_time_;
  ::google::protobuf::uint64 uptime_;
  ::google::protobuf::uint64 downtime_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static TimersState* default_instance_;
};
// -------------------------------------------------------------------

class Transport : public ::google::protobuf::Message {
 public:
  Transport();
  virtual ~Transport();

  Transport(const Transport& from);

  inline Transport& operator=(const Transport& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport& default_instance();

  void Swap(Transport* other);

  // implements Message ----------------------------------------------

  inline Transport* New() const { return New(NULL); }

  Transport* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transport& from);
  void MergeFrom(const Transport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string local_address = 1;
  void clear_local_address();
  static const int kLocalAddressFieldNumber = 1;
  const ::std::string& local_address() const;
  void set_local_address(const ::std::string& value);
  void set_local_address(const char* value);
  void set_local_address(const char* value, size_t size);
  ::std::string* mutable_local_address();
  ::std::string* release_local_address();
  void set_allocated_local_address(::std::string* local_address);

  // optional uint32 local_port = 2;
  void clear_local_port();
  static const int kLocalPortFieldNumber = 2;
  ::google::protobuf::uint32 local_port() const;
  void set_local_port(::google::protobuf::uint32 value);

  // optional bool mtu_discovery = 3;
  void clear_mtu_discovery();
  static const int kMtuDiscoveryFieldNumber = 3;
  bool mtu_discovery() const;
  void set_mtu_discovery(bool value);

  // optional bool passive_mode = 4;
  void clear_passive_mode();
  static const int kPassiveModeFieldNumber = 4;
  bool passive_mode() const;
  void set_passive_mode(bool value);

  // optional string remote_address = 5;
  void clear_remote_address();
  static const int kRemoteAddressFieldNumber = 5;
  const ::std::string& remote_address() const;
  void set_remote_address(const ::std::string& value);
  void set_remote_address(const char* value);
  void set_remote_address(const char* value, size_t size);
  ::std::string* mutable_remote_address();
  ::std::string* release_remote_address();
  void set_allocated_remote_address(::std::string* remote_address);

  // optional uint32 remote_port = 6;
  void clear_remote_port();
  static const int kRemotePortFieldNumber = 6;
  ::google::protobuf::uint32 remote_port() const;
  void set_remote_port(::google::protobuf::uint32 value);

  // optional uint32 tcp_mss = 7;
  void clear_tcp_mss();
  static const int kTcpMssFieldNumber = 7;
  ::google::protobuf::uint32 tcp_mss() const;
  void set_tcp_mss(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Transport)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr local_address_;
  ::google::protobuf::uint32 local_port_;
  bool mtu_discovery_;
  bool passive_mode_;
  ::google::protobuf::internal::ArenaStringPtr remote_address_;
  ::google::protobuf::uint32 remote_port_;
  ::google::protobuf::uint32 tcp_mss_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static Transport* default_instance_;
};
// -------------------------------------------------------------------

class RouteServer : public ::google::protobuf::Message {
 public:
  RouteServer();
  virtual ~RouteServer();

  RouteServer(const RouteServer& from);

  inline RouteServer& operator=(const RouteServer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteServer& default_instance();

  void Swap(RouteServer* other);

  // implements Message ----------------------------------------------

  inline RouteServer* New() const { return New(NULL); }

  RouteServer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RouteServer& from);
  void MergeFrom(const RouteServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RouteServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool route_server_client = 1;
  void clear_route_server_client();
  static const int kRouteServerClientFieldNumber = 1;
  bool route_server_client() const;
  void set_route_server_client(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.RouteServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool route_server_client_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static RouteServer* default_instance_;
};
// -------------------------------------------------------------------

class Prefix : public ::google::protobuf::Message {
 public:
  Prefix();
  virtual ~Prefix();

  Prefix(const Prefix& from);

  inline Prefix& operator=(const Prefix& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Prefix& default_instance();

  void Swap(Prefix* other);

  // implements Message ----------------------------------------------

  inline Prefix* New() const { return New(NULL); }

  Prefix* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Prefix& from);
  void MergeFrom(const Prefix& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Prefix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip_prefix = 1;
  void clear_ip_prefix();
  static const int kIpPrefixFieldNumber = 1;
  const ::std::string& ip_prefix() const;
  void set_ip_prefix(const ::std::string& value);
  void set_ip_prefix(const char* value);
  void set_ip_prefix(const char* value, size_t size);
  ::std::string* mutable_ip_prefix();
  ::std::string* release_ip_prefix();
  void set_allocated_ip_prefix(::std::string* ip_prefix);

  // optional uint32 mask_length_min = 2;
  void clear_mask_length_min();
  static const int kMaskLengthMinFieldNumber = 2;
  ::google::protobuf::uint32 mask_length_min() const;
  void set_mask_length_min(::google::protobuf::uint32 value);

  // optional uint32 mask_length_max = 3;
  void clear_mask_length_max();
  static const int kMaskLengthMaxFieldNumber = 3;
  ::google::protobuf::uint32 mask_length_max() const;
  void set_mask_length_max(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Prefix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr ip_prefix_;
  ::google::protobuf::uint32 mask_length_min_;
  ::google::protobuf::uint32 mask_length_max_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static Prefix* default_instance_;
};
// -------------------------------------------------------------------

class DefinedSet : public ::google::protobuf::Message {
 public:
  DefinedSet();
  virtual ~DefinedSet();

  DefinedSet(const DefinedSet& from);

  inline DefinedSet& operator=(const DefinedSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DefinedSet& default_instance();

  void Swap(DefinedSet* other);

  // implements Message ----------------------------------------------

  inline DefinedSet* New() const { return New(NULL); }

  DefinedSet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DefinedSet& from);
  void MergeFrom(const DefinedSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DefinedSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.DefinedType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gobgpapi::DefinedType type() const;
  void set_type(::gobgpapi::DefinedType value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated string list = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  const ::std::string& list(int index) const;
  ::std::string* mutable_list(int index);
  void set_list(int index, const ::std::string& value);
  void set_list(int index, const char* value);
  void set_list(int index, const char* value, size_t size);
  ::std::string* add_list();
  void add_list(const ::std::string& value);
  void add_list(const char* value);
  void add_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_list();

  // repeated .gobgpapi.Prefix prefixes = 4;
  int prefixes_size() const;
  void clear_prefixes();
  static const int kPrefixesFieldNumber = 4;
  const ::gobgpapi::Prefix& prefixes(int index) const;
  ::gobgpapi::Prefix* mutable_prefixes(int index);
  ::gobgpapi::Prefix* add_prefixes();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Prefix >*
      mutable_prefixes();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Prefix >&
      prefixes() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.DefinedSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> list_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Prefix > prefixes_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static DefinedSet* default_instance_;
};
// -------------------------------------------------------------------

class MatchSet : public ::google::protobuf::Message {
 public:
  MatchSet();
  virtual ~MatchSet();

  MatchSet(const MatchSet& from);

  inline MatchSet& operator=(const MatchSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchSet& default_instance();

  void Swap(MatchSet* other);

  // implements Message ----------------------------------------------

  inline MatchSet* New() const { return New(NULL); }

  MatchSet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchSet& from);
  void MergeFrom(const MatchSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatchSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.MatchType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gobgpapi::MatchType type() const;
  void set_type(::gobgpapi::MatchType value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:gobgpapi.MatchSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static MatchSet* default_instance_;
};
// -------------------------------------------------------------------

class AsPathLength : public ::google::protobuf::Message {
 public:
  AsPathLength();
  virtual ~AsPathLength();

  AsPathLength(const AsPathLength& from);

  inline AsPathLength& operator=(const AsPathLength& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AsPathLength& default_instance();

  void Swap(AsPathLength* other);

  // implements Message ----------------------------------------------

  inline AsPathLength* New() const { return New(NULL); }

  AsPathLength* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AsPathLength& from);
  void MergeFrom(const AsPathLength& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AsPathLength* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.AsPathLengthType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gobgpapi::AsPathLengthType type() const;
  void set_type(::gobgpapi::AsPathLengthType value);

  // optional uint32 length = 2;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  ::google::protobuf::uint32 length() const;
  void set_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.AsPathLength)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int type_;
  ::google::protobuf::uint32 length_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static AsPathLength* default_instance_;
};
// -------------------------------------------------------------------

class Conditions : public ::google::protobuf::Message {
 public:
  Conditions();
  virtual ~Conditions();

  Conditions(const Conditions& from);

  inline Conditions& operator=(const Conditions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Conditions& default_instance();

  void Swap(Conditions* other);

  // implements Message ----------------------------------------------

  inline Conditions* New() const { return New(NULL); }

  Conditions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Conditions& from);
  void MergeFrom(const Conditions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Conditions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.MatchSet prefix_set = 1;
  bool has_prefix_set() const;
  void clear_prefix_set();
  static const int kPrefixSetFieldNumber = 1;
  const ::gobgpapi::MatchSet& prefix_set() const;
  ::gobgpapi::MatchSet* mutable_prefix_set();
  ::gobgpapi::MatchSet* release_prefix_set();
  void set_allocated_prefix_set(::gobgpapi::MatchSet* prefix_set);

  // optional .gobgpapi.MatchSet neighbor_set = 2;
  bool has_neighbor_set() const;
  void clear_neighbor_set();
  static const int kNeighborSetFieldNumber = 2;
  const ::gobgpapi::MatchSet& neighbor_set() const;
  ::gobgpapi::MatchSet* mutable_neighbor_set();
  ::gobgpapi::MatchSet* release_neighbor_set();
  void set_allocated_neighbor_set(::gobgpapi::MatchSet* neighbor_set);

  // optional .gobgpapi.AsPathLength as_path_length = 3;
  bool has_as_path_length() const;
  void clear_as_path_length();
  static const int kAsPathLengthFieldNumber = 3;
  const ::gobgpapi::AsPathLength& as_path_length() const;
  ::gobgpapi::AsPathLength* mutable_as_path_length();
  ::gobgpapi::AsPathLength* release_as_path_length();
  void set_allocated_as_path_length(::gobgpapi::AsPathLength* as_path_length);

  // optional .gobgpapi.MatchSet as_path_set = 4;
  bool has_as_path_set() const;
  void clear_as_path_set();
  static const int kAsPathSetFieldNumber = 4;
  const ::gobgpapi::MatchSet& as_path_set() const;
  ::gobgpapi::MatchSet* mutable_as_path_set();
  ::gobgpapi::MatchSet* release_as_path_set();
  void set_allocated_as_path_set(::gobgpapi::MatchSet* as_path_set);

  // optional .gobgpapi.MatchSet community_set = 5;
  bool has_community_set() const;
  void clear_community_set();
  static const int kCommunitySetFieldNumber = 5;
  const ::gobgpapi::MatchSet& community_set() const;
  ::gobgpapi::MatchSet* mutable_community_set();
  ::gobgpapi::MatchSet* release_community_set();
  void set_allocated_community_set(::gobgpapi::MatchSet* community_set);

  // optional .gobgpapi.MatchSet ext_community_set = 6;
  bool has_ext_community_set() const;
  void clear_ext_community_set();
  static const int kExtCommunitySetFieldNumber = 6;
  const ::gobgpapi::MatchSet& ext_community_set() const;
  ::gobgpapi::MatchSet* mutable_ext_community_set();
  ::gobgpapi::MatchSet* release_ext_community_set();
  void set_allocated_ext_community_set(::gobgpapi::MatchSet* ext_community_set);

  // optional int32 rpki_result = 7;
  void clear_rpki_result();
  static const int kRpkiResultFieldNumber = 7;
  ::google::protobuf::int32 rpki_result() const;
  void set_rpki_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Conditions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::gobgpapi::MatchSet* prefix_set_;
  ::gobgpapi::MatchSet* neighbor_set_;
  ::gobgpapi::AsPathLength* as_path_length_;
  ::gobgpapi::MatchSet* as_path_set_;
  ::gobgpapi::MatchSet* community_set_;
  ::gobgpapi::MatchSet* ext_community_set_;
  ::google::protobuf::int32 rpki_result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static Conditions* default_instance_;
};
// -------------------------------------------------------------------

class CommunityAction : public ::google::protobuf::Message {
 public:
  CommunityAction();
  virtual ~CommunityAction();

  CommunityAction(const CommunityAction& from);

  inline CommunityAction& operator=(const CommunityAction& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommunityAction& default_instance();

  void Swap(CommunityAction* other);

  // implements Message ----------------------------------------------

  inline CommunityAction* New() const { return New(NULL); }

  CommunityAction* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommunityAction& from);
  void MergeFrom(const CommunityAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommunityAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.CommunityActionType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gobgpapi::CommunityActionType type() const;
  void set_type(::gobgpapi::CommunityActionType value);

  // repeated string communities = 2;
  int communities_size() const;
  void clear_communities();
  static const int kCommunitiesFieldNumber = 2;
  const ::std::string& communities(int index) const;
  ::std::string* mutable_communities(int index);
  void set_communities(int index, const ::std::string& value);
  void set_communities(int index, const char* value);
  void set_communities(int index, const char* value, size_t size);
  ::std::string* add_communities();
  void add_communities(const ::std::string& value);
  void add_communities(const char* value);
  void add_communities(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& communities() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_communities();

  // @@protoc_insertion_point(class_scope:gobgpapi.CommunityAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> communities_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static CommunityAction* default_instance_;
};
// -------------------------------------------------------------------

class MedAction : public ::google::protobuf::Message {
 public:
  MedAction();
  virtual ~MedAction();

  MedAction(const MedAction& from);

  inline MedAction& operator=(const MedAction& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MedAction& default_instance();

  void Swap(MedAction* other);

  // implements Message ----------------------------------------------

  inline MedAction* New() const { return New(NULL); }

  MedAction* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MedAction& from);
  void MergeFrom(const MedAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MedAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.MedActionType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gobgpapi::MedActionType type() const;
  void set_type(::gobgpapi::MedActionType value);

  // optional int64 value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int64 value() const;
  void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.MedAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 value_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static MedAction* default_instance_;
};
// -------------------------------------------------------------------

class AsPrependAction : public ::google::protobuf::Message {
 public:
  AsPrependAction();
  virtual ~AsPrependAction();

  AsPrependAction(const AsPrependAction& from);

  inline AsPrependAction& operator=(const AsPrependAction& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AsPrependAction& default_instance();

  void Swap(AsPrependAction* other);

  // implements Message ----------------------------------------------

  inline AsPrependAction* New() const { return New(NULL); }

  AsPrependAction* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AsPrependAction& from);
  void MergeFrom(const AsPrependAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AsPrependAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 asn = 1;
  void clear_asn();
  static const int kAsnFieldNumber = 1;
  ::google::protobuf::uint32 asn() const;
  void set_asn(::google::protobuf::uint32 value);

  // optional uint32 repeat = 2;
  void clear_repeat();
  static const int kRepeatFieldNumber = 2;
  ::google::protobuf::uint32 repeat() const;
  void set_repeat(::google::protobuf::uint32 value);

  // optional bool use_left_most = 3;
  void clear_use_left_most();
  static const int kUseLeftMostFieldNumber = 3;
  bool use_left_most() const;
  void set_use_left_most(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.AsPrependAction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 asn_;
  ::google::protobuf::uint32 repeat_;
  bool use_left_most_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static AsPrependAction* default_instance_;
};
// -------------------------------------------------------------------

class Actions : public ::google::protobuf::Message {
 public:
  Actions();
  virtual ~Actions();

  Actions(const Actions& from);

  inline Actions& operator=(const Actions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Actions& default_instance();

  void Swap(Actions* other);

  // implements Message ----------------------------------------------

  inline Actions* New() const { return New(NULL); }

  Actions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Actions& from);
  void MergeFrom(const Actions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Actions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.RouteAction route_action = 1;
  void clear_route_action();
  static const int kRouteActionFieldNumber = 1;
  ::gobgpapi::RouteAction route_action() const;
  void set_route_action(::gobgpapi::RouteAction value);

  // optional .gobgpapi.CommunityAction community = 2;
  bool has_community() const;
  void clear_community();
  static const int kCommunityFieldNumber = 2;
  const ::gobgpapi::CommunityAction& community() const;
  ::gobgpapi::CommunityAction* mutable_community();
  ::gobgpapi::CommunityAction* release_community();
  void set_allocated_community(::gobgpapi::CommunityAction* community);

  // optional .gobgpapi.MedAction med = 3;
  bool has_med() const;
  void clear_med();
  static const int kMedFieldNumber = 3;
  const ::gobgpapi::MedAction& med() const;
  ::gobgpapi::MedAction* mutable_med();
  ::gobgpapi::MedAction* release_med();
  void set_allocated_med(::gobgpapi::MedAction* med);

  // optional .gobgpapi.AsPrependAction as_prepend = 4;
  bool has_as_prepend() const;
  void clear_as_prepend();
  static const int kAsPrependFieldNumber = 4;
  const ::gobgpapi::AsPrependAction& as_prepend() const;
  ::gobgpapi::AsPrependAction* mutable_as_prepend();
  ::gobgpapi::AsPrependAction* release_as_prepend();
  void set_allocated_as_prepend(::gobgpapi::AsPrependAction* as_prepend);

  // optional .gobgpapi.CommunityAction ext_community = 5;
  bool has_ext_community() const;
  void clear_ext_community();
  static const int kExtCommunityFieldNumber = 5;
  const ::gobgpapi::CommunityAction& ext_community() const;
  ::gobgpapi::CommunityAction* mutable_ext_community();
  ::gobgpapi::CommunityAction* release_ext_community();
  void set_allocated_ext_community(::gobgpapi::CommunityAction* ext_community);

  // @@protoc_insertion_point(class_scope:gobgpapi.Actions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::gobgpapi::CommunityAction* community_;
  ::gobgpapi::MedAction* med_;
  ::gobgpapi::AsPrependAction* as_prepend_;
  ::gobgpapi::CommunityAction* ext_community_;
  int route_action_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static Actions* default_instance_;
};
// -------------------------------------------------------------------

class Statement : public ::google::protobuf::Message {
 public:
  Statement();
  virtual ~Statement();

  Statement(const Statement& from);

  inline Statement& operator=(const Statement& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Statement& default_instance();

  void Swap(Statement* other);

  // implements Message ----------------------------------------------

  inline Statement* New() const { return New(NULL); }

  Statement* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Statement& from);
  void MergeFrom(const Statement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Statement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .gobgpapi.Conditions conditions = 2;
  bool has_conditions() const;
  void clear_conditions();
  static const int kConditionsFieldNumber = 2;
  const ::gobgpapi::Conditions& conditions() const;
  ::gobgpapi::Conditions* mutable_conditions();
  ::gobgpapi::Conditions* release_conditions();
  void set_allocated_conditions(::gobgpapi::Conditions* conditions);

  // optional .gobgpapi.Actions actions = 3;
  bool has_actions() const;
  void clear_actions();
  static const int kActionsFieldNumber = 3;
  const ::gobgpapi::Actions& actions() const;
  ::gobgpapi::Actions* mutable_actions();
  ::gobgpapi::Actions* release_actions();
  void set_allocated_actions(::gobgpapi::Actions* actions);

  // @@protoc_insertion_point(class_scope:gobgpapi.Statement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::gobgpapi::Conditions* conditions_;
  ::gobgpapi::Actions* actions_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static Statement* default_instance_;
};
// -------------------------------------------------------------------

class Policy : public ::google::protobuf::Message {
 public:
  Policy();
  virtual ~Policy();

  Policy(const Policy& from);

  inline Policy& operator=(const Policy& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Policy& default_instance();

  void Swap(Policy* other);

  // implements Message ----------------------------------------------

  inline Policy* New() const { return New(NULL); }

  Policy* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Policy& from);
  void MergeFrom(const Policy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Policy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .gobgpapi.Statement statements = 2;
  int statements_size() const;
  void clear_statements();
  static const int kStatementsFieldNumber = 2;
  const ::gobgpapi::Statement& statements(int index) const;
  ::gobgpapi::Statement* mutable_statements(int index);
  ::gobgpapi::Statement* add_statements();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Statement >*
      mutable_statements();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Statement >&
      statements() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.Policy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Statement > statements_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static Policy* default_instance_;
};
// -------------------------------------------------------------------

class PolicyAssignment : public ::google::protobuf::Message {
 public:
  PolicyAssignment();
  virtual ~PolicyAssignment();

  PolicyAssignment(const PolicyAssignment& from);

  inline PolicyAssignment& operator=(const PolicyAssignment& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PolicyAssignment& default_instance();

  void Swap(PolicyAssignment* other);

  // implements Message ----------------------------------------------

  inline PolicyAssignment* New() const { return New(NULL); }

  PolicyAssignment* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PolicyAssignment& from);
  void MergeFrom(const PolicyAssignment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PolicyAssignment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.PolicyType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::gobgpapi::PolicyType type() const;
  void set_type(::gobgpapi::PolicyType value);

  // optional .gobgpapi.Resource resource = 2;
  void clear_resource();
  static const int kResourceFieldNumber = 2;
  ::gobgpapi::Resource resource() const;
  void set_resource(::gobgpapi::Resource value);

  // optional string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .gobgpapi.Policy policies = 4;
  int policies_size() const;
  void clear_policies();
  static const int kPoliciesFieldNumber = 4;
  const ::gobgpapi::Policy& policies(int index) const;
  ::gobgpapi::Policy* mutable_policies(int index);
  ::gobgpapi::Policy* add_policies();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Policy >*
      mutable_policies();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Policy >&
      policies() const;

  // optional .gobgpapi.RouteAction default = 5;
  void clear_default_();
  static const int kDefaultFieldNumber = 5;
  ::gobgpapi::RouteAction default_() const;
  void set_default_(::gobgpapi::RouteAction value);

  // @@protoc_insertion_point(class_scope:gobgpapi.PolicyAssignment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int type_;
  int resource_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::Policy > policies_;
  int default__;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static PolicyAssignment* default_instance_;
};
// -------------------------------------------------------------------

class MrtMessage : public ::google::protobuf::Message {
 public:
  MrtMessage();
  virtual ~MrtMessage();

  MrtMessage(const MrtMessage& from);

  inline MrtMessage& operator=(const MrtMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MrtMessage& default_instance();

  void Swap(MrtMessage* other);

  // implements Message ----------------------------------------------

  inline MrtMessage* New() const { return New(NULL); }

  MrtMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MrtMessage& from);
  void MergeFrom(const MrtMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MrtMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:gobgpapi.MrtMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static MrtMessage* default_instance_;
};
// -------------------------------------------------------------------

class RPKIConf : public ::google::protobuf::Message {
 public:
  RPKIConf();
  virtual ~RPKIConf();

  RPKIConf(const RPKIConf& from);

  inline RPKIConf& operator=(const RPKIConf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RPKIConf& default_instance();

  void Swap(RPKIConf* other);

  // implements Message ----------------------------------------------

  inline RPKIConf* New() const { return New(NULL); }

  RPKIConf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RPKIConf& from);
  void MergeFrom(const RPKIConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RPKIConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional string remote_port = 2;
  void clear_remote_port();
  static const int kRemotePortFieldNumber = 2;
  const ::std::string& remote_port() const;
  void set_remote_port(const ::std::string& value);
  void set_remote_port(const char* value);
  void set_remote_port(const char* value, size_t size);
  ::std::string* mutable_remote_port();
  ::std::string* release_remote_port();
  void set_allocated_remote_port(::std::string* remote_port);

  // @@protoc_insertion_point(class_scope:gobgpapi.RPKIConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr remote_port_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static RPKIConf* default_instance_;
};
// -------------------------------------------------------------------

class RPKIState : public ::google::protobuf::Message {
 public:
  RPKIState();
  virtual ~RPKIState();

  RPKIState(const RPKIState& from);

  inline RPKIState& operator=(const RPKIState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RPKIState& default_instance();

  void Swap(RPKIState* other);

  // implements Message ----------------------------------------------

  inline RPKIState* New() const { return New(NULL); }

  RPKIState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RPKIState& from);
  void MergeFrom(const RPKIState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RPKIState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 uptime = 1;
  void clear_uptime();
  static const int kUptimeFieldNumber = 1;
  ::google::protobuf::int64 uptime() const;
  void set_uptime(::google::protobuf::int64 value);

  // optional int64 downtime = 2;
  void clear_downtime();
  static const int kDowntimeFieldNumber = 2;
  ::google::protobuf::int64 downtime() const;
  void set_downtime(::google::protobuf::int64 value);

  // optional bool up = 3;
  void clear_up();
  static const int kUpFieldNumber = 3;
  bool up() const;
  void set_up(bool value);

  // optional uint32 record_ipv4 = 4;
  void clear_record_ipv4();
  static const int kRecordIpv4FieldNumber = 4;
  ::google::protobuf::uint32 record_ipv4() const;
  void set_record_ipv4(::google::protobuf::uint32 value);

  // optional uint32 record_ipv6 = 5;
  void clear_record_ipv6();
  static const int kRecordIpv6FieldNumber = 5;
  ::google::protobuf::uint32 record_ipv6() const;
  void set_record_ipv6(::google::protobuf::uint32 value);

  // optional uint32 prefix_ipv4 = 6;
  void clear_prefix_ipv4();
  static const int kPrefixIpv4FieldNumber = 6;
  ::google::protobuf::uint32 prefix_ipv4() const;
  void set_prefix_ipv4(::google::protobuf::uint32 value);

  // optional uint32 prefix_ipv6 = 7;
  void clear_prefix_ipv6();
  static const int kPrefixIpv6FieldNumber = 7;
  ::google::protobuf::uint32 prefix_ipv6() const;
  void set_prefix_ipv6(::google::protobuf::uint32 value);

  // optional uint32 serial = 8;
  void clear_serial();
  static const int kSerialFieldNumber = 8;
  ::google::protobuf::uint32 serial() const;
  void set_serial(::google::protobuf::uint32 value);

  // optional int64 received_ipv4 = 9;
  void clear_received_ipv4();
  static const int kReceivedIpv4FieldNumber = 9;
  ::google::protobuf::int64 received_ipv4() const;
  void set_received_ipv4(::google::protobuf::int64 value);

  // optional int64 received_ipv6 = 10;
  void clear_received_ipv6();
  static const int kReceivedIpv6FieldNumber = 10;
  ::google::protobuf::int64 received_ipv6() const;
  void set_received_ipv6(::google::protobuf::int64 value);

  // optional int64 serial_notify = 11;
  void clear_serial_notify();
  static const int kSerialNotifyFieldNumber = 11;
  ::google::protobuf::int64 serial_notify() const;
  void set_serial_notify(::google::protobuf::int64 value);

  // optional int64 cache_reset = 12;
  void clear_cache_reset();
  static const int kCacheResetFieldNumber = 12;
  ::google::protobuf::int64 cache_reset() const;
  void set_cache_reset(::google::protobuf::int64 value);

  // optional int64 cache_response = 13;
  void clear_cache_response();
  static const int kCacheResponseFieldNumber = 13;
  ::google::protobuf::int64 cache_response() const;
  void set_cache_response(::google::protobuf::int64 value);

  // optional int64 end_of_data = 14;
  void clear_end_of_data();
  static const int kEndOfDataFieldNumber = 14;
  ::google::protobuf::int64 end_of_data() const;
  void set_end_of_data(::google::protobuf::int64 value);

  // optional int64 error = 15;
  void clear_error();
  static const int kErrorFieldNumber = 15;
  ::google::protobuf::int64 error() const;
  void set_error(::google::protobuf::int64 value);

  // optional int64 serial_query = 16;
  void clear_serial_query();
  static const int kSerialQueryFieldNumber = 16;
  ::google::protobuf::int64 serial_query() const;
  void set_serial_query(::google::protobuf::int64 value);

  // optional int64 reset_query = 17;
  void clear_reset_query();
  static const int kResetQueryFieldNumber = 17;
  ::google::protobuf::int64 reset_query() const;
  void set_reset_query(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:gobgpapi.RPKIState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 uptime_;
  ::google::protobuf::int64 downtime_;
  bool up_;
  ::google::protobuf::uint32 record_ipv4_;
  ::google::protobuf::uint32 record_ipv6_;
  ::google::protobuf::uint32 prefix_ipv4_;
  ::google::protobuf::uint32 prefix_ipv6_;
  ::google::protobuf::uint32 serial_;
  ::google::protobuf::int64 received_ipv4_;
  ::google::protobuf::int64 received_ipv6_;
  ::google::protobuf::int64 serial_notify_;
  ::google::protobuf::int64 cache_reset_;
  ::google::protobuf::int64 cache_response_;
  ::google::protobuf::int64 end_of_data_;
  ::google::protobuf::int64 error_;
  ::google::protobuf::int64 serial_query_;
  ::google::protobuf::int64 reset_query_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static RPKIState* default_instance_;
};
// -------------------------------------------------------------------

class RPKI : public ::google::protobuf::Message {
 public:
  RPKI();
  virtual ~RPKI();

  RPKI(const RPKI& from);

  inline RPKI& operator=(const RPKI& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RPKI& default_instance();

  void Swap(RPKI* other);

  // implements Message ----------------------------------------------

  inline RPKI* New() const { return New(NULL); }

  RPKI* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RPKI& from);
  void MergeFrom(const RPKI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RPKI* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gobgpapi.RPKIConf conf = 1;
  bool has_conf() const;
  void clear_conf();
  static const int kConfFieldNumber = 1;
  const ::gobgpapi::RPKIConf& conf() const;
  ::gobgpapi::RPKIConf* mutable_conf();
  ::gobgpapi::RPKIConf* release_conf();
  void set_allocated_conf(::gobgpapi::RPKIConf* conf);

  // optional .gobgpapi.RPKIState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::gobgpapi::RPKIState& state() const;
  ::gobgpapi::RPKIState* mutable_state();
  ::gobgpapi::RPKIState* release_state();
  void set_allocated_state(::gobgpapi::RPKIState* state);

  // @@protoc_insertion_point(class_scope:gobgpapi.RPKI)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::gobgpapi::RPKIConf* conf_;
  ::gobgpapi::RPKIState* state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static RPKI* default_instance_;
};
// -------------------------------------------------------------------

class ROA : public ::google::protobuf::Message {
 public:
  ROA();
  virtual ~ROA();

  ROA(const ROA& from);

  inline ROA& operator=(const ROA& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ROA& default_instance();

  void Swap(ROA* other);

  // implements Message ----------------------------------------------

  inline ROA* New() const { return New(NULL); }

  ROA* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ROA& from);
  void MergeFrom(const ROA& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ROA* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 as = 1;
  void clear_as();
  static const int kAsFieldNumber = 1;
  ::google::protobuf::uint32 as() const;
  void set_as(::google::protobuf::uint32 value);

  // optional uint32 prefixlen = 2;
  void clear_prefixlen();
  static const int kPrefixlenFieldNumber = 2;
  ::google::protobuf::uint32 prefixlen() const;
  void set_prefixlen(::google::protobuf::uint32 value);

  // optional uint32 maxlen = 3;
  void clear_maxlen();
  static const int kMaxlenFieldNumber = 3;
  ::google::protobuf::uint32 maxlen() const;
  void set_maxlen(::google::protobuf::uint32 value);

  // optional string prefix = 4;
  void clear_prefix();
  static const int kPrefixFieldNumber = 4;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // optional .gobgpapi.RPKIConf conf = 5;
  bool has_conf() const;
  void clear_conf();
  static const int kConfFieldNumber = 5;
  const ::gobgpapi::RPKIConf& conf() const;
  ::gobgpapi::RPKIConf* mutable_conf();
  ::gobgpapi::RPKIConf* release_conf();
  void set_allocated_conf(::gobgpapi::RPKIConf* conf);

  // @@protoc_insertion_point(class_scope:gobgpapi.ROA)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 as_;
  ::google::protobuf::uint32 prefixlen_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  ::gobgpapi::RPKIConf* conf_;
  ::google::protobuf::uint32 maxlen_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static ROA* default_instance_;
};
// -------------------------------------------------------------------

class ROAResult : public ::google::protobuf::Message {
 public:
  ROAResult();
  virtual ~ROAResult();

  ROAResult(const ROAResult& from);

  inline ROAResult& operator=(const ROAResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ROAResult& default_instance();

  void Swap(ROAResult* other);

  // implements Message ----------------------------------------------

  inline ROAResult* New() const { return New(NULL); }

  ROAResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ROAResult& from);
  void MergeFrom(const ROAResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ROAResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ROAResult_ValidationReason ValidationReason;
  static const ValidationReason UPDATE = ROAResult_ValidationReason_UPDATE;
  static const ValidationReason WITHDRAW = ROAResult_ValidationReason_WITHDRAW;
  static const ValidationReason PEER_DOWN = ROAResult_ValidationReason_PEER_DOWN;
  static const ValidationReason REVALIDATE = ROAResult_ValidationReason_REVALIDATE;
  static inline bool ValidationReason_IsValid(int value) {
    return ROAResult_ValidationReason_IsValid(value);
  }
  static const ValidationReason ValidationReason_MIN =
    ROAResult_ValidationReason_ValidationReason_MIN;
  static const ValidationReason ValidationReason_MAX =
    ROAResult_ValidationReason_ValidationReason_MAX;
  static const int ValidationReason_ARRAYSIZE =
    ROAResult_ValidationReason_ValidationReason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ValidationReason_descriptor() {
    return ROAResult_ValidationReason_descriptor();
  }
  static inline const ::std::string& ValidationReason_Name(ValidationReason value) {
    return ROAResult_ValidationReason_Name(value);
  }
  static inline bool ValidationReason_Parse(const ::std::string& name,
      ValidationReason* value) {
    return ROAResult_ValidationReason_Parse(name, value);
  }

  typedef ROAResult_ValidationResult ValidationResult;
  static const ValidationResult NONE = ROAResult_ValidationResult_NONE;
  static const ValidationResult NOT_FOUND = ROAResult_ValidationResult_NOT_FOUND;
  static const ValidationResult VALID = ROAResult_ValidationResult_VALID;
  static const ValidationResult INVALID = ROAResult_ValidationResult_INVALID;
  static inline bool ValidationResult_IsValid(int value) {
    return ROAResult_ValidationResult_IsValid(value);
  }
  static const ValidationResult ValidationResult_MIN =
    ROAResult_ValidationResult_ValidationResult_MIN;
  static const ValidationResult ValidationResult_MAX =
    ROAResult_ValidationResult_ValidationResult_MAX;
  static const int ValidationResult_ARRAYSIZE =
    ROAResult_ValidationResult_ValidationResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ValidationResult_descriptor() {
    return ROAResult_ValidationResult_descriptor();
  }
  static inline const ::std::string& ValidationResult_Name(ValidationResult value) {
    return ROAResult_ValidationResult_Name(value);
  }
  static inline bool ValidationResult_Parse(const ::std::string& name,
      ValidationResult* value) {
    return ROAResult_ValidationResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .gobgpapi.ROAResult.ValidationReason reason = 1;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  ::gobgpapi::ROAResult_ValidationReason reason() const;
  void set_reason(::gobgpapi::ROAResult_ValidationReason value);

  // optional string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional int64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional bytes aspath_attr = 4;
  void clear_aspath_attr();
  static const int kAspathAttrFieldNumber = 4;
  const ::std::string& aspath_attr() const;
  void set_aspath_attr(const ::std::string& value);
  void set_aspath_attr(const char* value);
  void set_aspath_attr(const void* value, size_t size);
  ::std::string* mutable_aspath_attr();
  ::std::string* release_aspath_attr();
  void set_allocated_aspath_attr(::std::string* aspath_attr);

  // optional uint32 origin_as = 5;
  void clear_origin_as();
  static const int kOriginAsFieldNumber = 5;
  ::google::protobuf::uint32 origin_as() const;
  void set_origin_as(::google::protobuf::uint32 value);

  // optional string prefix = 6;
  void clear_prefix();
  static const int kPrefixFieldNumber = 6;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // optional .gobgpapi.ROAResult.ValidationResult old_result = 7;
  void clear_old_result();
  static const int kOldResultFieldNumber = 7;
  ::gobgpapi::ROAResult_ValidationResult old_result() const;
  void set_old_result(::gobgpapi::ROAResult_ValidationResult value);

  // optional .gobgpapi.ROAResult.ValidationResult new_result = 8;
  void clear_new_result();
  static const int kNewResultFieldNumber = 8;
  ::gobgpapi::ROAResult_ValidationResult new_result() const;
  void set_new_result(::gobgpapi::ROAResult_ValidationResult value);

  // repeated .gobgpapi.ROA roas = 9;
  int roas_size() const;
  void clear_roas();
  static const int kRoasFieldNumber = 9;
  const ::gobgpapi::ROA& roas(int index) const;
  ::gobgpapi::ROA* mutable_roas(int index);
  ::gobgpapi::ROA* add_roas();
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::ROA >*
      mutable_roas();
  const ::google::protobuf::RepeatedPtrField< ::gobgpapi::ROA >&
      roas() const;

  // @@protoc_insertion_point(class_scope:gobgpapi.ROAResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::int64 timestamp_;
  int reason_;
  ::google::protobuf::uint32 origin_as_;
  ::google::protobuf::internal::ArenaStringPtr aspath_attr_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  int old_result_;
  int new_result_;
  ::google::protobuf::RepeatedPtrField< ::gobgpapi::ROA > roas_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static ROAResult* default_instance_;
};
// -------------------------------------------------------------------

class Vrf : public ::google::protobuf::Message {
 public:
  Vrf();
  virtual ~Vrf();

  Vrf(const Vrf& from);

  inline Vrf& operator=(const Vrf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vrf& default_instance();

  void Swap(Vrf* other);

  // implements Message ----------------------------------------------

  inline Vrf* New() const { return New(NULL); }

  Vrf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vrf& from);
  void MergeFrom(const Vrf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vrf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes rd = 2;
  void clear_rd();
  static const int kRdFieldNumber = 2;
  const ::std::string& rd() const;
  void set_rd(const ::std::string& value);
  void set_rd(const char* value);
  void set_rd(const void* value, size_t size);
  ::std::string* mutable_rd();
  ::std::string* release_rd();
  void set_allocated_rd(::std::string* rd);

  // repeated bytes import_rt = 3;
  int import_rt_size() const;
  void clear_import_rt();
  static const int kImportRtFieldNumber = 3;
  const ::std::string& import_rt(int index) const;
  ::std::string* mutable_import_rt(int index);
  void set_import_rt(int index, const ::std::string& value);
  void set_import_rt(int index, const char* value);
  void set_import_rt(int index, const void* value, size_t size);
  ::std::string* add_import_rt();
  void add_import_rt(const ::std::string& value);
  void add_import_rt(const char* value);
  void add_import_rt(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& import_rt() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_import_rt();

  // repeated bytes export_rt = 4;
  int export_rt_size() const;
  void clear_export_rt();
  static const int kExportRtFieldNumber = 4;
  const ::std::string& export_rt(int index) const;
  ::std::string* mutable_export_rt(int index);
  void set_export_rt(int index, const ::std::string& value);
  void set_export_rt(int index, const char* value);
  void set_export_rt(int index, const void* value, size_t size);
  ::std::string* add_export_rt();
  void add_export_rt(const ::std::string& value);
  void add_export_rt(const char* value);
  void add_export_rt(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& export_rt() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_export_rt();

  // @@protoc_insertion_point(class_scope:gobgpapi.Vrf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr rd_;
  ::google::protobuf::RepeatedPtrField< ::std::string> import_rt_;
  ::google::protobuf::RepeatedPtrField< ::std::string> export_rt_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static Vrf* default_instance_;
};
// -------------------------------------------------------------------

class Global : public ::google::protobuf::Message {
 public:
  Global();
  virtual ~Global();

  Global(const Global& from);

  inline Global& operator=(const Global& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Global& default_instance();

  void Swap(Global* other);

  // implements Message ----------------------------------------------

  inline Global* New() const { return New(NULL); }

  Global* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Global& from);
  void MergeFrom(const Global& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Global* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 as = 1;
  void clear_as();
  static const int kAsFieldNumber = 1;
  ::google::protobuf::uint32 as() const;
  void set_as(::google::protobuf::uint32 value);

  // optional string router_id = 2;
  void clear_router_id();
  static const int kRouterIdFieldNumber = 2;
  const ::std::string& router_id() const;
  void set_router_id(const ::std::string& value);
  void set_router_id(const char* value);
  void set_router_id(const char* value, size_t size);
  ::std::string* mutable_router_id();
  ::std::string* release_router_id();
  void set_allocated_router_id(::std::string* router_id);

  // optional int32 listen_port = 3;
  void clear_listen_port();
  static const int kListenPortFieldNumber = 3;
  ::google::protobuf::int32 listen_port() const;
  void set_listen_port(::google::protobuf::int32 value);

  // repeated string listen_addresses = 4;
  int listen_addresses_size() const;
  void clear_listen_addresses();
  static const int kListenAddressesFieldNumber = 4;
  const ::std::string& listen_addresses(int index) const;
  ::std::string* mutable_listen_addresses(int index);
  void set_listen_addresses(int index, const ::std::string& value);
  void set_listen_addresses(int index, const char* value);
  void set_listen_addresses(int index, const char* value, size_t size);
  ::std::string* add_listen_addresses();
  void add_listen_addresses(const ::std::string& value);
  void add_listen_addresses(const char* value);
  void add_listen_addresses(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& listen_addresses() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_listen_addresses();

  // repeated uint32 families = 5;
  int families_size() const;
  void clear_families();
  static const int kFamiliesFieldNumber = 5;
  ::google::protobuf::uint32 families(int index) const;
  void set_families(int index, ::google::protobuf::uint32 value);
  void add_families(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      families() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_families();

  // optional uint32 mpls_label_min = 6;
  void clear_mpls_label_min();
  static const int kMplsLabelMinFieldNumber = 6;
  ::google::protobuf::uint32 mpls_label_min() const;
  void set_mpls_label_min(::google::protobuf::uint32 value);

  // optional uint32 mpls_label_max = 7;
  void clear_mpls_label_max();
  static const int kMplsLabelMaxFieldNumber = 7;
  ::google::protobuf::uint32 mpls_label_max() const;
  void set_mpls_label_max(::google::protobuf::uint32 value);

  // optional bool collector = 8;
  void clear_collector();
  static const int kCollectorFieldNumber = 8;
  bool collector() const;
  void set_collector(bool value);

  // @@protoc_insertion_point(class_scope:gobgpapi.Global)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr router_id_;
  ::google::protobuf::uint32 as_;
  ::google::protobuf::int32 listen_port_;
  ::google::protobuf::RepeatedPtrField< ::std::string> listen_addresses_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > families_;
  mutable int _families_cached_byte_size_;
  ::google::protobuf::uint32 mpls_label_min_;
  ::google::protobuf::uint32 mpls_label_max_;
  bool collector_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto();
  friend void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto();

  void InitAsDefaultInstance();
  static Global* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// optional .gobgpapi.Error.ErrorCode code = 1;
inline void Error::clear_code() {
  code_ = 0;
}
inline ::gobgpapi::Error_ErrorCode Error::code() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Error.code)
  return static_cast< ::gobgpapi::Error_ErrorCode >(code_);
}
inline void Error::set_code(::gobgpapi::Error_ErrorCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Error.code)
}

// optional string msg = 2;
inline void Error::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Error::msg() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Error.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Error.msg)
}
inline void Error::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Error.msg)
}
inline void Error::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Error.msg)
}
inline ::std::string* Error::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Error.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_msg() {
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Error.msg)
}

// -------------------------------------------------------------------

// Arguments

// optional .gobgpapi.Resource resource = 1;
inline void Arguments::clear_resource() {
  resource_ = 0;
}
inline ::gobgpapi::Resource Arguments::resource() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Arguments.resource)
  return static_cast< ::gobgpapi::Resource >(resource_);
}
inline void Arguments::set_resource(::gobgpapi::Resource value) {
  
  resource_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Arguments.resource)
}

// optional uint32 family = 2;
inline void Arguments::clear_family() {
  family_ = 0u;
}
inline ::google::protobuf::uint32 Arguments::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Arguments.family)
  return family_;
}
inline void Arguments::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Arguments.family)
}

// optional string name = 3;
inline void Arguments::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Arguments::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Arguments.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Arguments::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Arguments.name)
}
inline void Arguments::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Arguments.name)
}
inline void Arguments::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Arguments.name)
}
inline ::std::string* Arguments::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Arguments.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Arguments::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Arguments::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Arguments.name)
}

// -------------------------------------------------------------------

// ModPathArguments

// optional .gobgpapi.Operation operation = 1;
inline void ModPathArguments::clear_operation() {
  operation_ = 0;
}
inline ::gobgpapi::Operation ModPathArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPathArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
inline void ModPathArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModPathArguments.operation)
}

// optional .gobgpapi.Resource resource = 2;
inline void ModPathArguments::clear_resource() {
  resource_ = 0;
}
inline ::gobgpapi::Resource ModPathArguments::resource() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPathArguments.resource)
  return static_cast< ::gobgpapi::Resource >(resource_);
}
inline void ModPathArguments::set_resource(::gobgpapi::Resource value) {
  
  resource_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModPathArguments.resource)
}

// optional string name = 3;
inline void ModPathArguments::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModPathArguments::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPathArguments.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModPathArguments::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ModPathArguments.name)
}
inline void ModPathArguments::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ModPathArguments.name)
}
inline void ModPathArguments::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ModPathArguments.name)
}
inline ::std::string* ModPathArguments::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModPathArguments.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModPathArguments::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModPathArguments::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModPathArguments.name)
}

// optional .gobgpapi.Path path = 4;
inline bool ModPathArguments::has_path() const {
  return !_is_default_instance_ && path_ != NULL;
}
inline void ModPathArguments::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}
inline const ::gobgpapi::Path& ModPathArguments::path() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPathArguments.path)
  return path_ != NULL ? *path_ : *default_instance_->path_;
}
inline ::gobgpapi::Path* ModPathArguments::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::gobgpapi::Path;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModPathArguments.path)
  return path_;
}
inline ::gobgpapi::Path* ModPathArguments::release_path() {
  
  ::gobgpapi::Path* temp = path_;
  path_ = NULL;
  return temp;
}
inline void ModPathArguments::set_allocated_path(::gobgpapi::Path* path) {
  delete path_;
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModPathArguments.path)
}

// optional bytes uuid = 5;
inline void ModPathArguments::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModPathArguments::uuid() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPathArguments.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModPathArguments::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ModPathArguments.uuid)
}
inline void ModPathArguments::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ModPathArguments.uuid)
}
inline void ModPathArguments::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ModPathArguments.uuid)
}
inline ::std::string* ModPathArguments::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModPathArguments.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModPathArguments::release_uuid() {
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModPathArguments::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModPathArguments.uuid)
}

// optional uint32 family = 6;
inline void ModPathArguments::clear_family() {
  family_ = 0u;
}
inline ::google::protobuf::uint32 ModPathArguments::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPathArguments.family)
  return family_;
}
inline void ModPathArguments::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModPathArguments.family)
}

// -------------------------------------------------------------------

// ModPathResponse

// optional bytes uuid = 1;
inline void ModPathResponse::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModPathResponse::uuid() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPathResponse.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModPathResponse::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ModPathResponse.uuid)
}
inline void ModPathResponse::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ModPathResponse.uuid)
}
inline void ModPathResponse::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ModPathResponse.uuid)
}
inline ::std::string* ModPathResponse::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModPathResponse.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModPathResponse::release_uuid() {
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModPathResponse::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModPathResponse.uuid)
}

// -------------------------------------------------------------------

// ModPathsArguments

// optional .gobgpapi.Resource resource = 1;
inline void ModPathsArguments::clear_resource() {
  resource_ = 0;
}
inline ::gobgpapi::Resource ModPathsArguments::resource() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPathsArguments.resource)
  return static_cast< ::gobgpapi::Resource >(resource_);
}
inline void ModPathsArguments::set_resource(::gobgpapi::Resource value) {
  
  resource_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModPathsArguments.resource)
}

// optional string name = 2;
inline void ModPathsArguments::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModPathsArguments::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPathsArguments.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModPathsArguments::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ModPathsArguments.name)
}
inline void ModPathsArguments::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ModPathsArguments.name)
}
inline void ModPathsArguments::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ModPathsArguments.name)
}
inline ::std::string* ModPathsArguments::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModPathsArguments.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModPathsArguments::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModPathsArguments::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModPathsArguments.name)
}

// repeated .gobgpapi.Path paths = 3;
inline int ModPathsArguments::paths_size() const {
  return paths_.size();
}
inline void ModPathsArguments::clear_paths() {
  paths_.Clear();
}
inline const ::gobgpapi::Path& ModPathsArguments::paths(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPathsArguments.paths)
  return paths_.Get(index);
}
inline ::gobgpapi::Path* ModPathsArguments::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModPathsArguments.paths)
  return paths_.Mutable(index);
}
inline ::gobgpapi::Path* ModPathsArguments::add_paths() {
  // @@protoc_insertion_point(field_add:gobgpapi.ModPathsArguments.paths)
  return paths_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path >*
ModPathsArguments::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.ModPathsArguments.paths)
  return &paths_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path >&
ModPathsArguments::paths() const {
  // @@protoc_insertion_point(field_list:gobgpapi.ModPathsArguments.paths)
  return paths_;
}

// -------------------------------------------------------------------

// ModNeighborArguments

// optional .gobgpapi.Operation operation = 1;
inline void ModNeighborArguments::clear_operation() {
  operation_ = 0;
}
inline ::gobgpapi::Operation ModNeighborArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModNeighborArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
inline void ModNeighborArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModNeighborArguments.operation)
}

// optional .gobgpapi.Peer peer = 2;
inline bool ModNeighborArguments::has_peer() const {
  return !_is_default_instance_ && peer_ != NULL;
}
inline void ModNeighborArguments::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
inline const ::gobgpapi::Peer& ModNeighborArguments::peer() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModNeighborArguments.peer)
  return peer_ != NULL ? *peer_ : *default_instance_->peer_;
}
inline ::gobgpapi::Peer* ModNeighborArguments::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::gobgpapi::Peer;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModNeighborArguments.peer)
  return peer_;
}
inline ::gobgpapi::Peer* ModNeighborArguments::release_peer() {
  
  ::gobgpapi::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline void ModNeighborArguments::set_allocated_peer(::gobgpapi::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModNeighborArguments.peer)
}

// -------------------------------------------------------------------

// MrtArguments

// optional .gobgpapi.Resource resource = 1;
inline void MrtArguments::clear_resource() {
  resource_ = 0;
}
inline ::gobgpapi::Resource MrtArguments::resource() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MrtArguments.resource)
  return static_cast< ::gobgpapi::Resource >(resource_);
}
inline void MrtArguments::set_resource(::gobgpapi::Resource value) {
  
  resource_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MrtArguments.resource)
}

// optional uint32 family = 2;
inline void MrtArguments::clear_family() {
  family_ = 0u;
}
inline ::google::protobuf::uint32 MrtArguments::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MrtArguments.family)
  return family_;
}
inline void MrtArguments::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MrtArguments.family)
}

// optional uint64 interval = 3;
inline void MrtArguments::clear_interval() {
  interval_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MrtArguments::interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MrtArguments.interval)
  return interval_;
}
inline void MrtArguments::set_interval(::google::protobuf::uint64 value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MrtArguments.interval)
}

// optional string neighbor_address = 4;
inline void MrtArguments::clear_neighbor_address() {
  neighbor_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MrtArguments::neighbor_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MrtArguments.neighbor_address)
  return neighbor_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MrtArguments::set_neighbor_address(const ::std::string& value) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.MrtArguments.neighbor_address)
}
inline void MrtArguments::set_neighbor_address(const char* value) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.MrtArguments.neighbor_address)
}
inline void MrtArguments::set_neighbor_address(const char* value, size_t size) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.MrtArguments.neighbor_address)
}
inline ::std::string* MrtArguments::mutable_neighbor_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.MrtArguments.neighbor_address)
  return neighbor_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MrtArguments::release_neighbor_address() {
  
  return neighbor_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MrtArguments::set_allocated_neighbor_address(::std::string* neighbor_address) {
  if (neighbor_address != NULL) {
    
  } else {
    
  }
  neighbor_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neighbor_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.MrtArguments.neighbor_address)
}

// -------------------------------------------------------------------

// ModMrtArguments

// optional .gobgpapi.Operation operation = 1;
inline void ModMrtArguments::clear_operation() {
  operation_ = 0;
}
inline ::gobgpapi::Operation ModMrtArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModMrtArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
inline void ModMrtArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModMrtArguments.operation)
}

// optional int32 dump_type = 2;
inline void ModMrtArguments::clear_dump_type() {
  dump_type_ = 0;
}
inline ::google::protobuf::int32 ModMrtArguments::dump_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModMrtArguments.dump_type)
  return dump_type_;
}
inline void ModMrtArguments::set_dump_type(::google::protobuf::int32 value) {
  
  dump_type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModMrtArguments.dump_type)
}

// optional string filename = 3;
inline void ModMrtArguments::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModMrtArguments::filename() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModMrtArguments.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModMrtArguments::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ModMrtArguments.filename)
}
inline void ModMrtArguments::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ModMrtArguments.filename)
}
inline void ModMrtArguments::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ModMrtArguments.filename)
}
inline ::std::string* ModMrtArguments::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModMrtArguments.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModMrtArguments::release_filename() {
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModMrtArguments::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModMrtArguments.filename)
}

// optional uint64 interval = 4;
inline void ModMrtArguments::clear_interval() {
  interval_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ModMrtArguments::interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModMrtArguments.interval)
  return interval_;
}
inline void ModMrtArguments::set_interval(::google::protobuf::uint64 value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModMrtArguments.interval)
}

// -------------------------------------------------------------------

// ModBmpArguments

// optional .gobgpapi.Operation operation = 1;
inline void ModBmpArguments::clear_operation() {
  operation_ = 0;
}
inline ::gobgpapi::Operation ModBmpArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModBmpArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
inline void ModBmpArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModBmpArguments.operation)
}

// optional string address = 2;
inline void ModBmpArguments::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModBmpArguments::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModBmpArguments.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModBmpArguments::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ModBmpArguments.address)
}
inline void ModBmpArguments::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ModBmpArguments.address)
}
inline void ModBmpArguments::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ModBmpArguments.address)
}
inline ::std::string* ModBmpArguments::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModBmpArguments.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModBmpArguments::release_address() {
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModBmpArguments::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModBmpArguments.address)
}

// optional uint32 port = 3;
inline void ModBmpArguments::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 ModBmpArguments::port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModBmpArguments.port)
  return port_;
}
inline void ModBmpArguments::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModBmpArguments.port)
}

// optional .gobgpapi.ModBmpArguments.MonitoringPolicy type = 4;
inline void ModBmpArguments::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::ModBmpArguments_MonitoringPolicy ModBmpArguments::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModBmpArguments.type)
  return static_cast< ::gobgpapi::ModBmpArguments_MonitoringPolicy >(type_);
}
inline void ModBmpArguments::set_type(::gobgpapi::ModBmpArguments_MonitoringPolicy value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModBmpArguments.type)
}

// -------------------------------------------------------------------

// ModRpkiArguments

// optional .gobgpapi.Operation operation = 1;
inline void ModRpkiArguments::clear_operation() {
  operation_ = 0;
}
inline ::gobgpapi::Operation ModRpkiArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModRpkiArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
inline void ModRpkiArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModRpkiArguments.operation)
}

// optional string address = 2;
inline void ModRpkiArguments::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModRpkiArguments::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModRpkiArguments.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModRpkiArguments::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ModRpkiArguments.address)
}
inline void ModRpkiArguments::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ModRpkiArguments.address)
}
inline void ModRpkiArguments::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ModRpkiArguments.address)
}
inline ::std::string* ModRpkiArguments::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModRpkiArguments.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModRpkiArguments::release_address() {
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModRpkiArguments::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModRpkiArguments.address)
}

// optional uint32 port = 3;
inline void ModRpkiArguments::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 ModRpkiArguments::port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModRpkiArguments.port)
  return port_;
}
inline void ModRpkiArguments::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModRpkiArguments.port)
}

// -------------------------------------------------------------------

// ModVrfArguments

// optional .gobgpapi.Operation operation = 1;
inline void ModVrfArguments::clear_operation() {
  operation_ = 0;
}
inline ::gobgpapi::Operation ModVrfArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModVrfArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
inline void ModVrfArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModVrfArguments.operation)
}

// optional .gobgpapi.Vrf vrf = 2;
inline bool ModVrfArguments::has_vrf() const {
  return !_is_default_instance_ && vrf_ != NULL;
}
inline void ModVrfArguments::clear_vrf() {
  if (GetArenaNoVirtual() == NULL && vrf_ != NULL) delete vrf_;
  vrf_ = NULL;
}
inline const ::gobgpapi::Vrf& ModVrfArguments::vrf() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModVrfArguments.vrf)
  return vrf_ != NULL ? *vrf_ : *default_instance_->vrf_;
}
inline ::gobgpapi::Vrf* ModVrfArguments::mutable_vrf() {
  
  if (vrf_ == NULL) {
    vrf_ = new ::gobgpapi::Vrf;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModVrfArguments.vrf)
  return vrf_;
}
inline ::gobgpapi::Vrf* ModVrfArguments::release_vrf() {
  
  ::gobgpapi::Vrf* temp = vrf_;
  vrf_ = NULL;
  return temp;
}
inline void ModVrfArguments::set_allocated_vrf(::gobgpapi::Vrf* vrf) {
  delete vrf_;
  vrf_ = vrf;
  if (vrf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModVrfArguments.vrf)
}

// -------------------------------------------------------------------

// ModDefinedSetArguments

// optional .gobgpapi.Operation operation = 1;
inline void ModDefinedSetArguments::clear_operation() {
  operation_ = 0;
}
inline ::gobgpapi::Operation ModDefinedSetArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModDefinedSetArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
inline void ModDefinedSetArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModDefinedSetArguments.operation)
}

// optional .gobgpapi.DefinedSet set = 2;
inline bool ModDefinedSetArguments::has_set() const {
  return !_is_default_instance_ && set_ != NULL;
}
inline void ModDefinedSetArguments::clear_set() {
  if (GetArenaNoVirtual() == NULL && set_ != NULL) delete set_;
  set_ = NULL;
}
inline const ::gobgpapi::DefinedSet& ModDefinedSetArguments::set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModDefinedSetArguments.set)
  return set_ != NULL ? *set_ : *default_instance_->set_;
}
inline ::gobgpapi::DefinedSet* ModDefinedSetArguments::mutable_set() {
  
  if (set_ == NULL) {
    set_ = new ::gobgpapi::DefinedSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModDefinedSetArguments.set)
  return set_;
}
inline ::gobgpapi::DefinedSet* ModDefinedSetArguments::release_set() {
  
  ::gobgpapi::DefinedSet* temp = set_;
  set_ = NULL;
  return temp;
}
inline void ModDefinedSetArguments::set_allocated_set(::gobgpapi::DefinedSet* set) {
  delete set_;
  set_ = set;
  if (set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModDefinedSetArguments.set)
}

// -------------------------------------------------------------------

// ModStatementArguments

// optional .gobgpapi.Operation operation = 1;
inline void ModStatementArguments::clear_operation() {
  operation_ = 0;
}
inline ::gobgpapi::Operation ModStatementArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModStatementArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
inline void ModStatementArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModStatementArguments.operation)
}

// optional .gobgpapi.Statement statement = 2;
inline bool ModStatementArguments::has_statement() const {
  return !_is_default_instance_ && statement_ != NULL;
}
inline void ModStatementArguments::clear_statement() {
  if (GetArenaNoVirtual() == NULL && statement_ != NULL) delete statement_;
  statement_ = NULL;
}
inline const ::gobgpapi::Statement& ModStatementArguments::statement() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModStatementArguments.statement)
  return statement_ != NULL ? *statement_ : *default_instance_->statement_;
}
inline ::gobgpapi::Statement* ModStatementArguments::mutable_statement() {
  
  if (statement_ == NULL) {
    statement_ = new ::gobgpapi::Statement;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModStatementArguments.statement)
  return statement_;
}
inline ::gobgpapi::Statement* ModStatementArguments::release_statement() {
  
  ::gobgpapi::Statement* temp = statement_;
  statement_ = NULL;
  return temp;
}
inline void ModStatementArguments::set_allocated_statement(::gobgpapi::Statement* statement) {
  delete statement_;
  statement_ = statement;
  if (statement) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModStatementArguments.statement)
}

// -------------------------------------------------------------------

// ModPolicyArguments

// optional .gobgpapi.Operation operation = 1;
inline void ModPolicyArguments::clear_operation() {
  operation_ = 0;
}
inline ::gobgpapi::Operation ModPolicyArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPolicyArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
inline void ModPolicyArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModPolicyArguments.operation)
}

// optional .gobgpapi.Policy policy = 2;
inline bool ModPolicyArguments::has_policy() const {
  return !_is_default_instance_ && policy_ != NULL;
}
inline void ModPolicyArguments::clear_policy() {
  if (GetArenaNoVirtual() == NULL && policy_ != NULL) delete policy_;
  policy_ = NULL;
}
inline const ::gobgpapi::Policy& ModPolicyArguments::policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPolicyArguments.policy)
  return policy_ != NULL ? *policy_ : *default_instance_->policy_;
}
inline ::gobgpapi::Policy* ModPolicyArguments::mutable_policy() {
  
  if (policy_ == NULL) {
    policy_ = new ::gobgpapi::Policy;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModPolicyArguments.policy)
  return policy_;
}
inline ::gobgpapi::Policy* ModPolicyArguments::release_policy() {
  
  ::gobgpapi::Policy* temp = policy_;
  policy_ = NULL;
  return temp;
}
inline void ModPolicyArguments::set_allocated_policy(::gobgpapi::Policy* policy) {
  delete policy_;
  policy_ = policy;
  if (policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModPolicyArguments.policy)
}

// optional bool refer_existing_statements = 3;
inline void ModPolicyArguments::clear_refer_existing_statements() {
  refer_existing_statements_ = false;
}
inline bool ModPolicyArguments::refer_existing_statements() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPolicyArguments.refer_existing_statements)
  return refer_existing_statements_;
}
inline void ModPolicyArguments::set_refer_existing_statements(bool value) {
  
  refer_existing_statements_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModPolicyArguments.refer_existing_statements)
}

// optional bool preserve_statements = 4;
inline void ModPolicyArguments::clear_preserve_statements() {
  preserve_statements_ = false;
}
inline bool ModPolicyArguments::preserve_statements() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPolicyArguments.preserve_statements)
  return preserve_statements_;
}
inline void ModPolicyArguments::set_preserve_statements(bool value) {
  
  preserve_statements_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModPolicyArguments.preserve_statements)
}

// -------------------------------------------------------------------

// ModPolicyAssignmentArguments

// optional .gobgpapi.Operation operation = 1;
inline void ModPolicyAssignmentArguments::clear_operation() {
  operation_ = 0;
}
inline ::gobgpapi::Operation ModPolicyAssignmentArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPolicyAssignmentArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
inline void ModPolicyAssignmentArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModPolicyAssignmentArguments.operation)
}

// optional .gobgpapi.PolicyAssignment assignment = 2;
inline bool ModPolicyAssignmentArguments::has_assignment() const {
  return !_is_default_instance_ && assignment_ != NULL;
}
inline void ModPolicyAssignmentArguments::clear_assignment() {
  if (GetArenaNoVirtual() == NULL && assignment_ != NULL) delete assignment_;
  assignment_ = NULL;
}
inline const ::gobgpapi::PolicyAssignment& ModPolicyAssignmentArguments::assignment() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPolicyAssignmentArguments.assignment)
  return assignment_ != NULL ? *assignment_ : *default_instance_->assignment_;
}
inline ::gobgpapi::PolicyAssignment* ModPolicyAssignmentArguments::mutable_assignment() {
  
  if (assignment_ == NULL) {
    assignment_ = new ::gobgpapi::PolicyAssignment;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModPolicyAssignmentArguments.assignment)
  return assignment_;
}
inline ::gobgpapi::PolicyAssignment* ModPolicyAssignmentArguments::release_assignment() {
  
  ::gobgpapi::PolicyAssignment* temp = assignment_;
  assignment_ = NULL;
  return temp;
}
inline void ModPolicyAssignmentArguments::set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment) {
  delete assignment_;
  assignment_ = assignment;
  if (assignment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModPolicyAssignmentArguments.assignment)
}

// -------------------------------------------------------------------

// ModGlobalConfigArguments

// optional .gobgpapi.Operation operation = 1;
inline void ModGlobalConfigArguments::clear_operation() {
  operation_ = 0;
}
inline ::gobgpapi::Operation ModGlobalConfigArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModGlobalConfigArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
inline void ModGlobalConfigArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModGlobalConfigArguments.operation)
}

// optional .gobgpapi.Global global = 2;
inline bool ModGlobalConfigArguments::has_global() const {
  return !_is_default_instance_ && global_ != NULL;
}
inline void ModGlobalConfigArguments::clear_global() {
  if (GetArenaNoVirtual() == NULL && global_ != NULL) delete global_;
  global_ = NULL;
}
inline const ::gobgpapi::Global& ModGlobalConfigArguments::global() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModGlobalConfigArguments.global)
  return global_ != NULL ? *global_ : *default_instance_->global_;
}
inline ::gobgpapi::Global* ModGlobalConfigArguments::mutable_global() {
  
  if (global_ == NULL) {
    global_ = new ::gobgpapi::Global;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModGlobalConfigArguments.global)
  return global_;
}
inline ::gobgpapi::Global* ModGlobalConfigArguments::release_global() {
  
  ::gobgpapi::Global* temp = global_;
  global_ = NULL;
  return temp;
}
inline void ModGlobalConfigArguments::set_allocated_global(::gobgpapi::Global* global) {
  delete global_;
  global_ = global;
  if (global) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModGlobalConfigArguments.global)
}

// -------------------------------------------------------------------

// Path

// optional bytes nlri = 1;
inline void Path::clear_nlri() {
  nlri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Path::nlri() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.nlri)
  return nlri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Path::set_nlri(const ::std::string& value) {
  
  nlri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.nlri)
}
inline void Path::set_nlri(const char* value) {
  
  nlri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Path.nlri)
}
inline void Path::set_nlri(const void* value, size_t size) {
  
  nlri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Path.nlri)
}
inline ::std::string* Path::mutable_nlri() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.nlri)
  return nlri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Path::release_nlri() {
  
  return nlri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Path::set_allocated_nlri(::std::string* nlri) {
  if (nlri != NULL) {
    
  } else {
    
  }
  nlri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nlri);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Path.nlri)
}

// repeated bytes pattrs = 2;
inline int Path::pattrs_size() const {
  return pattrs_.size();
}
inline void Path::clear_pattrs() {
  pattrs_.Clear();
}
inline const ::std::string& Path::pattrs(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.pattrs)
  return pattrs_.Get(index);
}
inline ::std::string* Path::mutable_pattrs(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.pattrs)
  return pattrs_.Mutable(index);
}
inline void Path::set_pattrs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Path.pattrs)
  pattrs_.Mutable(index)->assign(value);
}
inline void Path::set_pattrs(int index, const char* value) {
  pattrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.Path.pattrs)
}
inline void Path::set_pattrs(int index, const void* value, size_t size) {
  pattrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Path.pattrs)
}
inline ::std::string* Path::add_pattrs() {
  return pattrs_.Add();
}
inline void Path::add_pattrs(const ::std::string& value) {
  pattrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Path.pattrs)
}
inline void Path::add_pattrs(const char* value) {
  pattrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.Path.pattrs)
}
inline void Path::add_pattrs(const void* value, size_t size) {
  pattrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.Path.pattrs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Path::pattrs() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Path.pattrs)
  return pattrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Path::mutable_pattrs() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Path.pattrs)
  return &pattrs_;
}

// optional int64 age = 3;
inline void Path::clear_age() {
  age_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Path::age() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.age)
  return age_;
}
inline void Path::set_age(::google::protobuf::int64 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.age)
}

// optional bool best = 4;
inline void Path::clear_best() {
  best_ = false;
}
inline bool Path::best() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.best)
  return best_;
}
inline void Path::set_best(bool value) {
  
  best_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.best)
}

// optional bool is_withdraw = 5;
inline void Path::clear_is_withdraw() {
  is_withdraw_ = false;
}
inline bool Path::is_withdraw() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.is_withdraw)
  return is_withdraw_;
}
inline void Path::set_is_withdraw(bool value) {
  
  is_withdraw_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.is_withdraw)
}

// optional int32 validation = 6;
inline void Path::clear_validation() {
  validation_ = 0;
}
inline ::google::protobuf::int32 Path::validation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.validation)
  return validation_;
}
inline void Path::set_validation(::google::protobuf::int32 value) {
  
  validation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.validation)
}

// optional bool no_implicit_withdraw = 7;
inline void Path::clear_no_implicit_withdraw() {
  no_implicit_withdraw_ = false;
}
inline bool Path::no_implicit_withdraw() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.no_implicit_withdraw)
  return no_implicit_withdraw_;
}
inline void Path::set_no_implicit_withdraw(bool value) {
  
  no_implicit_withdraw_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.no_implicit_withdraw)
}

// optional uint32 family = 8;
inline void Path::clear_family() {
  family_ = 0u;
}
inline ::google::protobuf::uint32 Path::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.family)
  return family_;
}
inline void Path::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.family)
}

// optional uint32 source_asn = 9;
inline void Path::clear_source_asn() {
  source_asn_ = 0u;
}
inline ::google::protobuf::uint32 Path::source_asn() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.source_asn)
  return source_asn_;
}
inline void Path::set_source_asn(::google::protobuf::uint32 value) {
  
  source_asn_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.source_asn)
}

// optional string source_id = 10;
inline void Path::clear_source_id() {
  source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Path::source_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.source_id)
  return source_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Path::set_source_id(const ::std::string& value) {
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.source_id)
}
inline void Path::set_source_id(const char* value) {
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Path.source_id)
}
inline void Path::set_source_id(const char* value, size_t size) {
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Path.source_id)
}
inline ::std::string* Path::mutable_source_id() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.source_id)
  return source_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Path::release_source_id() {
  
  return source_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Path::set_allocated_source_id(::std::string* source_id) {
  if (source_id != NULL) {
    
  } else {
    
  }
  source_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Path.source_id)
}

// optional bool filtered = 11;
inline void Path::clear_filtered() {
  filtered_ = false;
}
inline bool Path::filtered() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.filtered)
  return filtered_;
}
inline void Path::set_filtered(bool value) {
  
  filtered_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.filtered)
}

// optional bool stale = 12;
inline void Path::clear_stale() {
  stale_ = false;
}
inline bool Path::stale() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.stale)
  return stale_;
}
inline void Path::set_stale(bool value) {
  
  stale_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.stale)
}

// optional bool is_from_external = 13;
inline void Path::clear_is_from_external() {
  is_from_external_ = false;
}
inline bool Path::is_from_external() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.is_from_external)
  return is_from_external_;
}
inline void Path::set_is_from_external(bool value) {
  
  is_from_external_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.is_from_external)
}

// optional string neighbor_ip = 14;
inline void Path::clear_neighbor_ip() {
  neighbor_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Path::neighbor_ip() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.neighbor_ip)
  return neighbor_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Path::set_neighbor_ip(const ::std::string& value) {
  
  neighbor_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.neighbor_ip)
}
inline void Path::set_neighbor_ip(const char* value) {
  
  neighbor_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Path.neighbor_ip)
}
inline void Path::set_neighbor_ip(const char* value, size_t size) {
  
  neighbor_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Path.neighbor_ip)
}
inline ::std::string* Path::mutable_neighbor_ip() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.neighbor_ip)
  return neighbor_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Path::release_neighbor_ip() {
  
  return neighbor_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Path::set_allocated_neighbor_ip(::std::string* neighbor_ip) {
  if (neighbor_ip != NULL) {
    
  } else {
    
  }
  neighbor_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neighbor_ip);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Path.neighbor_ip)
}

// -------------------------------------------------------------------

// Destination

// optional string prefix = 1;
inline void Destination::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Destination::prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Destination.prefix)
  return prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Destination::set_prefix(const ::std::string& value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Destination.prefix)
}
inline void Destination::set_prefix(const char* value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Destination.prefix)
}
inline void Destination::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Destination.prefix)
}
inline ::std::string* Destination::mutable_prefix() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Destination.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Destination::release_prefix() {
  
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Destination::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Destination.prefix)
}

// repeated .gobgpapi.Path paths = 2;
inline int Destination::paths_size() const {
  return paths_.size();
}
inline void Destination::clear_paths() {
  paths_.Clear();
}
inline const ::gobgpapi::Path& Destination::paths(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Destination.paths)
  return paths_.Get(index);
}
inline ::gobgpapi::Path* Destination::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Destination.paths)
  return paths_.Mutable(index);
}
inline ::gobgpapi::Path* Destination::add_paths() {
  // @@protoc_insertion_point(field_add:gobgpapi.Destination.paths)
  return paths_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path >*
Destination::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Destination.paths)
  return &paths_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path >&
Destination::paths() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Destination.paths)
  return paths_;
}

// optional bool longer_prefixes = 3;
inline void Destination::clear_longer_prefixes() {
  longer_prefixes_ = false;
}
inline bool Destination::longer_prefixes() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Destination.longer_prefixes)
  return longer_prefixes_;
}
inline void Destination::set_longer_prefixes(bool value) {
  
  longer_prefixes_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Destination.longer_prefixes)
}

// -------------------------------------------------------------------

// Table

// optional .gobgpapi.Resource type = 1;
inline void Table::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::Resource Table::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Table.type)
  return static_cast< ::gobgpapi::Resource >(type_);
}
inline void Table::set_type(::gobgpapi::Resource value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Table.type)
}

// optional string name = 2;
inline void Table::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Table::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Table.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Table.name)
}
inline void Table::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Table.name)
}
inline void Table::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Table.name)
}
inline ::std::string* Table::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Table.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Table::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Table::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Table.name)
}

// optional uint32 family = 3;
inline void Table::clear_family() {
  family_ = 0u;
}
inline ::google::protobuf::uint32 Table::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Table.family)
  return family_;
}
inline void Table::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Table.family)
}

// repeated .gobgpapi.Destination destinations = 4;
inline int Table::destinations_size() const {
  return destinations_.size();
}
inline void Table::clear_destinations() {
  destinations_.Clear();
}
inline const ::gobgpapi::Destination& Table::destinations(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Table.destinations)
  return destinations_.Get(index);
}
inline ::gobgpapi::Destination* Table::mutable_destinations(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Table.destinations)
  return destinations_.Mutable(index);
}
inline ::gobgpapi::Destination* Table::add_destinations() {
  // @@protoc_insertion_point(field_add:gobgpapi.Table.destinations)
  return destinations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Destination >*
Table::mutable_destinations() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Table.destinations)
  return &destinations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Destination >&
Table::destinations() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Table.destinations)
  return destinations_;
}

// optional bool post_policy = 5;
inline void Table::clear_post_policy() {
  post_policy_ = false;
}
inline bool Table::post_policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Table.post_policy)
  return post_policy_;
}
inline void Table::set_post_policy(bool value) {
  
  post_policy_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Table.post_policy)
}

// -------------------------------------------------------------------

// Peer

// repeated uint32 families = 2;
inline int Peer::families_size() const {
  return families_.size();
}
inline void Peer::clear_families() {
  families_.Clear();
}
inline ::google::protobuf::uint32 Peer::families(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.families)
  return families_.Get(index);
}
inline void Peer::set_families(int index, ::google::protobuf::uint32 value) {
  families_.Set(index, value);
  // @@protoc_insertion_point(field_set:gobgpapi.Peer.families)
}
inline void Peer::add_families(::google::protobuf::uint32 value) {
  families_.Add(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Peer.families)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Peer::families() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Peer.families)
  return families_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Peer::mutable_families() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Peer.families)
  return &families_;
}

// optional .gobgpapi.ApplyPolicy apply_policy = 3;
inline bool Peer::has_apply_policy() const {
  return !_is_default_instance_ && apply_policy_ != NULL;
}
inline void Peer::clear_apply_policy() {
  if (GetArenaNoVirtual() == NULL && apply_policy_ != NULL) delete apply_policy_;
  apply_policy_ = NULL;
}
inline const ::gobgpapi::ApplyPolicy& Peer::apply_policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.apply_policy)
  return apply_policy_ != NULL ? *apply_policy_ : *default_instance_->apply_policy_;
}
inline ::gobgpapi::ApplyPolicy* Peer::mutable_apply_policy() {
  
  if (apply_policy_ == NULL) {
    apply_policy_ = new ::gobgpapi::ApplyPolicy;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.apply_policy)
  return apply_policy_;
}
inline ::gobgpapi::ApplyPolicy* Peer::release_apply_policy() {
  
  ::gobgpapi::ApplyPolicy* temp = apply_policy_;
  apply_policy_ = NULL;
  return temp;
}
inline void Peer::set_allocated_apply_policy(::gobgpapi::ApplyPolicy* apply_policy) {
  delete apply_policy_;
  apply_policy_ = apply_policy;
  if (apply_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.apply_policy)
}

// optional .gobgpapi.PeerConf conf = 5;
inline bool Peer::has_conf() const {
  return !_is_default_instance_ && conf_ != NULL;
}
inline void Peer::clear_conf() {
  if (GetArenaNoVirtual() == NULL && conf_ != NULL) delete conf_;
  conf_ = NULL;
}
inline const ::gobgpapi::PeerConf& Peer::conf() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.conf)
  return conf_ != NULL ? *conf_ : *default_instance_->conf_;
}
inline ::gobgpapi::PeerConf* Peer::mutable_conf() {
  
  if (conf_ == NULL) {
    conf_ = new ::gobgpapi::PeerConf;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.conf)
  return conf_;
}
inline ::gobgpapi::PeerConf* Peer::release_conf() {
  
  ::gobgpapi::PeerConf* temp = conf_;
  conf_ = NULL;
  return temp;
}
inline void Peer::set_allocated_conf(::gobgpapi::PeerConf* conf) {
  delete conf_;
  conf_ = conf;
  if (conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.conf)
}

// optional .gobgpapi.EbgpMultihop ebgp_multihop = 6;
inline bool Peer::has_ebgp_multihop() const {
  return !_is_default_instance_ && ebgp_multihop_ != NULL;
}
inline void Peer::clear_ebgp_multihop() {
  if (GetArenaNoVirtual() == NULL && ebgp_multihop_ != NULL) delete ebgp_multihop_;
  ebgp_multihop_ = NULL;
}
inline const ::gobgpapi::EbgpMultihop& Peer::ebgp_multihop() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.ebgp_multihop)
  return ebgp_multihop_ != NULL ? *ebgp_multihop_ : *default_instance_->ebgp_multihop_;
}
inline ::gobgpapi::EbgpMultihop* Peer::mutable_ebgp_multihop() {
  
  if (ebgp_multihop_ == NULL) {
    ebgp_multihop_ = new ::gobgpapi::EbgpMultihop;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.ebgp_multihop)
  return ebgp_multihop_;
}
inline ::gobgpapi::EbgpMultihop* Peer::release_ebgp_multihop() {
  
  ::gobgpapi::EbgpMultihop* temp = ebgp_multihop_;
  ebgp_multihop_ = NULL;
  return temp;
}
inline void Peer::set_allocated_ebgp_multihop(::gobgpapi::EbgpMultihop* ebgp_multihop) {
  delete ebgp_multihop_;
  ebgp_multihop_ = ebgp_multihop;
  if (ebgp_multihop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.ebgp_multihop)
}

// optional .gobgpapi.RouteReflector route_reflector = 10;
inline bool Peer::has_route_reflector() const {
  return !_is_default_instance_ && route_reflector_ != NULL;
}
inline void Peer::clear_route_reflector() {
  if (GetArenaNoVirtual() == NULL && route_reflector_ != NULL) delete route_reflector_;
  route_reflector_ = NULL;
}
inline const ::gobgpapi::RouteReflector& Peer::route_reflector() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.route_reflector)
  return route_reflector_ != NULL ? *route_reflector_ : *default_instance_->route_reflector_;
}
inline ::gobgpapi::RouteReflector* Peer::mutable_route_reflector() {
  
  if (route_reflector_ == NULL) {
    route_reflector_ = new ::gobgpapi::RouteReflector;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.route_reflector)
  return route_reflector_;
}
inline ::gobgpapi::RouteReflector* Peer::release_route_reflector() {
  
  ::gobgpapi::RouteReflector* temp = route_reflector_;
  route_reflector_ = NULL;
  return temp;
}
inline void Peer::set_allocated_route_reflector(::gobgpapi::RouteReflector* route_reflector) {
  delete route_reflector_;
  route_reflector_ = route_reflector;
  if (route_reflector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.route_reflector)
}

// optional .gobgpapi.PeerState info = 11;
inline bool Peer::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
inline void Peer::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::gobgpapi::PeerState& Peer::info() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::gobgpapi::PeerState* Peer::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::gobgpapi::PeerState;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.info)
  return info_;
}
inline ::gobgpapi::PeerState* Peer::release_info() {
  
  ::gobgpapi::PeerState* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Peer::set_allocated_info(::gobgpapi::PeerState* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.info)
}

// optional .gobgpapi.Timers timers = 12;
inline bool Peer::has_timers() const {
  return !_is_default_instance_ && timers_ != NULL;
}
inline void Peer::clear_timers() {
  if (GetArenaNoVirtual() == NULL && timers_ != NULL) delete timers_;
  timers_ = NULL;
}
inline const ::gobgpapi::Timers& Peer::timers() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.timers)
  return timers_ != NULL ? *timers_ : *default_instance_->timers_;
}
inline ::gobgpapi::Timers* Peer::mutable_timers() {
  
  if (timers_ == NULL) {
    timers_ = new ::gobgpapi::Timers;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.timers)
  return timers_;
}
inline ::gobgpapi::Timers* Peer::release_timers() {
  
  ::gobgpapi::Timers* temp = timers_;
  timers_ = NULL;
  return temp;
}
inline void Peer::set_allocated_timers(::gobgpapi::Timers* timers) {
  delete timers_;
  timers_ = timers;
  if (timers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.timers)
}

// optional .gobgpapi.Transport transport = 13;
inline bool Peer::has_transport() const {
  return !_is_default_instance_ && transport_ != NULL;
}
inline void Peer::clear_transport() {
  if (GetArenaNoVirtual() == NULL && transport_ != NULL) delete transport_;
  transport_ = NULL;
}
inline const ::gobgpapi::Transport& Peer::transport() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.transport)
  return transport_ != NULL ? *transport_ : *default_instance_->transport_;
}
inline ::gobgpapi::Transport* Peer::mutable_transport() {
  
  if (transport_ == NULL) {
    transport_ = new ::gobgpapi::Transport;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.transport)
  return transport_;
}
inline ::gobgpapi::Transport* Peer::release_transport() {
  
  ::gobgpapi::Transport* temp = transport_;
  transport_ = NULL;
  return temp;
}
inline void Peer::set_allocated_transport(::gobgpapi::Transport* transport) {
  delete transport_;
  transport_ = transport;
  if (transport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.transport)
}

// optional .gobgpapi.RouteServer route_server = 15;
inline bool Peer::has_route_server() const {
  return !_is_default_instance_ && route_server_ != NULL;
}
inline void Peer::clear_route_server() {
  if (GetArenaNoVirtual() == NULL && route_server_ != NULL) delete route_server_;
  route_server_ = NULL;
}
inline const ::gobgpapi::RouteServer& Peer::route_server() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.route_server)
  return route_server_ != NULL ? *route_server_ : *default_instance_->route_server_;
}
inline ::gobgpapi::RouteServer* Peer::mutable_route_server() {
  
  if (route_server_ == NULL) {
    route_server_ = new ::gobgpapi::RouteServer;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.route_server)
  return route_server_;
}
inline ::gobgpapi::RouteServer* Peer::release_route_server() {
  
  ::gobgpapi::RouteServer* temp = route_server_;
  route_server_ = NULL;
  return temp;
}
inline void Peer::set_allocated_route_server(::gobgpapi::RouteServer* route_server) {
  delete route_server_;
  route_server_ = route_server;
  if (route_server) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.route_server)
}

// -------------------------------------------------------------------

// ApplyPolicy

// optional .gobgpapi.PolicyAssignment in_policy = 1;
inline bool ApplyPolicy::has_in_policy() const {
  return !_is_default_instance_ && in_policy_ != NULL;
}
inline void ApplyPolicy::clear_in_policy() {
  if (GetArenaNoVirtual() == NULL && in_policy_ != NULL) delete in_policy_;
  in_policy_ = NULL;
}
inline const ::gobgpapi::PolicyAssignment& ApplyPolicy::in_policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ApplyPolicy.in_policy)
  return in_policy_ != NULL ? *in_policy_ : *default_instance_->in_policy_;
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::mutable_in_policy() {
  
  if (in_policy_ == NULL) {
    in_policy_ = new ::gobgpapi::PolicyAssignment;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ApplyPolicy.in_policy)
  return in_policy_;
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::release_in_policy() {
  
  ::gobgpapi::PolicyAssignment* temp = in_policy_;
  in_policy_ = NULL;
  return temp;
}
inline void ApplyPolicy::set_allocated_in_policy(::gobgpapi::PolicyAssignment* in_policy) {
  delete in_policy_;
  in_policy_ = in_policy;
  if (in_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ApplyPolicy.in_policy)
}

// optional .gobgpapi.PolicyAssignment export_policy = 2;
inline bool ApplyPolicy::has_export_policy() const {
  return !_is_default_instance_ && export_policy_ != NULL;
}
inline void ApplyPolicy::clear_export_policy() {
  if (GetArenaNoVirtual() == NULL && export_policy_ != NULL) delete export_policy_;
  export_policy_ = NULL;
}
inline const ::gobgpapi::PolicyAssignment& ApplyPolicy::export_policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ApplyPolicy.export_policy)
  return export_policy_ != NULL ? *export_policy_ : *default_instance_->export_policy_;
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::mutable_export_policy() {
  
  if (export_policy_ == NULL) {
    export_policy_ = new ::gobgpapi::PolicyAssignment;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ApplyPolicy.export_policy)
  return export_policy_;
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::release_export_policy() {
  
  ::gobgpapi::PolicyAssignment* temp = export_policy_;
  export_policy_ = NULL;
  return temp;
}
inline void ApplyPolicy::set_allocated_export_policy(::gobgpapi::PolicyAssignment* export_policy) {
  delete export_policy_;
  export_policy_ = export_policy;
  if (export_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ApplyPolicy.export_policy)
}

// optional .gobgpapi.PolicyAssignment import_policy = 3;
inline bool ApplyPolicy::has_import_policy() const {
  return !_is_default_instance_ && import_policy_ != NULL;
}
inline void ApplyPolicy::clear_import_policy() {
  if (GetArenaNoVirtual() == NULL && import_policy_ != NULL) delete import_policy_;
  import_policy_ = NULL;
}
inline const ::gobgpapi::PolicyAssignment& ApplyPolicy::import_policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ApplyPolicy.import_policy)
  return import_policy_ != NULL ? *import_policy_ : *default_instance_->import_policy_;
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::mutable_import_policy() {
  
  if (import_policy_ == NULL) {
    import_policy_ = new ::gobgpapi::PolicyAssignment;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ApplyPolicy.import_policy)
  return import_policy_;
}
inline ::gobgpapi::PolicyAssignment* ApplyPolicy::release_import_policy() {
  
  ::gobgpapi::PolicyAssignment* temp = import_policy_;
  import_policy_ = NULL;
  return temp;
}
inline void ApplyPolicy::set_allocated_import_policy(::gobgpapi::PolicyAssignment* import_policy) {
  delete import_policy_;
  import_policy_ = import_policy;
  if (import_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ApplyPolicy.import_policy)
}

// -------------------------------------------------------------------

// PeerConf

// optional string auth_password = 1;
inline void PeerConf::clear_auth_password() {
  auth_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerConf::auth_password() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.auth_password)
  return auth_password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_auth_password(const ::std::string& value) {
  
  auth_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.auth_password)
}
inline void PeerConf::set_auth_password(const char* value) {
  
  auth_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.auth_password)
}
inline void PeerConf::set_auth_password(const char* value, size_t size) {
  
  auth_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.auth_password)
}
inline ::std::string* PeerConf::mutable_auth_password() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.auth_password)
  return auth_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerConf::release_auth_password() {
  
  return auth_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_allocated_auth_password(::std::string* auth_password) {
  if (auth_password != NULL) {
    
  } else {
    
  }
  auth_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_password);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.auth_password)
}

// optional string description = 2;
inline void PeerConf::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerConf::description() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.description)
}
inline void PeerConf::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.description)
}
inline void PeerConf::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.description)
}
inline ::std::string* PeerConf::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerConf::release_description() {
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.description)
}

// optional uint32 local_as = 3;
inline void PeerConf::clear_local_as() {
  local_as_ = 0u;
}
inline ::google::protobuf::uint32 PeerConf::local_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.local_as)
  return local_as_;
}
inline void PeerConf::set_local_as(::google::protobuf::uint32 value) {
  
  local_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.local_as)
}

// optional string neighbor_address = 4;
inline void PeerConf::clear_neighbor_address() {
  neighbor_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerConf::neighbor_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.neighbor_address)
  return neighbor_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_neighbor_address(const ::std::string& value) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.neighbor_address)
}
inline void PeerConf::set_neighbor_address(const char* value) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.neighbor_address)
}
inline void PeerConf::set_neighbor_address(const char* value, size_t size) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.neighbor_address)
}
inline ::std::string* PeerConf::mutable_neighbor_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.neighbor_address)
  return neighbor_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerConf::release_neighbor_address() {
  
  return neighbor_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_allocated_neighbor_address(::std::string* neighbor_address) {
  if (neighbor_address != NULL) {
    
  } else {
    
  }
  neighbor_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neighbor_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.neighbor_address)
}

// optional uint32 peer_as = 5;
inline void PeerConf::clear_peer_as() {
  peer_as_ = 0u;
}
inline ::google::protobuf::uint32 PeerConf::peer_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.peer_as)
  return peer_as_;
}
inline void PeerConf::set_peer_as(::google::protobuf::uint32 value) {
  
  peer_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.peer_as)
}

// optional string peer_group = 6;
inline void PeerConf::clear_peer_group() {
  peer_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerConf::peer_group() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.peer_group)
  return peer_group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_peer_group(const ::std::string& value) {
  
  peer_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.peer_group)
}
inline void PeerConf::set_peer_group(const char* value) {
  
  peer_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.peer_group)
}
inline void PeerConf::set_peer_group(const char* value, size_t size) {
  
  peer_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.peer_group)
}
inline ::std::string* PeerConf::mutable_peer_group() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.peer_group)
  return peer_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerConf::release_peer_group() {
  
  return peer_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_allocated_peer_group(::std::string* peer_group) {
  if (peer_group != NULL) {
    
  } else {
    
  }
  peer_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_group);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.peer_group)
}

// optional uint32 peer_type = 7;
inline void PeerConf::clear_peer_type() {
  peer_type_ = 0u;
}
inline ::google::protobuf::uint32 PeerConf::peer_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.peer_type)
  return peer_type_;
}
inline void PeerConf::set_peer_type(::google::protobuf::uint32 value) {
  
  peer_type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.peer_type)
}

// optional uint32 remove_private_as = 8;
inline void PeerConf::clear_remove_private_as() {
  remove_private_as_ = 0u;
}
inline ::google::protobuf::uint32 PeerConf::remove_private_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.remove_private_as)
  return remove_private_as_;
}
inline void PeerConf::set_remove_private_as(::google::protobuf::uint32 value) {
  
  remove_private_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.remove_private_as)
}

// optional bool route_flap_damping = 9;
inline void PeerConf::clear_route_flap_damping() {
  route_flap_damping_ = false;
}
inline bool PeerConf::route_flap_damping() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.route_flap_damping)
  return route_flap_damping_;
}
inline void PeerConf::set_route_flap_damping(bool value) {
  
  route_flap_damping_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.route_flap_damping)
}

// optional uint32 send_community = 10;
inline void PeerConf::clear_send_community() {
  send_community_ = 0u;
}
inline ::google::protobuf::uint32 PeerConf::send_community() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.send_community)
  return send_community_;
}
inline void PeerConf::set_send_community(::google::protobuf::uint32 value) {
  
  send_community_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.send_community)
}

// repeated bytes remote_cap = 11;
inline int PeerConf::remote_cap_size() const {
  return remote_cap_.size();
}
inline void PeerConf::clear_remote_cap() {
  remote_cap_.Clear();
}
inline const ::std::string& PeerConf::remote_cap(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.remote_cap)
  return remote_cap_.Get(index);
}
inline ::std::string* PeerConf::mutable_remote_cap(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.remote_cap)
  return remote_cap_.Mutable(index);
}
inline void PeerConf::set_remote_cap(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.remote_cap)
  remote_cap_.Mutable(index)->assign(value);
}
inline void PeerConf::set_remote_cap(int index, const char* value) {
  remote_cap_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.remote_cap)
}
inline void PeerConf::set_remote_cap(int index, const void* value, size_t size) {
  remote_cap_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.remote_cap)
}
inline ::std::string* PeerConf::add_remote_cap() {
  return remote_cap_.Add();
}
inline void PeerConf::add_remote_cap(const ::std::string& value) {
  remote_cap_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.PeerConf.remote_cap)
}
inline void PeerConf::add_remote_cap(const char* value) {
  remote_cap_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.PeerConf.remote_cap)
}
inline void PeerConf::add_remote_cap(const void* value, size_t size) {
  remote_cap_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.PeerConf.remote_cap)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PeerConf::remote_cap() const {
  // @@protoc_insertion_point(field_list:gobgpapi.PeerConf.remote_cap)
  return remote_cap_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PeerConf::mutable_remote_cap() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.PeerConf.remote_cap)
  return &remote_cap_;
}

// repeated bytes local_cap = 12;
inline int PeerConf::local_cap_size() const {
  return local_cap_.size();
}
inline void PeerConf::clear_local_cap() {
  local_cap_.Clear();
}
inline const ::std::string& PeerConf::local_cap(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.local_cap)
  return local_cap_.Get(index);
}
inline ::std::string* PeerConf::mutable_local_cap(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.local_cap)
  return local_cap_.Mutable(index);
}
inline void PeerConf::set_local_cap(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.local_cap)
  local_cap_.Mutable(index)->assign(value);
}
inline void PeerConf::set_local_cap(int index, const char* value) {
  local_cap_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.local_cap)
}
inline void PeerConf::set_local_cap(int index, const void* value, size_t size) {
  local_cap_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.local_cap)
}
inline ::std::string* PeerConf::add_local_cap() {
  return local_cap_.Add();
}
inline void PeerConf::add_local_cap(const ::std::string& value) {
  local_cap_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.PeerConf.local_cap)
}
inline void PeerConf::add_local_cap(const char* value) {
  local_cap_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.PeerConf.local_cap)
}
inline void PeerConf::add_local_cap(const void* value, size_t size) {
  local_cap_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.PeerConf.local_cap)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PeerConf::local_cap() const {
  // @@protoc_insertion_point(field_list:gobgpapi.PeerConf.local_cap)
  return local_cap_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PeerConf::mutable_local_cap() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.PeerConf.local_cap)
  return &local_cap_;
}

// optional string id = 13;
inline void PeerConf::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerConf::id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.id)
}
inline void PeerConf::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.id)
}
inline void PeerConf::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.id)
}
inline ::std::string* PeerConf::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerConf::release_id() {
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerConf::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.id)
}

// -------------------------------------------------------------------

// EbgpMultihop

// optional bool enabled = 1;
inline void EbgpMultihop::clear_enabled() {
  enabled_ = false;
}
inline bool EbgpMultihop::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EbgpMultihop.enabled)
  return enabled_;
}
inline void EbgpMultihop::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.EbgpMultihop.enabled)
}

// optional uint32 multihop_ttl = 2;
inline void EbgpMultihop::clear_multihop_ttl() {
  multihop_ttl_ = 0u;
}
inline ::google::protobuf::uint32 EbgpMultihop::multihop_ttl() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EbgpMultihop.multihop_ttl)
  return multihop_ttl_;
}
inline void EbgpMultihop::set_multihop_ttl(::google::protobuf::uint32 value) {
  
  multihop_ttl_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.EbgpMultihop.multihop_ttl)
}

// -------------------------------------------------------------------

// RouteReflector

// optional bool route_reflector_client = 1;
inline void RouteReflector::clear_route_reflector_client() {
  route_reflector_client_ = false;
}
inline bool RouteReflector::route_reflector_client() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteReflector.route_reflector_client)
  return route_reflector_client_;
}
inline void RouteReflector::set_route_reflector_client(bool value) {
  
  route_reflector_client_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteReflector.route_reflector_client)
}

// optional uint32 route_reflector_cluster_id = 2;
inline void RouteReflector::clear_route_reflector_cluster_id() {
  route_reflector_cluster_id_ = 0u;
}
inline ::google::protobuf::uint32 RouteReflector::route_reflector_cluster_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteReflector.route_reflector_cluster_id)
  return route_reflector_cluster_id_;
}
inline void RouteReflector::set_route_reflector_cluster_id(::google::protobuf::uint32 value) {
  
  route_reflector_cluster_id_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteReflector.route_reflector_cluster_id)
}

// -------------------------------------------------------------------

// PeerState

// optional string auth_password = 1;
inline void PeerState::clear_auth_password() {
  auth_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerState::auth_password() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.auth_password)
  return auth_password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_auth_password(const ::std::string& value) {
  
  auth_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.auth_password)
}
inline void PeerState::set_auth_password(const char* value) {
  
  auth_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.auth_password)
}
inline void PeerState::set_auth_password(const char* value, size_t size) {
  
  auth_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.auth_password)
}
inline ::std::string* PeerState::mutable_auth_password() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.auth_password)
  return auth_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerState::release_auth_password() {
  
  return auth_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_allocated_auth_password(::std::string* auth_password) {
  if (auth_password != NULL) {
    
  } else {
    
  }
  auth_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_password);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.auth_password)
}

// optional string description = 2;
inline void PeerState::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerState::description() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.description)
}
inline void PeerState::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.description)
}
inline void PeerState::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.description)
}
inline ::std::string* PeerState::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerState::release_description() {
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.description)
}

// optional uint32 local_as = 3;
inline void PeerState::clear_local_as() {
  local_as_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::local_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.local_as)
  return local_as_;
}
inline void PeerState::set_local_as(::google::protobuf::uint32 value) {
  
  local_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.local_as)
}

// optional .gobgpapi.Messages messages = 4;
inline bool PeerState::has_messages() const {
  return !_is_default_instance_ && messages_ != NULL;
}
inline void PeerState::clear_messages() {
  if (GetArenaNoVirtual() == NULL && messages_ != NULL) delete messages_;
  messages_ = NULL;
}
inline const ::gobgpapi::Messages& PeerState::messages() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.messages)
  return messages_ != NULL ? *messages_ : *default_instance_->messages_;
}
inline ::gobgpapi::Messages* PeerState::mutable_messages() {
  
  if (messages_ == NULL) {
    messages_ = new ::gobgpapi::Messages;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.messages)
  return messages_;
}
inline ::gobgpapi::Messages* PeerState::release_messages() {
  
  ::gobgpapi::Messages* temp = messages_;
  messages_ = NULL;
  return temp;
}
inline void PeerState::set_allocated_messages(::gobgpapi::Messages* messages) {
  delete messages_;
  messages_ = messages;
  if (messages) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.messages)
}

// optional string neighbor_address = 5;
inline void PeerState::clear_neighbor_address() {
  neighbor_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerState::neighbor_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.neighbor_address)
  return neighbor_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_neighbor_address(const ::std::string& value) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.neighbor_address)
}
inline void PeerState::set_neighbor_address(const char* value) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.neighbor_address)
}
inline void PeerState::set_neighbor_address(const char* value, size_t size) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.neighbor_address)
}
inline ::std::string* PeerState::mutable_neighbor_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.neighbor_address)
  return neighbor_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerState::release_neighbor_address() {
  
  return neighbor_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_allocated_neighbor_address(::std::string* neighbor_address) {
  if (neighbor_address != NULL) {
    
  } else {
    
  }
  neighbor_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neighbor_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.neighbor_address)
}

// optional uint32 peer_as = 6;
inline void PeerState::clear_peer_as() {
  peer_as_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::peer_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.peer_as)
  return peer_as_;
}
inline void PeerState::set_peer_as(::google::protobuf::uint32 value) {
  
  peer_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.peer_as)
}

// optional string peer_group = 7;
inline void PeerState::clear_peer_group() {
  peer_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerState::peer_group() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.peer_group)
  return peer_group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_peer_group(const ::std::string& value) {
  
  peer_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.peer_group)
}
inline void PeerState::set_peer_group(const char* value) {
  
  peer_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.peer_group)
}
inline void PeerState::set_peer_group(const char* value, size_t size) {
  
  peer_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.peer_group)
}
inline ::std::string* PeerState::mutable_peer_group() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.peer_group)
  return peer_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerState::release_peer_group() {
  
  return peer_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_allocated_peer_group(::std::string* peer_group) {
  if (peer_group != NULL) {
    
  } else {
    
  }
  peer_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_group);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.peer_group)
}

// optional uint32 peer_type = 8;
inline void PeerState::clear_peer_type() {
  peer_type_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::peer_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.peer_type)
  return peer_type_;
}
inline void PeerState::set_peer_type(::google::protobuf::uint32 value) {
  
  peer_type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.peer_type)
}

// optional .gobgpapi.Queues queues = 9;
inline bool PeerState::has_queues() const {
  return !_is_default_instance_ && queues_ != NULL;
}
inline void PeerState::clear_queues() {
  if (GetArenaNoVirtual() == NULL && queues_ != NULL) delete queues_;
  queues_ = NULL;
}
inline const ::gobgpapi::Queues& PeerState::queues() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.queues)
  return queues_ != NULL ? *queues_ : *default_instance_->queues_;
}
inline ::gobgpapi::Queues* PeerState::mutable_queues() {
  
  if (queues_ == NULL) {
    queues_ = new ::gobgpapi::Queues;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.queues)
  return queues_;
}
inline ::gobgpapi::Queues* PeerState::release_queues() {
  
  ::gobgpapi::Queues* temp = queues_;
  queues_ = NULL;
  return temp;
}
inline void PeerState::set_allocated_queues(::gobgpapi::Queues* queues) {
  delete queues_;
  queues_ = queues;
  if (queues) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.queues)
}

// optional uint32 remove_private_as = 10;
inline void PeerState::clear_remove_private_as() {
  remove_private_as_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::remove_private_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.remove_private_as)
  return remove_private_as_;
}
inline void PeerState::set_remove_private_as(::google::protobuf::uint32 value) {
  
  remove_private_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.remove_private_as)
}

// optional bool route_flap_damping = 11;
inline void PeerState::clear_route_flap_damping() {
  route_flap_damping_ = false;
}
inline bool PeerState::route_flap_damping() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.route_flap_damping)
  return route_flap_damping_;
}
inline void PeerState::set_route_flap_damping(bool value) {
  
  route_flap_damping_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.route_flap_damping)
}

// optional uint32 send_community = 12;
inline void PeerState::clear_send_community() {
  send_community_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::send_community() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.send_community)
  return send_community_;
}
inline void PeerState::set_send_community(::google::protobuf::uint32 value) {
  
  send_community_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.send_community)
}

// optional uint32 session_state = 13;
inline void PeerState::clear_session_state() {
  session_state_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::session_state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.session_state)
  return session_state_;
}
inline void PeerState::set_session_state(::google::protobuf::uint32 value) {
  
  session_state_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.session_state)
}

// repeated string supported_capabilities = 14;
inline int PeerState::supported_capabilities_size() const {
  return supported_capabilities_.size();
}
inline void PeerState::clear_supported_capabilities() {
  supported_capabilities_.Clear();
}
inline const ::std::string& PeerState::supported_capabilities(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.supported_capabilities)
  return supported_capabilities_.Get(index);
}
inline ::std::string* PeerState::mutable_supported_capabilities(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.supported_capabilities)
  return supported_capabilities_.Mutable(index);
}
inline void PeerState::set_supported_capabilities(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.supported_capabilities)
  supported_capabilities_.Mutable(index)->assign(value);
}
inline void PeerState::set_supported_capabilities(int index, const char* value) {
  supported_capabilities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.supported_capabilities)
}
inline void PeerState::set_supported_capabilities(int index, const char* value, size_t size) {
  supported_capabilities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.supported_capabilities)
}
inline ::std::string* PeerState::add_supported_capabilities() {
  return supported_capabilities_.Add();
}
inline void PeerState::add_supported_capabilities(const ::std::string& value) {
  supported_capabilities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.PeerState.supported_capabilities)
}
inline void PeerState::add_supported_capabilities(const char* value) {
  supported_capabilities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.PeerState.supported_capabilities)
}
inline void PeerState::add_supported_capabilities(const char* value, size_t size) {
  supported_capabilities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.PeerState.supported_capabilities)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PeerState::supported_capabilities() const {
  // @@protoc_insertion_point(field_list:gobgpapi.PeerState.supported_capabilities)
  return supported_capabilities_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PeerState::mutable_supported_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.PeerState.supported_capabilities)
  return &supported_capabilities_;
}

// optional string bgp_state = 15;
inline void PeerState::clear_bgp_state() {
  bgp_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerState::bgp_state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.bgp_state)
  return bgp_state_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_bgp_state(const ::std::string& value) {
  
  bgp_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.bgp_state)
}
inline void PeerState::set_bgp_state(const char* value) {
  
  bgp_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.bgp_state)
}
inline void PeerState::set_bgp_state(const char* value, size_t size) {
  
  bgp_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.bgp_state)
}
inline ::std::string* PeerState::mutable_bgp_state() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.bgp_state)
  return bgp_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerState::release_bgp_state() {
  
  return bgp_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_allocated_bgp_state(::std::string* bgp_state) {
  if (bgp_state != NULL) {
    
  } else {
    
  }
  bgp_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bgp_state);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.bgp_state)
}

// optional string admin_state = 16;
inline void PeerState::clear_admin_state() {
  admin_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerState::admin_state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.admin_state)
  return admin_state_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_admin_state(const ::std::string& value) {
  
  admin_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.admin_state)
}
inline void PeerState::set_admin_state(const char* value) {
  
  admin_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.admin_state)
}
inline void PeerState::set_admin_state(const char* value, size_t size) {
  
  admin_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.admin_state)
}
inline ::std::string* PeerState::mutable_admin_state() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.admin_state)
  return admin_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerState::release_admin_state() {
  
  return admin_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerState::set_allocated_admin_state(::std::string* admin_state) {
  if (admin_state != NULL) {
    
  } else {
    
  }
  admin_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), admin_state);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.admin_state)
}

// optional uint32 received = 17;
inline void PeerState::clear_received() {
  received_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::received() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.received)
  return received_;
}
inline void PeerState::set_received(::google::protobuf::uint32 value) {
  
  received_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.received)
}

// optional uint32 accepted = 18;
inline void PeerState::clear_accepted() {
  accepted_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::accepted() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.accepted)
  return accepted_;
}
inline void PeerState::set_accepted(::google::protobuf::uint32 value) {
  
  accepted_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.accepted)
}

// optional uint32 advertised = 19;
inline void PeerState::clear_advertised() {
  advertised_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::advertised() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.advertised)
  return advertised_;
}
inline void PeerState::set_advertised(::google::protobuf::uint32 value) {
  
  advertised_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.advertised)
}

// optional uint32 out_q = 20;
inline void PeerState::clear_out_q() {
  out_q_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::out_q() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.out_q)
  return out_q_;
}
inline void PeerState::set_out_q(::google::protobuf::uint32 value) {
  
  out_q_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.out_q)
}

// optional uint32 flops = 21;
inline void PeerState::clear_flops() {
  flops_ = 0u;
}
inline ::google::protobuf::uint32 PeerState::flops() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.flops)
  return flops_;
}
inline void PeerState::set_flops(::google::protobuf::uint32 value) {
  
  flops_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.flops)
}

// -------------------------------------------------------------------

// Messages

// optional .gobgpapi.Message received = 1;
inline bool Messages::has_received() const {
  return !_is_default_instance_ && received_ != NULL;
}
inline void Messages::clear_received() {
  if (GetArenaNoVirtual() == NULL && received_ != NULL) delete received_;
  received_ = NULL;
}
inline const ::gobgpapi::Message& Messages::received() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Messages.received)
  return received_ != NULL ? *received_ : *default_instance_->received_;
}
inline ::gobgpapi::Message* Messages::mutable_received() {
  
  if (received_ == NULL) {
    received_ = new ::gobgpapi::Message;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Messages.received)
  return received_;
}
inline ::gobgpapi::Message* Messages::release_received() {
  
  ::gobgpapi::Message* temp = received_;
  received_ = NULL;
  return temp;
}
inline void Messages::set_allocated_received(::gobgpapi::Message* received) {
  delete received_;
  received_ = received;
  if (received) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Messages.received)
}

// optional .gobgpapi.Message sent = 2;
inline bool Messages::has_sent() const {
  return !_is_default_instance_ && sent_ != NULL;
}
inline void Messages::clear_sent() {
  if (GetArenaNoVirtual() == NULL && sent_ != NULL) delete sent_;
  sent_ = NULL;
}
inline const ::gobgpapi::Message& Messages::sent() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Messages.sent)
  return sent_ != NULL ? *sent_ : *default_instance_->sent_;
}
inline ::gobgpapi::Message* Messages::mutable_sent() {
  
  if (sent_ == NULL) {
    sent_ = new ::gobgpapi::Message;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Messages.sent)
  return sent_;
}
inline ::gobgpapi::Message* Messages::release_sent() {
  
  ::gobgpapi::Message* temp = sent_;
  sent_ = NULL;
  return temp;
}
inline void Messages::set_allocated_sent(::gobgpapi::Message* sent) {
  delete sent_;
  sent_ = sent;
  if (sent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Messages.sent)
}

// -------------------------------------------------------------------

// Message

// optional uint64 NOTIFICATION = 1;
inline void Message::clear_notification() {
  notification_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::notification() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.NOTIFICATION)
  return notification_;
}
inline void Message::set_notification(::google::protobuf::uint64 value) {
  
  notification_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.NOTIFICATION)
}

// optional uint64 UPDATE = 2;
inline void Message::clear_update() {
  update_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::update() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.UPDATE)
  return update_;
}
inline void Message::set_update(::google::protobuf::uint64 value) {
  
  update_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.UPDATE)
}

// optional uint64 OPEN = 3;
inline void Message::clear_open() {
  open_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::open() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.OPEN)
  return open_;
}
inline void Message::set_open(::google::protobuf::uint64 value) {
  
  open_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.OPEN)
}

// optional uint64 KEEPALIVE = 4;
inline void Message::clear_keepalive() {
  keepalive_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::keepalive() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.KEEPALIVE)
  return keepalive_;
}
inline void Message::set_keepalive(::google::protobuf::uint64 value) {
  
  keepalive_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.KEEPALIVE)
}

// optional uint64 REFRESH = 5;
inline void Message::clear_refresh() {
  refresh_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::refresh() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.REFRESH)
  return refresh_;
}
inline void Message::set_refresh(::google::protobuf::uint64 value) {
  
  refresh_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.REFRESH)
}

// optional uint64 DISCARDED = 6;
inline void Message::clear_discarded() {
  discarded_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::discarded() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.DISCARDED)
  return discarded_;
}
inline void Message::set_discarded(::google::protobuf::uint64 value) {
  
  discarded_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.DISCARDED)
}

// optional uint64 TOTAL = 7;
inline void Message::clear_total() {
  total_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Message::total() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.TOTAL)
  return total_;
}
inline void Message::set_total(::google::protobuf::uint64 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.TOTAL)
}

// -------------------------------------------------------------------

// Queues

// optional uint32 input = 1;
inline void Queues::clear_input() {
  input_ = 0u;
}
inline ::google::protobuf::uint32 Queues::input() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Queues.input)
  return input_;
}
inline void Queues::set_input(::google::protobuf::uint32 value) {
  
  input_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Queues.input)
}

// optional uint32 output = 2;
inline void Queues::clear_output() {
  output_ = 0u;
}
inline ::google::protobuf::uint32 Queues::output() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Queues.output)
  return output_;
}
inline void Queues::set_output(::google::protobuf::uint32 value) {
  
  output_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Queues.output)
}

// -------------------------------------------------------------------

// Timers

// optional .gobgpapi.TimersConfig config = 1;
inline bool Timers::has_config() const {
  return !_is_default_instance_ && config_ != NULL;
}
inline void Timers::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
inline const ::gobgpapi::TimersConfig& Timers::config() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Timers.config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::gobgpapi::TimersConfig* Timers::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::gobgpapi::TimersConfig;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Timers.config)
  return config_;
}
inline ::gobgpapi::TimersConfig* Timers::release_config() {
  
  ::gobgpapi::TimersConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline void Timers::set_allocated_config(::gobgpapi::TimersConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Timers.config)
}

// optional .gobgpapi.TimersState state = 2;
inline bool Timers::has_state() const {
  return !_is_default_instance_ && state_ != NULL;
}
inline void Timers::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) delete state_;
  state_ = NULL;
}
inline const ::gobgpapi::TimersState& Timers::state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Timers.state)
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::gobgpapi::TimersState* Timers::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::gobgpapi::TimersState;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Timers.state)
  return state_;
}
inline ::gobgpapi::TimersState* Timers::release_state() {
  
  ::gobgpapi::TimersState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void Timers::set_allocated_state(::gobgpapi::TimersState* state) {
  delete state_;
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Timers.state)
}

// -------------------------------------------------------------------

// TimersConfig

// optional uint64 connect_retry = 1;
inline void TimersConfig::clear_connect_retry() {
  connect_retry_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersConfig::connect_retry() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersConfig.connect_retry)
  return connect_retry_;
}
inline void TimersConfig::set_connect_retry(::google::protobuf::uint64 value) {
  
  connect_retry_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersConfig.connect_retry)
}

// optional uint64 hold_time = 2;
inline void TimersConfig::clear_hold_time() {
  hold_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersConfig::hold_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersConfig.hold_time)
  return hold_time_;
}
inline void TimersConfig::set_hold_time(::google::protobuf::uint64 value) {
  
  hold_time_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersConfig.hold_time)
}

// optional uint64 keepalive_interval = 3;
inline void TimersConfig::clear_keepalive_interval() {
  keepalive_interval_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersConfig::keepalive_interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersConfig.keepalive_interval)
  return keepalive_interval_;
}
inline void TimersConfig::set_keepalive_interval(::google::protobuf::uint64 value) {
  
  keepalive_interval_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersConfig.keepalive_interval)
}

// optional uint64 minimum_advertisement_interval = 4;
inline void TimersConfig::clear_minimum_advertisement_interval() {
  minimum_advertisement_interval_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersConfig::minimum_advertisement_interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersConfig.minimum_advertisement_interval)
  return minimum_advertisement_interval_;
}
inline void TimersConfig::set_minimum_advertisement_interval(::google::protobuf::uint64 value) {
  
  minimum_advertisement_interval_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersConfig.minimum_advertisement_interval)
}

// -------------------------------------------------------------------

// TimersState

// optional uint64 connect_retry = 1;
inline void TimersState::clear_connect_retry() {
  connect_retry_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersState::connect_retry() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.connect_retry)
  return connect_retry_;
}
inline void TimersState::set_connect_retry(::google::protobuf::uint64 value) {
  
  connect_retry_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.connect_retry)
}

// optional uint64 hold_time = 2;
inline void TimersState::clear_hold_time() {
  hold_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersState::hold_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.hold_time)
  return hold_time_;
}
inline void TimersState::set_hold_time(::google::protobuf::uint64 value) {
  
  hold_time_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.hold_time)
}

// optional uint64 keepalive_interval = 3;
inline void TimersState::clear_keepalive_interval() {
  keepalive_interval_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersState::keepalive_interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.keepalive_interval)
  return keepalive_interval_;
}
inline void TimersState::set_keepalive_interval(::google::protobuf::uint64 value) {
  
  keepalive_interval_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.keepalive_interval)
}

// optional uint64 minimum_advertisement_interval = 4;
inline void TimersState::clear_minimum_advertisement_interval() {
  minimum_advertisement_interval_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersState::minimum_advertisement_interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.minimum_advertisement_interval)
  return minimum_advertisement_interval_;
}
inline void TimersState::set_minimum_advertisement_interval(::google::protobuf::uint64 value) {
  
  minimum_advertisement_interval_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.minimum_advertisement_interval)
}

// optional uint64 negotiated_hold_time = 5;
inline void TimersState::clear_negotiated_hold_time() {
  negotiated_hold_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersState::negotiated_hold_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.negotiated_hold_time)
  return negotiated_hold_time_;
}
inline void TimersState::set_negotiated_hold_time(::google::protobuf::uint64 value) {
  
  negotiated_hold_time_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.negotiated_hold_time)
}

// optional uint64 uptime = 6;
inline void TimersState::clear_uptime() {
  uptime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersState::uptime() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.uptime)
  return uptime_;
}
inline void TimersState::set_uptime(::google::protobuf::uint64 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.uptime)
}

// optional uint64 downtime = 7;
inline void TimersState::clear_downtime() {
  downtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TimersState::downtime() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.downtime)
  return downtime_;
}
inline void TimersState::set_downtime(::google::protobuf::uint64 value) {
  
  downtime_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.downtime)
}

// -------------------------------------------------------------------

// Transport

// optional string local_address = 1;
inline void Transport::clear_local_address() {
  local_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transport::local_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.local_address)
  return local_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport::set_local_address(const ::std::string& value) {
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.local_address)
}
inline void Transport::set_local_address(const char* value) {
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Transport.local_address)
}
inline void Transport::set_local_address(const char* value, size_t size) {
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Transport.local_address)
}
inline ::std::string* Transport::mutable_local_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Transport.local_address)
  return local_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport::release_local_address() {
  
  return local_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport::set_allocated_local_address(::std::string* local_address) {
  if (local_address != NULL) {
    
  } else {
    
  }
  local_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Transport.local_address)
}

// optional uint32 local_port = 2;
inline void Transport::clear_local_port() {
  local_port_ = 0u;
}
inline ::google::protobuf::uint32 Transport::local_port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.local_port)
  return local_port_;
}
inline void Transport::set_local_port(::google::protobuf::uint32 value) {
  
  local_port_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.local_port)
}

// optional bool mtu_discovery = 3;
inline void Transport::clear_mtu_discovery() {
  mtu_discovery_ = false;
}
inline bool Transport::mtu_discovery() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.mtu_discovery)
  return mtu_discovery_;
}
inline void Transport::set_mtu_discovery(bool value) {
  
  mtu_discovery_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.mtu_discovery)
}

// optional bool passive_mode = 4;
inline void Transport::clear_passive_mode() {
  passive_mode_ = false;
}
inline bool Transport::passive_mode() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.passive_mode)
  return passive_mode_;
}
inline void Transport::set_passive_mode(bool value) {
  
  passive_mode_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.passive_mode)
}

// optional string remote_address = 5;
inline void Transport::clear_remote_address() {
  remote_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transport::remote_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.remote_address)
  return remote_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport::set_remote_address(const ::std::string& value) {
  
  remote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.remote_address)
}
inline void Transport::set_remote_address(const char* value) {
  
  remote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Transport.remote_address)
}
inline void Transport::set_remote_address(const char* value, size_t size) {
  
  remote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Transport.remote_address)
}
inline ::std::string* Transport::mutable_remote_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Transport.remote_address)
  return remote_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport::release_remote_address() {
  
  return remote_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport::set_allocated_remote_address(::std::string* remote_address) {
  if (remote_address != NULL) {
    
  } else {
    
  }
  remote_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Transport.remote_address)
}

// optional uint32 remote_port = 6;
inline void Transport::clear_remote_port() {
  remote_port_ = 0u;
}
inline ::google::protobuf::uint32 Transport::remote_port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.remote_port)
  return remote_port_;
}
inline void Transport::set_remote_port(::google::protobuf::uint32 value) {
  
  remote_port_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.remote_port)
}

// optional uint32 tcp_mss = 7;
inline void Transport::clear_tcp_mss() {
  tcp_mss_ = 0u;
}
inline ::google::protobuf::uint32 Transport::tcp_mss() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.tcp_mss)
  return tcp_mss_;
}
inline void Transport::set_tcp_mss(::google::protobuf::uint32 value) {
  
  tcp_mss_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.tcp_mss)
}

// -------------------------------------------------------------------

// RouteServer

// optional bool route_server_client = 1;
inline void RouteServer::clear_route_server_client() {
  route_server_client_ = false;
}
inline bool RouteServer::route_server_client() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteServer.route_server_client)
  return route_server_client_;
}
inline void RouteServer::set_route_server_client(bool value) {
  
  route_server_client_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteServer.route_server_client)
}

// -------------------------------------------------------------------

// Prefix

// optional string ip_prefix = 1;
inline void Prefix::clear_ip_prefix() {
  ip_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Prefix::ip_prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Prefix.ip_prefix)
  return ip_prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Prefix::set_ip_prefix(const ::std::string& value) {
  
  ip_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Prefix.ip_prefix)
}
inline void Prefix::set_ip_prefix(const char* value) {
  
  ip_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Prefix.ip_prefix)
}
inline void Prefix::set_ip_prefix(const char* value, size_t size) {
  
  ip_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Prefix.ip_prefix)
}
inline ::std::string* Prefix::mutable_ip_prefix() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Prefix.ip_prefix)
  return ip_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Prefix::release_ip_prefix() {
  
  return ip_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Prefix::set_allocated_ip_prefix(::std::string* ip_prefix) {
  if (ip_prefix != NULL) {
    
  } else {
    
  }
  ip_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Prefix.ip_prefix)
}

// optional uint32 mask_length_min = 2;
inline void Prefix::clear_mask_length_min() {
  mask_length_min_ = 0u;
}
inline ::google::protobuf::uint32 Prefix::mask_length_min() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Prefix.mask_length_min)
  return mask_length_min_;
}
inline void Prefix::set_mask_length_min(::google::protobuf::uint32 value) {
  
  mask_length_min_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Prefix.mask_length_min)
}

// optional uint32 mask_length_max = 3;
inline void Prefix::clear_mask_length_max() {
  mask_length_max_ = 0u;
}
inline ::google::protobuf::uint32 Prefix::mask_length_max() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Prefix.mask_length_max)
  return mask_length_max_;
}
inline void Prefix::set_mask_length_max(::google::protobuf::uint32 value) {
  
  mask_length_max_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Prefix.mask_length_max)
}

// -------------------------------------------------------------------

// DefinedSet

// optional .gobgpapi.DefinedType type = 1;
inline void DefinedSet::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::DefinedType DefinedSet::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DefinedSet.type)
  return static_cast< ::gobgpapi::DefinedType >(type_);
}
inline void DefinedSet::set_type(::gobgpapi::DefinedType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.DefinedSet.type)
}

// optional string name = 2;
inline void DefinedSet::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DefinedSet::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DefinedSet.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DefinedSet::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.DefinedSet.name)
}
inline void DefinedSet::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DefinedSet.name)
}
inline void DefinedSet::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DefinedSet.name)
}
inline ::std::string* DefinedSet::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.DefinedSet.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DefinedSet::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DefinedSet::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DefinedSet.name)
}

// repeated string list = 3;
inline int DefinedSet::list_size() const {
  return list_.size();
}
inline void DefinedSet::clear_list() {
  list_.Clear();
}
inline const ::std::string& DefinedSet::list(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.DefinedSet.list)
  return list_.Get(index);
}
inline ::std::string* DefinedSet::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DefinedSet.list)
  return list_.Mutable(index);
}
inline void DefinedSet::set_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.DefinedSet.list)
  list_.Mutable(index)->assign(value);
}
inline void DefinedSet::set_list(int index, const char* value) {
  list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.DefinedSet.list)
}
inline void DefinedSet::set_list(int index, const char* value, size_t size) {
  list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DefinedSet.list)
}
inline ::std::string* DefinedSet::add_list() {
  return list_.Add();
}
inline void DefinedSet::add_list(const ::std::string& value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.DefinedSet.list)
}
inline void DefinedSet::add_list(const char* value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.DefinedSet.list)
}
inline void DefinedSet::add_list(const char* value, size_t size) {
  list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.DefinedSet.list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DefinedSet::list() const {
  // @@protoc_insertion_point(field_list:gobgpapi.DefinedSet.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DefinedSet::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.DefinedSet.list)
  return &list_;
}

// repeated .gobgpapi.Prefix prefixes = 4;
inline int DefinedSet::prefixes_size() const {
  return prefixes_.size();
}
inline void DefinedSet::clear_prefixes() {
  prefixes_.Clear();
}
inline const ::gobgpapi::Prefix& DefinedSet::prefixes(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.DefinedSet.prefixes)
  return prefixes_.Get(index);
}
inline ::gobgpapi::Prefix* DefinedSet::mutable_prefixes(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DefinedSet.prefixes)
  return prefixes_.Mutable(index);
}
inline ::gobgpapi::Prefix* DefinedSet::add_prefixes() {
  // @@protoc_insertion_point(field_add:gobgpapi.DefinedSet.prefixes)
  return prefixes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Prefix >*
DefinedSet::mutable_prefixes() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.DefinedSet.prefixes)
  return &prefixes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Prefix >&
DefinedSet::prefixes() const {
  // @@protoc_insertion_point(field_list:gobgpapi.DefinedSet.prefixes)
  return prefixes_;
}

// -------------------------------------------------------------------

// MatchSet

// optional .gobgpapi.MatchType type = 1;
inline void MatchSet::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::MatchType MatchSet::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MatchSet.type)
  return static_cast< ::gobgpapi::MatchType >(type_);
}
inline void MatchSet::set_type(::gobgpapi::MatchType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MatchSet.type)
}

// optional string name = 2;
inline void MatchSet::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatchSet::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MatchSet.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchSet::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.MatchSet.name)
}
inline void MatchSet::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.MatchSet.name)
}
inline void MatchSet::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.MatchSet.name)
}
inline ::std::string* MatchSet::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.MatchSet.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchSet::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchSet::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.MatchSet.name)
}

// -------------------------------------------------------------------

// AsPathLength

// optional .gobgpapi.AsPathLengthType type = 1;
inline void AsPathLength::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::AsPathLengthType AsPathLength::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPathLength.type)
  return static_cast< ::gobgpapi::AsPathLengthType >(type_);
}
inline void AsPathLength::set_type(::gobgpapi::AsPathLengthType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AsPathLength.type)
}

// optional uint32 length = 2;
inline void AsPathLength::clear_length() {
  length_ = 0u;
}
inline ::google::protobuf::uint32 AsPathLength::length() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPathLength.length)
  return length_;
}
inline void AsPathLength::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AsPathLength.length)
}

// -------------------------------------------------------------------

// Conditions

// optional .gobgpapi.MatchSet prefix_set = 1;
inline bool Conditions::has_prefix_set() const {
  return !_is_default_instance_ && prefix_set_ != NULL;
}
inline void Conditions::clear_prefix_set() {
  if (GetArenaNoVirtual() == NULL && prefix_set_ != NULL) delete prefix_set_;
  prefix_set_ = NULL;
}
inline const ::gobgpapi::MatchSet& Conditions::prefix_set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.prefix_set)
  return prefix_set_ != NULL ? *prefix_set_ : *default_instance_->prefix_set_;
}
inline ::gobgpapi::MatchSet* Conditions::mutable_prefix_set() {
  
  if (prefix_set_ == NULL) {
    prefix_set_ = new ::gobgpapi::MatchSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.prefix_set)
  return prefix_set_;
}
inline ::gobgpapi::MatchSet* Conditions::release_prefix_set() {
  
  ::gobgpapi::MatchSet* temp = prefix_set_;
  prefix_set_ = NULL;
  return temp;
}
inline void Conditions::set_allocated_prefix_set(::gobgpapi::MatchSet* prefix_set) {
  delete prefix_set_;
  prefix_set_ = prefix_set;
  if (prefix_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.prefix_set)
}

// optional .gobgpapi.MatchSet neighbor_set = 2;
inline bool Conditions::has_neighbor_set() const {
  return !_is_default_instance_ && neighbor_set_ != NULL;
}
inline void Conditions::clear_neighbor_set() {
  if (GetArenaNoVirtual() == NULL && neighbor_set_ != NULL) delete neighbor_set_;
  neighbor_set_ = NULL;
}
inline const ::gobgpapi::MatchSet& Conditions::neighbor_set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.neighbor_set)
  return neighbor_set_ != NULL ? *neighbor_set_ : *default_instance_->neighbor_set_;
}
inline ::gobgpapi::MatchSet* Conditions::mutable_neighbor_set() {
  
  if (neighbor_set_ == NULL) {
    neighbor_set_ = new ::gobgpapi::MatchSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.neighbor_set)
  return neighbor_set_;
}
inline ::gobgpapi::MatchSet* Conditions::release_neighbor_set() {
  
  ::gobgpapi::MatchSet* temp = neighbor_set_;
  neighbor_set_ = NULL;
  return temp;
}
inline void Conditions::set_allocated_neighbor_set(::gobgpapi::MatchSet* neighbor_set) {
  delete neighbor_set_;
  neighbor_set_ = neighbor_set;
  if (neighbor_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.neighbor_set)
}

// optional .gobgpapi.AsPathLength as_path_length = 3;
inline bool Conditions::has_as_path_length() const {
  return !_is_default_instance_ && as_path_length_ != NULL;
}
inline void Conditions::clear_as_path_length() {
  if (GetArenaNoVirtual() == NULL && as_path_length_ != NULL) delete as_path_length_;
  as_path_length_ = NULL;
}
inline const ::gobgpapi::AsPathLength& Conditions::as_path_length() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.as_path_length)
  return as_path_length_ != NULL ? *as_path_length_ : *default_instance_->as_path_length_;
}
inline ::gobgpapi::AsPathLength* Conditions::mutable_as_path_length() {
  
  if (as_path_length_ == NULL) {
    as_path_length_ = new ::gobgpapi::AsPathLength;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.as_path_length)
  return as_path_length_;
}
inline ::gobgpapi::AsPathLength* Conditions::release_as_path_length() {
  
  ::gobgpapi::AsPathLength* temp = as_path_length_;
  as_path_length_ = NULL;
  return temp;
}
inline void Conditions::set_allocated_as_path_length(::gobgpapi::AsPathLength* as_path_length) {
  delete as_path_length_;
  as_path_length_ = as_path_length;
  if (as_path_length) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.as_path_length)
}

// optional .gobgpapi.MatchSet as_path_set = 4;
inline bool Conditions::has_as_path_set() const {
  return !_is_default_instance_ && as_path_set_ != NULL;
}
inline void Conditions::clear_as_path_set() {
  if (GetArenaNoVirtual() == NULL && as_path_set_ != NULL) delete as_path_set_;
  as_path_set_ = NULL;
}
inline const ::gobgpapi::MatchSet& Conditions::as_path_set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.as_path_set)
  return as_path_set_ != NULL ? *as_path_set_ : *default_instance_->as_path_set_;
}
inline ::gobgpapi::MatchSet* Conditions::mutable_as_path_set() {
  
  if (as_path_set_ == NULL) {
    as_path_set_ = new ::gobgpapi::MatchSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.as_path_set)
  return as_path_set_;
}
inline ::gobgpapi::MatchSet* Conditions::release_as_path_set() {
  
  ::gobgpapi::MatchSet* temp = as_path_set_;
  as_path_set_ = NULL;
  return temp;
}
inline void Conditions::set_allocated_as_path_set(::gobgpapi::MatchSet* as_path_set) {
  delete as_path_set_;
  as_path_set_ = as_path_set;
  if (as_path_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.as_path_set)
}

// optional .gobgpapi.MatchSet community_set = 5;
inline bool Conditions::has_community_set() const {
  return !_is_default_instance_ && community_set_ != NULL;
}
inline void Conditions::clear_community_set() {
  if (GetArenaNoVirtual() == NULL && community_set_ != NULL) delete community_set_;
  community_set_ = NULL;
}
inline const ::gobgpapi::MatchSet& Conditions::community_set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.community_set)
  return community_set_ != NULL ? *community_set_ : *default_instance_->community_set_;
}
inline ::gobgpapi::MatchSet* Conditions::mutable_community_set() {
  
  if (community_set_ == NULL) {
    community_set_ = new ::gobgpapi::MatchSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.community_set)
  return community_set_;
}
inline ::gobgpapi::MatchSet* Conditions::release_community_set() {
  
  ::gobgpapi::MatchSet* temp = community_set_;
  community_set_ = NULL;
  return temp;
}
inline void Conditions::set_allocated_community_set(::gobgpapi::MatchSet* community_set) {
  delete community_set_;
  community_set_ = community_set;
  if (community_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.community_set)
}

// optional .gobgpapi.MatchSet ext_community_set = 6;
inline bool Conditions::has_ext_community_set() const {
  return !_is_default_instance_ && ext_community_set_ != NULL;
}
inline void Conditions::clear_ext_community_set() {
  if (GetArenaNoVirtual() == NULL && ext_community_set_ != NULL) delete ext_community_set_;
  ext_community_set_ = NULL;
}
inline const ::gobgpapi::MatchSet& Conditions::ext_community_set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.ext_community_set)
  return ext_community_set_ != NULL ? *ext_community_set_ : *default_instance_->ext_community_set_;
}
inline ::gobgpapi::MatchSet* Conditions::mutable_ext_community_set() {
  
  if (ext_community_set_ == NULL) {
    ext_community_set_ = new ::gobgpapi::MatchSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.ext_community_set)
  return ext_community_set_;
}
inline ::gobgpapi::MatchSet* Conditions::release_ext_community_set() {
  
  ::gobgpapi::MatchSet* temp = ext_community_set_;
  ext_community_set_ = NULL;
  return temp;
}
inline void Conditions::set_allocated_ext_community_set(::gobgpapi::MatchSet* ext_community_set) {
  delete ext_community_set_;
  ext_community_set_ = ext_community_set;
  if (ext_community_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.ext_community_set)
}

// optional int32 rpki_result = 7;
inline void Conditions::clear_rpki_result() {
  rpki_result_ = 0;
}
inline ::google::protobuf::int32 Conditions::rpki_result() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.rpki_result)
  return rpki_result_;
}
inline void Conditions::set_rpki_result(::google::protobuf::int32 value) {
  
  rpki_result_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Conditions.rpki_result)
}

// -------------------------------------------------------------------

// CommunityAction

// optional .gobgpapi.CommunityActionType type = 1;
inline void CommunityAction::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::CommunityActionType CommunityAction::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.CommunityAction.type)
  return static_cast< ::gobgpapi::CommunityActionType >(type_);
}
inline void CommunityAction::set_type(::gobgpapi::CommunityActionType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.CommunityAction.type)
}

// repeated string communities = 2;
inline int CommunityAction::communities_size() const {
  return communities_.size();
}
inline void CommunityAction::clear_communities() {
  communities_.Clear();
}
inline const ::std::string& CommunityAction::communities(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.CommunityAction.communities)
  return communities_.Get(index);
}
inline ::std::string* CommunityAction::mutable_communities(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.CommunityAction.communities)
  return communities_.Mutable(index);
}
inline void CommunityAction::set_communities(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.CommunityAction.communities)
  communities_.Mutable(index)->assign(value);
}
inline void CommunityAction::set_communities(int index, const char* value) {
  communities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.CommunityAction.communities)
}
inline void CommunityAction::set_communities(int index, const char* value, size_t size) {
  communities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.CommunityAction.communities)
}
inline ::std::string* CommunityAction::add_communities() {
  return communities_.Add();
}
inline void CommunityAction::add_communities(const ::std::string& value) {
  communities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.CommunityAction.communities)
}
inline void CommunityAction::add_communities(const char* value) {
  communities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.CommunityAction.communities)
}
inline void CommunityAction::add_communities(const char* value, size_t size) {
  communities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.CommunityAction.communities)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommunityAction::communities() const {
  // @@protoc_insertion_point(field_list:gobgpapi.CommunityAction.communities)
  return communities_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommunityAction::mutable_communities() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.CommunityAction.communities)
  return &communities_;
}

// -------------------------------------------------------------------

// MedAction

// optional .gobgpapi.MedActionType type = 1;
inline void MedAction::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::MedActionType MedAction::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MedAction.type)
  return static_cast< ::gobgpapi::MedActionType >(type_);
}
inline void MedAction::set_type(::gobgpapi::MedActionType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MedAction.type)
}

// optional int64 value = 2;
inline void MedAction::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MedAction::value() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MedAction.value)
  return value_;
}
inline void MedAction::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MedAction.value)
}

// -------------------------------------------------------------------

// AsPrependAction

// optional uint32 asn = 1;
inline void AsPrependAction::clear_asn() {
  asn_ = 0u;
}
inline ::google::protobuf::uint32 AsPrependAction::asn() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPrependAction.asn)
  return asn_;
}
inline void AsPrependAction::set_asn(::google::protobuf::uint32 value) {
  
  asn_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AsPrependAction.asn)
}

// optional uint32 repeat = 2;
inline void AsPrependAction::clear_repeat() {
  repeat_ = 0u;
}
inline ::google::protobuf::uint32 AsPrependAction::repeat() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPrependAction.repeat)
  return repeat_;
}
inline void AsPrependAction::set_repeat(::google::protobuf::uint32 value) {
  
  repeat_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AsPrependAction.repeat)
}

// optional bool use_left_most = 3;
inline void AsPrependAction::clear_use_left_most() {
  use_left_most_ = false;
}
inline bool AsPrependAction::use_left_most() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPrependAction.use_left_most)
  return use_left_most_;
}
inline void AsPrependAction::set_use_left_most(bool value) {
  
  use_left_most_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AsPrependAction.use_left_most)
}

// -------------------------------------------------------------------

// Actions

// optional .gobgpapi.RouteAction route_action = 1;
inline void Actions::clear_route_action() {
  route_action_ = 0;
}
inline ::gobgpapi::RouteAction Actions::route_action() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.route_action)
  return static_cast< ::gobgpapi::RouteAction >(route_action_);
}
inline void Actions::set_route_action(::gobgpapi::RouteAction value) {
  
  route_action_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Actions.route_action)
}

// optional .gobgpapi.CommunityAction community = 2;
inline bool Actions::has_community() const {
  return !_is_default_instance_ && community_ != NULL;
}
inline void Actions::clear_community() {
  if (GetArenaNoVirtual() == NULL && community_ != NULL) delete community_;
  community_ = NULL;
}
inline const ::gobgpapi::CommunityAction& Actions::community() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.community)
  return community_ != NULL ? *community_ : *default_instance_->community_;
}
inline ::gobgpapi::CommunityAction* Actions::mutable_community() {
  
  if (community_ == NULL) {
    community_ = new ::gobgpapi::CommunityAction;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.community)
  return community_;
}
inline ::gobgpapi::CommunityAction* Actions::release_community() {
  
  ::gobgpapi::CommunityAction* temp = community_;
  community_ = NULL;
  return temp;
}
inline void Actions::set_allocated_community(::gobgpapi::CommunityAction* community) {
  delete community_;
  community_ = community;
  if (community) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.community)
}

// optional .gobgpapi.MedAction med = 3;
inline bool Actions::has_med() const {
  return !_is_default_instance_ && med_ != NULL;
}
inline void Actions::clear_med() {
  if (GetArenaNoVirtual() == NULL && med_ != NULL) delete med_;
  med_ = NULL;
}
inline const ::gobgpapi::MedAction& Actions::med() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.med)
  return med_ != NULL ? *med_ : *default_instance_->med_;
}
inline ::gobgpapi::MedAction* Actions::mutable_med() {
  
  if (med_ == NULL) {
    med_ = new ::gobgpapi::MedAction;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.med)
  return med_;
}
inline ::gobgpapi::MedAction* Actions::release_med() {
  
  ::gobgpapi::MedAction* temp = med_;
  med_ = NULL;
  return temp;
}
inline void Actions::set_allocated_med(::gobgpapi::MedAction* med) {
  delete med_;
  med_ = med;
  if (med) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.med)
}

// optional .gobgpapi.AsPrependAction as_prepend = 4;
inline bool Actions::has_as_prepend() const {
  return !_is_default_instance_ && as_prepend_ != NULL;
}
inline void Actions::clear_as_prepend() {
  if (GetArenaNoVirtual() == NULL && as_prepend_ != NULL) delete as_prepend_;
  as_prepend_ = NULL;
}
inline const ::gobgpapi::AsPrependAction& Actions::as_prepend() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.as_prepend)
  return as_prepend_ != NULL ? *as_prepend_ : *default_instance_->as_prepend_;
}
inline ::gobgpapi::AsPrependAction* Actions::mutable_as_prepend() {
  
  if (as_prepend_ == NULL) {
    as_prepend_ = new ::gobgpapi::AsPrependAction;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.as_prepend)
  return as_prepend_;
}
inline ::gobgpapi::AsPrependAction* Actions::release_as_prepend() {
  
  ::gobgpapi::AsPrependAction* temp = as_prepend_;
  as_prepend_ = NULL;
  return temp;
}
inline void Actions::set_allocated_as_prepend(::gobgpapi::AsPrependAction* as_prepend) {
  delete as_prepend_;
  as_prepend_ = as_prepend;
  if (as_prepend) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.as_prepend)
}

// optional .gobgpapi.CommunityAction ext_community = 5;
inline bool Actions::has_ext_community() const {
  return !_is_default_instance_ && ext_community_ != NULL;
}
inline void Actions::clear_ext_community() {
  if (GetArenaNoVirtual() == NULL && ext_community_ != NULL) delete ext_community_;
  ext_community_ = NULL;
}
inline const ::gobgpapi::CommunityAction& Actions::ext_community() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.ext_community)
  return ext_community_ != NULL ? *ext_community_ : *default_instance_->ext_community_;
}
inline ::gobgpapi::CommunityAction* Actions::mutable_ext_community() {
  
  if (ext_community_ == NULL) {
    ext_community_ = new ::gobgpapi::CommunityAction;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.ext_community)
  return ext_community_;
}
inline ::gobgpapi::CommunityAction* Actions::release_ext_community() {
  
  ::gobgpapi::CommunityAction* temp = ext_community_;
  ext_community_ = NULL;
  return temp;
}
inline void Actions::set_allocated_ext_community(::gobgpapi::CommunityAction* ext_community) {
  delete ext_community_;
  ext_community_ = ext_community;
  if (ext_community) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.ext_community)
}

// -------------------------------------------------------------------

// Statement

// optional string name = 1;
inline void Statement::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Statement::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Statement.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Statement::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Statement.name)
}
inline void Statement::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Statement.name)
}
inline void Statement::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Statement.name)
}
inline ::std::string* Statement::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Statement.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Statement::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Statement::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Statement.name)
}

// optional .gobgpapi.Conditions conditions = 2;
inline bool Statement::has_conditions() const {
  return !_is_default_instance_ && conditions_ != NULL;
}
inline void Statement::clear_conditions() {
  if (GetArenaNoVirtual() == NULL && conditions_ != NULL) delete conditions_;
  conditions_ = NULL;
}
inline const ::gobgpapi::Conditions& Statement::conditions() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Statement.conditions)
  return conditions_ != NULL ? *conditions_ : *default_instance_->conditions_;
}
inline ::gobgpapi::Conditions* Statement::mutable_conditions() {
  
  if (conditions_ == NULL) {
    conditions_ = new ::gobgpapi::Conditions;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Statement.conditions)
  return conditions_;
}
inline ::gobgpapi::Conditions* Statement::release_conditions() {
  
  ::gobgpapi::Conditions* temp = conditions_;
  conditions_ = NULL;
  return temp;
}
inline void Statement::set_allocated_conditions(::gobgpapi::Conditions* conditions) {
  delete conditions_;
  conditions_ = conditions;
  if (conditions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Statement.conditions)
}

// optional .gobgpapi.Actions actions = 3;
inline bool Statement::has_actions() const {
  return !_is_default_instance_ && actions_ != NULL;
}
inline void Statement::clear_actions() {
  if (GetArenaNoVirtual() == NULL && actions_ != NULL) delete actions_;
  actions_ = NULL;
}
inline const ::gobgpapi::Actions& Statement::actions() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Statement.actions)
  return actions_ != NULL ? *actions_ : *default_instance_->actions_;
}
inline ::gobgpapi::Actions* Statement::mutable_actions() {
  
  if (actions_ == NULL) {
    actions_ = new ::gobgpapi::Actions;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Statement.actions)
  return actions_;
}
inline ::gobgpapi::Actions* Statement::release_actions() {
  
  ::gobgpapi::Actions* temp = actions_;
  actions_ = NULL;
  return temp;
}
inline void Statement::set_allocated_actions(::gobgpapi::Actions* actions) {
  delete actions_;
  actions_ = actions;
  if (actions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Statement.actions)
}

// -------------------------------------------------------------------

// Policy

// optional string name = 1;
inline void Policy::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Policy::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Policy.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Policy::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Policy.name)
}
inline void Policy::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Policy.name)
}
inline void Policy::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Policy.name)
}
inline ::std::string* Policy::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Policy.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Policy::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Policy::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Policy.name)
}

// repeated .gobgpapi.Statement statements = 2;
inline int Policy::statements_size() const {
  return statements_.size();
}
inline void Policy::clear_statements() {
  statements_.Clear();
}
inline const ::gobgpapi::Statement& Policy::statements(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Policy.statements)
  return statements_.Get(index);
}
inline ::gobgpapi::Statement* Policy::mutable_statements(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Policy.statements)
  return statements_.Mutable(index);
}
inline ::gobgpapi::Statement* Policy::add_statements() {
  // @@protoc_insertion_point(field_add:gobgpapi.Policy.statements)
  return statements_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Statement >*
Policy::mutable_statements() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Policy.statements)
  return &statements_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Statement >&
Policy::statements() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Policy.statements)
  return statements_;
}

// -------------------------------------------------------------------

// PolicyAssignment

// optional .gobgpapi.PolicyType type = 1;
inline void PolicyAssignment::clear_type() {
  type_ = 0;
}
inline ::gobgpapi::PolicyType PolicyAssignment::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PolicyAssignment.type)
  return static_cast< ::gobgpapi::PolicyType >(type_);
}
inline void PolicyAssignment::set_type(::gobgpapi::PolicyType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PolicyAssignment.type)
}

// optional .gobgpapi.Resource resource = 2;
inline void PolicyAssignment::clear_resource() {
  resource_ = 0;
}
inline ::gobgpapi::Resource PolicyAssignment::resource() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PolicyAssignment.resource)
  return static_cast< ::gobgpapi::Resource >(resource_);
}
inline void PolicyAssignment::set_resource(::gobgpapi::Resource value) {
  
  resource_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PolicyAssignment.resource)
}

// optional string name = 3;
inline void PolicyAssignment::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PolicyAssignment::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PolicyAssignment.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyAssignment::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PolicyAssignment.name)
}
inline void PolicyAssignment::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PolicyAssignment.name)
}
inline void PolicyAssignment::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PolicyAssignment.name)
}
inline ::std::string* PolicyAssignment::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PolicyAssignment.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PolicyAssignment::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PolicyAssignment::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PolicyAssignment.name)
}

// repeated .gobgpapi.Policy policies = 4;
inline int PolicyAssignment::policies_size() const {
  return policies_.size();
}
inline void PolicyAssignment::clear_policies() {
  policies_.Clear();
}
inline const ::gobgpapi::Policy& PolicyAssignment::policies(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.PolicyAssignment.policies)
  return policies_.Get(index);
}
inline ::gobgpapi::Policy* PolicyAssignment::mutable_policies(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PolicyAssignment.policies)
  return policies_.Mutable(index);
}
inline ::gobgpapi::Policy* PolicyAssignment::add_policies() {
  // @@protoc_insertion_point(field_add:gobgpapi.PolicyAssignment.policies)
  return policies_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::Policy >*
PolicyAssignment::mutable_policies() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.PolicyAssignment.policies)
  return &policies_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Policy >&
PolicyAssignment::policies() const {
  // @@protoc_insertion_point(field_list:gobgpapi.PolicyAssignment.policies)
  return policies_;
}

// optional .gobgpapi.RouteAction default = 5;
inline void PolicyAssignment::clear_default_() {
  default__ = 0;
}
inline ::gobgpapi::RouteAction PolicyAssignment::default_() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PolicyAssignment.default)
  return static_cast< ::gobgpapi::RouteAction >(default__);
}
inline void PolicyAssignment::set_default_(::gobgpapi::RouteAction value) {
  
  default__ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PolicyAssignment.default)
}

// -------------------------------------------------------------------

// MrtMessage

// optional bytes data = 1;
inline void MrtMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MrtMessage::data() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MrtMessage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MrtMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.MrtMessage.data)
}
inline void MrtMessage::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.MrtMessage.data)
}
inline void MrtMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.MrtMessage.data)
}
inline ::std::string* MrtMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.MrtMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MrtMessage::release_data() {
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MrtMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.MrtMessage.data)
}

// -------------------------------------------------------------------

// RPKIConf

// optional string address = 1;
inline void RPKIConf::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPKIConf::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIConf.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPKIConf::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIConf.address)
}
inline void RPKIConf::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.RPKIConf.address)
}
inline void RPKIConf::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.RPKIConf.address)
}
inline ::std::string* RPKIConf::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.RPKIConf.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPKIConf::release_address() {
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPKIConf::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RPKIConf.address)
}

// optional string remote_port = 2;
inline void RPKIConf::clear_remote_port() {
  remote_port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPKIConf::remote_port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIConf.remote_port)
  return remote_port_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPKIConf::set_remote_port(const ::std::string& value) {
  
  remote_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIConf.remote_port)
}
inline void RPKIConf::set_remote_port(const char* value) {
  
  remote_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.RPKIConf.remote_port)
}
inline void RPKIConf::set_remote_port(const char* value, size_t size) {
  
  remote_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.RPKIConf.remote_port)
}
inline ::std::string* RPKIConf::mutable_remote_port() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.RPKIConf.remote_port)
  return remote_port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPKIConf::release_remote_port() {
  
  return remote_port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPKIConf::set_allocated_remote_port(::std::string* remote_port) {
  if (remote_port != NULL) {
    
  } else {
    
  }
  remote_port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_port);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RPKIConf.remote_port)
}

// -------------------------------------------------------------------

// RPKIState

// optional int64 uptime = 1;
inline void RPKIState::clear_uptime() {
  uptime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::uptime() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.uptime)
  return uptime_;
}
inline void RPKIState::set_uptime(::google::protobuf::int64 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.uptime)
}

// optional int64 downtime = 2;
inline void RPKIState::clear_downtime() {
  downtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::downtime() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.downtime)
  return downtime_;
}
inline void RPKIState::set_downtime(::google::protobuf::int64 value) {
  
  downtime_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.downtime)
}

// optional bool up = 3;
inline void RPKIState::clear_up() {
  up_ = false;
}
inline bool RPKIState::up() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.up)
  return up_;
}
inline void RPKIState::set_up(bool value) {
  
  up_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.up)
}

// optional uint32 record_ipv4 = 4;
inline void RPKIState::clear_record_ipv4() {
  record_ipv4_ = 0u;
}
inline ::google::protobuf::uint32 RPKIState::record_ipv4() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.record_ipv4)
  return record_ipv4_;
}
inline void RPKIState::set_record_ipv4(::google::protobuf::uint32 value) {
  
  record_ipv4_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.record_ipv4)
}

// optional uint32 record_ipv6 = 5;
inline void RPKIState::clear_record_ipv6() {
  record_ipv6_ = 0u;
}
inline ::google::protobuf::uint32 RPKIState::record_ipv6() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.record_ipv6)
  return record_ipv6_;
}
inline void RPKIState::set_record_ipv6(::google::protobuf::uint32 value) {
  
  record_ipv6_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.record_ipv6)
}

// optional uint32 prefix_ipv4 = 6;
inline void RPKIState::clear_prefix_ipv4() {
  prefix_ipv4_ = 0u;
}
inline ::google::protobuf::uint32 RPKIState::prefix_ipv4() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.prefix_ipv4)
  return prefix_ipv4_;
}
inline void RPKIState::set_prefix_ipv4(::google::protobuf::uint32 value) {
  
  prefix_ipv4_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.prefix_ipv4)
}

// optional uint32 prefix_ipv6 = 7;
inline void RPKIState::clear_prefix_ipv6() {
  prefix_ipv6_ = 0u;
}
inline ::google::protobuf::uint32 RPKIState::prefix_ipv6() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.prefix_ipv6)
  return prefix_ipv6_;
}
inline void RPKIState::set_prefix_ipv6(::google::protobuf::uint32 value) {
  
  prefix_ipv6_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.prefix_ipv6)
}

// optional uint32 serial = 8;
inline void RPKIState::clear_serial() {
  serial_ = 0u;
}
inline ::google::protobuf::uint32 RPKIState::serial() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.serial)
  return serial_;
}
inline void RPKIState::set_serial(::google::protobuf::uint32 value) {
  
  serial_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.serial)
}

// optional int64 received_ipv4 = 9;
inline void RPKIState::clear_received_ipv4() {
  received_ipv4_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::received_ipv4() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.received_ipv4)
  return received_ipv4_;
}
inline void RPKIState::set_received_ipv4(::google::protobuf::int64 value) {
  
  received_ipv4_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.received_ipv4)
}

// optional int64 received_ipv6 = 10;
inline void RPKIState::clear_received_ipv6() {
  received_ipv6_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::received_ipv6() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.received_ipv6)
  return received_ipv6_;
}
inline void RPKIState::set_received_ipv6(::google::protobuf::int64 value) {
  
  received_ipv6_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.received_ipv6)
}

// optional int64 serial_notify = 11;
inline void RPKIState::clear_serial_notify() {
  serial_notify_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::serial_notify() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.serial_notify)
  return serial_notify_;
}
inline void RPKIState::set_serial_notify(::google::protobuf::int64 value) {
  
  serial_notify_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.serial_notify)
}

// optional int64 cache_reset = 12;
inline void RPKIState::clear_cache_reset() {
  cache_reset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::cache_reset() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.cache_reset)
  return cache_reset_;
}
inline void RPKIState::set_cache_reset(::google::protobuf::int64 value) {
  
  cache_reset_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.cache_reset)
}

// optional int64 cache_response = 13;
inline void RPKIState::clear_cache_response() {
  cache_response_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::cache_response() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.cache_response)
  return cache_response_;
}
inline void RPKIState::set_cache_response(::google::protobuf::int64 value) {
  
  cache_response_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.cache_response)
}

// optional int64 end_of_data = 14;
inline void RPKIState::clear_end_of_data() {
  end_of_data_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::end_of_data() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.end_of_data)
  return end_of_data_;
}
inline void RPKIState::set_end_of_data(::google::protobuf::int64 value) {
  
  end_of_data_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.end_of_data)
}

// optional int64 error = 15;
inline void RPKIState::clear_error() {
  error_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::error() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.error)
  return error_;
}
inline void RPKIState::set_error(::google::protobuf::int64 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.error)
}

// optional int64 serial_query = 16;
inline void RPKIState::clear_serial_query() {
  serial_query_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::serial_query() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.serial_query)
  return serial_query_;
}
inline void RPKIState::set_serial_query(::google::protobuf::int64 value) {
  
  serial_query_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.serial_query)
}

// optional int64 reset_query = 17;
inline void RPKIState::clear_reset_query() {
  reset_query_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPKIState::reset_query() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.reset_query)
  return reset_query_;
}
inline void RPKIState::set_reset_query(::google::protobuf::int64 value) {
  
  reset_query_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.reset_query)
}

// -------------------------------------------------------------------

// RPKI

// optional .gobgpapi.RPKIConf conf = 1;
inline bool RPKI::has_conf() const {
  return !_is_default_instance_ && conf_ != NULL;
}
inline void RPKI::clear_conf() {
  if (GetArenaNoVirtual() == NULL && conf_ != NULL) delete conf_;
  conf_ = NULL;
}
inline const ::gobgpapi::RPKIConf& RPKI::conf() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKI.conf)
  return conf_ != NULL ? *conf_ : *default_instance_->conf_;
}
inline ::gobgpapi::RPKIConf* RPKI::mutable_conf() {
  
  if (conf_ == NULL) {
    conf_ = new ::gobgpapi::RPKIConf;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.RPKI.conf)
  return conf_;
}
inline ::gobgpapi::RPKIConf* RPKI::release_conf() {
  
  ::gobgpapi::RPKIConf* temp = conf_;
  conf_ = NULL;
  return temp;
}
inline void RPKI::set_allocated_conf(::gobgpapi::RPKIConf* conf) {
  delete conf_;
  conf_ = conf;
  if (conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RPKI.conf)
}

// optional .gobgpapi.RPKIState state = 2;
inline bool RPKI::has_state() const {
  return !_is_default_instance_ && state_ != NULL;
}
inline void RPKI::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) delete state_;
  state_ = NULL;
}
inline const ::gobgpapi::RPKIState& RPKI::state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKI.state)
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::gobgpapi::RPKIState* RPKI::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::gobgpapi::RPKIState;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.RPKI.state)
  return state_;
}
inline ::gobgpapi::RPKIState* RPKI::release_state() {
  
  ::gobgpapi::RPKIState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void RPKI::set_allocated_state(::gobgpapi::RPKIState* state) {
  delete state_;
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RPKI.state)
}

// -------------------------------------------------------------------

// ROA

// optional uint32 as = 1;
inline void ROA::clear_as() {
  as_ = 0u;
}
inline ::google::protobuf::uint32 ROA::as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROA.as)
  return as_;
}
inline void ROA::set_as(::google::protobuf::uint32 value) {
  
  as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ROA.as)
}

// optional uint32 prefixlen = 2;
inline void ROA::clear_prefixlen() {
  prefixlen_ = 0u;
}
inline ::google::protobuf::uint32 ROA::prefixlen() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROA.prefixlen)
  return prefixlen_;
}
inline void ROA::set_prefixlen(::google::protobuf::uint32 value) {
  
  prefixlen_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ROA.prefixlen)
}

// optional uint32 maxlen = 3;
inline void ROA::clear_maxlen() {
  maxlen_ = 0u;
}
inline ::google::protobuf::uint32 ROA::maxlen() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROA.maxlen)
  return maxlen_;
}
inline void ROA::set_maxlen(::google::protobuf::uint32 value) {
  
  maxlen_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ROA.maxlen)
}

// optional string prefix = 4;
inline void ROA::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ROA::prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROA.prefix)
  return prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ROA::set_prefix(const ::std::string& value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ROA.prefix)
}
inline void ROA::set_prefix(const char* value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ROA.prefix)
}
inline void ROA::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ROA.prefix)
}
inline ::std::string* ROA::mutable_prefix() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ROA.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ROA::release_prefix() {
  
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ROA::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ROA.prefix)
}

// optional .gobgpapi.RPKIConf conf = 5;
inline bool ROA::has_conf() const {
  return !_is_default_instance_ && conf_ != NULL;
}
inline void ROA::clear_conf() {
  if (GetArenaNoVirtual() == NULL && conf_ != NULL) delete conf_;
  conf_ = NULL;
}
inline const ::gobgpapi::RPKIConf& ROA::conf() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROA.conf)
  return conf_ != NULL ? *conf_ : *default_instance_->conf_;
}
inline ::gobgpapi::RPKIConf* ROA::mutable_conf() {
  
  if (conf_ == NULL) {
    conf_ = new ::gobgpapi::RPKIConf;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ROA.conf)
  return conf_;
}
inline ::gobgpapi::RPKIConf* ROA::release_conf() {
  
  ::gobgpapi::RPKIConf* temp = conf_;
  conf_ = NULL;
  return temp;
}
inline void ROA::set_allocated_conf(::gobgpapi::RPKIConf* conf) {
  delete conf_;
  conf_ = conf;
  if (conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ROA.conf)
}

// -------------------------------------------------------------------

// ROAResult

// optional .gobgpapi.ROAResult.ValidationReason reason = 1;
inline void ROAResult::clear_reason() {
  reason_ = 0;
}
inline ::gobgpapi::ROAResult_ValidationReason ROAResult::reason() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROAResult.reason)
  return static_cast< ::gobgpapi::ROAResult_ValidationReason >(reason_);
}
inline void ROAResult::set_reason(::gobgpapi::ROAResult_ValidationReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ROAResult.reason)
}

// optional string address = 2;
inline void ROAResult::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ROAResult::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROAResult.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ROAResult::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ROAResult.address)
}
inline void ROAResult::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ROAResult.address)
}
inline void ROAResult::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ROAResult.address)
}
inline ::std::string* ROAResult::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ROAResult.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ROAResult::release_address() {
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ROAResult::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ROAResult.address)
}

// optional int64 timestamp = 3;
inline void ROAResult::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ROAResult::timestamp() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROAResult.timestamp)
  return timestamp_;
}
inline void ROAResult::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ROAResult.timestamp)
}

// optional bytes aspath_attr = 4;
inline void ROAResult::clear_aspath_attr() {
  aspath_attr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ROAResult::aspath_attr() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROAResult.aspath_attr)
  return aspath_attr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ROAResult::set_aspath_attr(const ::std::string& value) {
  
  aspath_attr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ROAResult.aspath_attr)
}
inline void ROAResult::set_aspath_attr(const char* value) {
  
  aspath_attr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ROAResult.aspath_attr)
}
inline void ROAResult::set_aspath_attr(const void* value, size_t size) {
  
  aspath_attr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ROAResult.aspath_attr)
}
inline ::std::string* ROAResult::mutable_aspath_attr() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ROAResult.aspath_attr)
  return aspath_attr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ROAResult::release_aspath_attr() {
  
  return aspath_attr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ROAResult::set_allocated_aspath_attr(::std::string* aspath_attr) {
  if (aspath_attr != NULL) {
    
  } else {
    
  }
  aspath_attr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aspath_attr);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ROAResult.aspath_attr)
}

// optional uint32 origin_as = 5;
inline void ROAResult::clear_origin_as() {
  origin_as_ = 0u;
}
inline ::google::protobuf::uint32 ROAResult::origin_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROAResult.origin_as)
  return origin_as_;
}
inline void ROAResult::set_origin_as(::google::protobuf::uint32 value) {
  
  origin_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ROAResult.origin_as)
}

// optional string prefix = 6;
inline void ROAResult::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ROAResult::prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROAResult.prefix)
  return prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ROAResult::set_prefix(const ::std::string& value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ROAResult.prefix)
}
inline void ROAResult::set_prefix(const char* value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ROAResult.prefix)
}
inline void ROAResult::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ROAResult.prefix)
}
inline ::std::string* ROAResult::mutable_prefix() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ROAResult.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ROAResult::release_prefix() {
  
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ROAResult::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ROAResult.prefix)
}

// optional .gobgpapi.ROAResult.ValidationResult old_result = 7;
inline void ROAResult::clear_old_result() {
  old_result_ = 0;
}
inline ::gobgpapi::ROAResult_ValidationResult ROAResult::old_result() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROAResult.old_result)
  return static_cast< ::gobgpapi::ROAResult_ValidationResult >(old_result_);
}
inline void ROAResult::set_old_result(::gobgpapi::ROAResult_ValidationResult value) {
  
  old_result_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ROAResult.old_result)
}

// optional .gobgpapi.ROAResult.ValidationResult new_result = 8;
inline void ROAResult::clear_new_result() {
  new_result_ = 0;
}
inline ::gobgpapi::ROAResult_ValidationResult ROAResult::new_result() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROAResult.new_result)
  return static_cast< ::gobgpapi::ROAResult_ValidationResult >(new_result_);
}
inline void ROAResult::set_new_result(::gobgpapi::ROAResult_ValidationResult value) {
  
  new_result_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ROAResult.new_result)
}

// repeated .gobgpapi.ROA roas = 9;
inline int ROAResult::roas_size() const {
  return roas_.size();
}
inline void ROAResult::clear_roas() {
  roas_.Clear();
}
inline const ::gobgpapi::ROA& ROAResult::roas(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROAResult.roas)
  return roas_.Get(index);
}
inline ::gobgpapi::ROA* ROAResult::mutable_roas(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ROAResult.roas)
  return roas_.Mutable(index);
}
inline ::gobgpapi::ROA* ROAResult::add_roas() {
  // @@protoc_insertion_point(field_add:gobgpapi.ROAResult.roas)
  return roas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gobgpapi::ROA >*
ROAResult::mutable_roas() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.ROAResult.roas)
  return &roas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gobgpapi::ROA >&
ROAResult::roas() const {
  // @@protoc_insertion_point(field_list:gobgpapi.ROAResult.roas)
  return roas_;
}

// -------------------------------------------------------------------

// Vrf

// optional string name = 1;
inline void Vrf::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vrf::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Vrf.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vrf::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Vrf.name)
}
inline void Vrf::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Vrf.name)
}
inline void Vrf::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Vrf.name)
}
inline ::std::string* Vrf::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Vrf.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vrf::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vrf::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Vrf.name)
}

// optional bytes rd = 2;
inline void Vrf::clear_rd() {
  rd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vrf::rd() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Vrf.rd)
  return rd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vrf::set_rd(const ::std::string& value) {
  
  rd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Vrf.rd)
}
inline void Vrf::set_rd(const char* value) {
  
  rd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Vrf.rd)
}
inline void Vrf::set_rd(const void* value, size_t size) {
  
  rd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Vrf.rd)
}
inline ::std::string* Vrf::mutable_rd() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Vrf.rd)
  return rd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vrf::release_rd() {
  
  return rd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vrf::set_allocated_rd(::std::string* rd) {
  if (rd != NULL) {
    
  } else {
    
  }
  rd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rd);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Vrf.rd)
}

// repeated bytes import_rt = 3;
inline int Vrf::import_rt_size() const {
  return import_rt_.size();
}
inline void Vrf::clear_import_rt() {
  import_rt_.Clear();
}
inline const ::std::string& Vrf::import_rt(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Vrf.import_rt)
  return import_rt_.Get(index);
}
inline ::std::string* Vrf::mutable_import_rt(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Vrf.import_rt)
  return import_rt_.Mutable(index);
}
inline void Vrf::set_import_rt(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Vrf.import_rt)
  import_rt_.Mutable(index)->assign(value);
}
inline void Vrf::set_import_rt(int index, const char* value) {
  import_rt_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.Vrf.import_rt)
}
inline void Vrf::set_import_rt(int index, const void* value, size_t size) {
  import_rt_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Vrf.import_rt)
}
inline ::std::string* Vrf::add_import_rt() {
  return import_rt_.Add();
}
inline void Vrf::add_import_rt(const ::std::string& value) {
  import_rt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Vrf.import_rt)
}
inline void Vrf::add_import_rt(const char* value) {
  import_rt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.Vrf.import_rt)
}
inline void Vrf::add_import_rt(const void* value, size_t size) {
  import_rt_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.Vrf.import_rt)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Vrf::import_rt() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Vrf.import_rt)
  return import_rt_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Vrf::mutable_import_rt() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Vrf.import_rt)
  return &import_rt_;
}

// repeated bytes export_rt = 4;
inline int Vrf::export_rt_size() const {
  return export_rt_.size();
}
inline void Vrf::clear_export_rt() {
  export_rt_.Clear();
}
inline const ::std::string& Vrf::export_rt(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Vrf.export_rt)
  return export_rt_.Get(index);
}
inline ::std::string* Vrf::mutable_export_rt(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Vrf.export_rt)
  return export_rt_.Mutable(index);
}
inline void Vrf::set_export_rt(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Vrf.export_rt)
  export_rt_.Mutable(index)->assign(value);
}
inline void Vrf::set_export_rt(int index, const char* value) {
  export_rt_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.Vrf.export_rt)
}
inline void Vrf::set_export_rt(int index, const void* value, size_t size) {
  export_rt_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Vrf.export_rt)
}
inline ::std::string* Vrf::add_export_rt() {
  return export_rt_.Add();
}
inline void Vrf::add_export_rt(const ::std::string& value) {
  export_rt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Vrf.export_rt)
}
inline void Vrf::add_export_rt(const char* value) {
  export_rt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.Vrf.export_rt)
}
inline void Vrf::add_export_rt(const void* value, size_t size) {
  export_rt_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.Vrf.export_rt)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Vrf::export_rt() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Vrf.export_rt)
  return export_rt_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Vrf::mutable_export_rt() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Vrf.export_rt)
  return &export_rt_;
}

// -------------------------------------------------------------------

// Global

// optional uint32 as = 1;
inline void Global::clear_as() {
  as_ = 0u;
}
inline ::google::protobuf::uint32 Global::as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.as)
  return as_;
}
inline void Global::set_as(::google::protobuf::uint32 value) {
  
  as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Global.as)
}

// optional string router_id = 2;
inline void Global::clear_router_id() {
  router_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Global::router_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.router_id)
  return router_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Global::set_router_id(const ::std::string& value) {
  
  router_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Global.router_id)
}
inline void Global::set_router_id(const char* value) {
  
  router_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Global.router_id)
}
inline void Global::set_router_id(const char* value, size_t size) {
  
  router_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Global.router_id)
}
inline ::std::string* Global::mutable_router_id() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Global.router_id)
  return router_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Global::release_router_id() {
  
  return router_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Global::set_allocated_router_id(::std::string* router_id) {
  if (router_id != NULL) {
    
  } else {
    
  }
  router_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), router_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Global.router_id)
}

// optional int32 listen_port = 3;
inline void Global::clear_listen_port() {
  listen_port_ = 0;
}
inline ::google::protobuf::int32 Global::listen_port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.listen_port)
  return listen_port_;
}
inline void Global::set_listen_port(::google::protobuf::int32 value) {
  
  listen_port_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Global.listen_port)
}

// repeated string listen_addresses = 4;
inline int Global::listen_addresses_size() const {
  return listen_addresses_.size();
}
inline void Global::clear_listen_addresses() {
  listen_addresses_.Clear();
}
inline const ::std::string& Global::listen_addresses(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.listen_addresses)
  return listen_addresses_.Get(index);
}
inline ::std::string* Global::mutable_listen_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Global.listen_addresses)
  return listen_addresses_.Mutable(index);
}
inline void Global::set_listen_addresses(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Global.listen_addresses)
  listen_addresses_.Mutable(index)->assign(value);
}
inline void Global::set_listen_addresses(int index, const char* value) {
  listen_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.Global.listen_addresses)
}
inline void Global::set_listen_addresses(int index, const char* value, size_t size) {
  listen_addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Global.listen_addresses)
}
inline ::std::string* Global::add_listen_addresses() {
  return listen_addresses_.Add();
}
inline void Global::add_listen_addresses(const ::std::string& value) {
  listen_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Global.listen_addresses)
}
inline void Global::add_listen_addresses(const char* value) {
  listen_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.Global.listen_addresses)
}
inline void Global::add_listen_addresses(const char* value, size_t size) {
  listen_addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.Global.listen_addresses)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Global::listen_addresses() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Global.listen_addresses)
  return listen_addresses_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Global::mutable_listen_addresses() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Global.listen_addresses)
  return &listen_addresses_;
}

// repeated uint32 families = 5;
inline int Global::families_size() const {
  return families_.size();
}
inline void Global::clear_families() {
  families_.Clear();
}
inline ::google::protobuf::uint32 Global::families(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.families)
  return families_.Get(index);
}
inline void Global::set_families(int index, ::google::protobuf::uint32 value) {
  families_.Set(index, value);
  // @@protoc_insertion_point(field_set:gobgpapi.Global.families)
}
inline void Global::add_families(::google::protobuf::uint32 value) {
  families_.Add(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Global.families)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Global::families() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Global.families)
  return families_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Global::mutable_families() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Global.families)
  return &families_;
}

// optional uint32 mpls_label_min = 6;
inline void Global::clear_mpls_label_min() {
  mpls_label_min_ = 0u;
}
inline ::google::protobuf::uint32 Global::mpls_label_min() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.mpls_label_min)
  return mpls_label_min_;
}
inline void Global::set_mpls_label_min(::google::protobuf::uint32 value) {
  
  mpls_label_min_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Global.mpls_label_min)
}

// optional uint32 mpls_label_max = 7;
inline void Global::clear_mpls_label_max() {
  mpls_label_max_ = 0u;
}
inline ::google::protobuf::uint32 Global::mpls_label_max() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.mpls_label_max)
  return mpls_label_max_;
}
inline void Global::set_mpls_label_max(::google::protobuf::uint32 value) {
  
  mpls_label_max_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Global.mpls_label_max)
}

// optional bool collector = 8;
inline void Global::clear_collector() {
  collector_ = false;
}
inline bool Global::collector() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.collector)
  return collector_;
}
inline void Global::set_collector(bool value) {
  
  collector_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Global.collector)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gobgpapi

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gobgpapi::Error_ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::Error_ErrorCode>() {
  return ::gobgpapi::Error_ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::ModBmpArguments_MonitoringPolicy> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::ModBmpArguments_MonitoringPolicy>() {
  return ::gobgpapi::ModBmpArguments_MonitoringPolicy_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::ROAResult_ValidationReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::ROAResult_ValidationReason>() {
  return ::gobgpapi::ROAResult_ValidationReason_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::ROAResult_ValidationResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::ROAResult_ValidationResult>() {
  return ::gobgpapi::ROAResult_ValidationResult_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::Resource> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::Resource>() {
  return ::gobgpapi::Resource_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::Operation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::Operation>() {
  return ::gobgpapi::Operation_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::DefinedType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::DefinedType>() {
  return ::gobgpapi::DefinedType_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::MatchType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::MatchType>() {
  return ::gobgpapi::MatchType_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::AsPathLengthType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::AsPathLengthType>() {
  return ::gobgpapi::AsPathLengthType_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::RouteAction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::RouteAction>() {
  return ::gobgpapi::RouteAction_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::CommunityActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::CommunityActionType>() {
  return ::gobgpapi::CommunityActionType_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::MedActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::MedActionType>() {
  return ::gobgpapi::MedActionType_descriptor();
}
template <> struct is_proto_enum< ::gobgpapi::PolicyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gobgpapi::PolicyType>() {
  return ::gobgpapi::PolicyType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gobgp_5fapi_5fclient_2eproto__INCLUDED
