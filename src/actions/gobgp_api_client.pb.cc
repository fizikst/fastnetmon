// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gobgp_api_client.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gobgp_api_client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gobgpapi {

namespace {

const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Error_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Arguments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Arguments_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModPathArguments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModPathArguments_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModPathResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModPathResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModPathsArguments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModPathsArguments_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModNeighborArguments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModNeighborArguments_reflection_ = NULL;
const ::google::protobuf::Descriptor* MrtArguments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MrtArguments_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModMrtArguments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModMrtArguments_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModBmpArguments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModBmpArguments_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ModBmpArguments_MonitoringPolicy_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ModRpkiArguments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModRpkiArguments_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModVrfArguments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModVrfArguments_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModDefinedSetArguments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModDefinedSetArguments_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModStatementArguments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModStatementArguments_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModPolicyArguments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModPolicyArguments_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModPolicyAssignmentArguments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModPolicyAssignmentArguments_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModGlobalConfigArguments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModGlobalConfigArguments_reflection_ = NULL;
const ::google::protobuf::Descriptor* Path_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Path_reflection_ = NULL;
const ::google::protobuf::Descriptor* Destination_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Destination_reflection_ = NULL;
const ::google::protobuf::Descriptor* Table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Table_reflection_ = NULL;
const ::google::protobuf::Descriptor* Peer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Peer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* EbgpMultihop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EbgpMultihop_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouteReflector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouteReflector_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Messages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Messages_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* Queues_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Queues_reflection_ = NULL;
const ::google::protobuf::Descriptor* Timers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Timers_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimersConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimersConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimersState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimersState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transport_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouteServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouteServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Prefix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Prefix_reflection_ = NULL;
const ::google::protobuf::Descriptor* DefinedSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DefinedSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* AsPathLength_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AsPathLength_reflection_ = NULL;
const ::google::protobuf::Descriptor* Conditions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Conditions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommunityAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommunityAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MedAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MedAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* AsPrependAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AsPrependAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* Actions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Actions_reflection_ = NULL;
const ::google::protobuf::Descriptor* Statement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Statement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Policy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Policy_reflection_ = NULL;
const ::google::protobuf::Descriptor* PolicyAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PolicyAssignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* MrtMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MrtMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RPKIConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RPKIConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* RPKIState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RPKIState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RPKI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RPKI_reflection_ = NULL;
const ::google::protobuf::Descriptor* ROA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ROA_reflection_ = NULL;
const ::google::protobuf::Descriptor* ROAResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ROAResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ROAResult_ValidationReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ROAResult_ValidationResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Vrf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vrf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Global_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Global_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Resource_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Operation_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DefinedType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MatchType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AsPathLengthType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RouteAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommunityActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MedActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PolicyType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto() {
  protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gobgp_api_client.proto");
  GOOGLE_CHECK(file != NULL);
  Error_descriptor_ = file->message_type(0);
  static const int Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, msg_),
  };
  Error_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      -1,
      -1,
      -1,
      sizeof(Error),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _is_default_instance_));
  Error_ErrorCode_descriptor_ = Error_descriptor_->enum_type(0);
  Arguments_descriptor_ = file->message_type(1);
  static const int Arguments_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arguments, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arguments, family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arguments, name_),
  };
  Arguments_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Arguments_descriptor_,
      Arguments::default_instance_,
      Arguments_offsets_,
      -1,
      -1,
      -1,
      sizeof(Arguments),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arguments, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arguments, _is_default_instance_));
  ModPathArguments_descriptor_ = file->message_type(2);
  static const int ModPathArguments_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPathArguments, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPathArguments, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPathArguments, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPathArguments, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPathArguments, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPathArguments, family_),
  };
  ModPathArguments_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModPathArguments_descriptor_,
      ModPathArguments::default_instance_,
      ModPathArguments_offsets_,
      -1,
      -1,
      -1,
      sizeof(ModPathArguments),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPathArguments, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPathArguments, _is_default_instance_));
  ModPathResponse_descriptor_ = file->message_type(3);
  static const int ModPathResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPathResponse, uuid_),
  };
  ModPathResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModPathResponse_descriptor_,
      ModPathResponse::default_instance_,
      ModPathResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ModPathResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPathResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPathResponse, _is_default_instance_));
  ModPathsArguments_descriptor_ = file->message_type(4);
  static const int ModPathsArguments_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPathsArguments, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPathsArguments, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPathsArguments, paths_),
  };
  ModPathsArguments_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModPathsArguments_descriptor_,
      ModPathsArguments::default_instance_,
      ModPathsArguments_offsets_,
      -1,
      -1,
      -1,
      sizeof(ModPathsArguments),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPathsArguments, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPathsArguments, _is_default_instance_));
  ModNeighborArguments_descriptor_ = file->message_type(5);
  static const int ModNeighborArguments_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModNeighborArguments, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModNeighborArguments, peer_),
  };
  ModNeighborArguments_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModNeighborArguments_descriptor_,
      ModNeighborArguments::default_instance_,
      ModNeighborArguments_offsets_,
      -1,
      -1,
      -1,
      sizeof(ModNeighborArguments),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModNeighborArguments, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModNeighborArguments, _is_default_instance_));
  MrtArguments_descriptor_ = file->message_type(6);
  static const int MrtArguments_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MrtArguments, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MrtArguments, family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MrtArguments, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MrtArguments, neighbor_address_),
  };
  MrtArguments_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MrtArguments_descriptor_,
      MrtArguments::default_instance_,
      MrtArguments_offsets_,
      -1,
      -1,
      -1,
      sizeof(MrtArguments),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MrtArguments, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MrtArguments, _is_default_instance_));
  ModMrtArguments_descriptor_ = file->message_type(7);
  static const int ModMrtArguments_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModMrtArguments, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModMrtArguments, dump_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModMrtArguments, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModMrtArguments, interval_),
  };
  ModMrtArguments_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModMrtArguments_descriptor_,
      ModMrtArguments::default_instance_,
      ModMrtArguments_offsets_,
      -1,
      -1,
      -1,
      sizeof(ModMrtArguments),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModMrtArguments, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModMrtArguments, _is_default_instance_));
  ModBmpArguments_descriptor_ = file->message_type(8);
  static const int ModBmpArguments_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModBmpArguments, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModBmpArguments, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModBmpArguments, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModBmpArguments, type_),
  };
  ModBmpArguments_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModBmpArguments_descriptor_,
      ModBmpArguments::default_instance_,
      ModBmpArguments_offsets_,
      -1,
      -1,
      -1,
      sizeof(ModBmpArguments),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModBmpArguments, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModBmpArguments, _is_default_instance_));
  ModBmpArguments_MonitoringPolicy_descriptor_ = ModBmpArguments_descriptor_->enum_type(0);
  ModRpkiArguments_descriptor_ = file->message_type(9);
  static const int ModRpkiArguments_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModRpkiArguments, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModRpkiArguments, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModRpkiArguments, port_),
  };
  ModRpkiArguments_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModRpkiArguments_descriptor_,
      ModRpkiArguments::default_instance_,
      ModRpkiArguments_offsets_,
      -1,
      -1,
      -1,
      sizeof(ModRpkiArguments),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModRpkiArguments, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModRpkiArguments, _is_default_instance_));
  ModVrfArguments_descriptor_ = file->message_type(10);
  static const int ModVrfArguments_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModVrfArguments, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModVrfArguments, vrf_),
  };
  ModVrfArguments_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModVrfArguments_descriptor_,
      ModVrfArguments::default_instance_,
      ModVrfArguments_offsets_,
      -1,
      -1,
      -1,
      sizeof(ModVrfArguments),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModVrfArguments, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModVrfArguments, _is_default_instance_));
  ModDefinedSetArguments_descriptor_ = file->message_type(11);
  static const int ModDefinedSetArguments_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModDefinedSetArguments, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModDefinedSetArguments, set_),
  };
  ModDefinedSetArguments_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModDefinedSetArguments_descriptor_,
      ModDefinedSetArguments::default_instance_,
      ModDefinedSetArguments_offsets_,
      -1,
      -1,
      -1,
      sizeof(ModDefinedSetArguments),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModDefinedSetArguments, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModDefinedSetArguments, _is_default_instance_));
  ModStatementArguments_descriptor_ = file->message_type(12);
  static const int ModStatementArguments_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModStatementArguments, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModStatementArguments, statement_),
  };
  ModStatementArguments_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModStatementArguments_descriptor_,
      ModStatementArguments::default_instance_,
      ModStatementArguments_offsets_,
      -1,
      -1,
      -1,
      sizeof(ModStatementArguments),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModStatementArguments, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModStatementArguments, _is_default_instance_));
  ModPolicyArguments_descriptor_ = file->message_type(13);
  static const int ModPolicyArguments_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPolicyArguments, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPolicyArguments, policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPolicyArguments, refer_existing_statements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPolicyArguments, preserve_statements_),
  };
  ModPolicyArguments_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModPolicyArguments_descriptor_,
      ModPolicyArguments::default_instance_,
      ModPolicyArguments_offsets_,
      -1,
      -1,
      -1,
      sizeof(ModPolicyArguments),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPolicyArguments, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPolicyArguments, _is_default_instance_));
  ModPolicyAssignmentArguments_descriptor_ = file->message_type(14);
  static const int ModPolicyAssignmentArguments_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPolicyAssignmentArguments, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPolicyAssignmentArguments, assignment_),
  };
  ModPolicyAssignmentArguments_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModPolicyAssignmentArguments_descriptor_,
      ModPolicyAssignmentArguments::default_instance_,
      ModPolicyAssignmentArguments_offsets_,
      -1,
      -1,
      -1,
      sizeof(ModPolicyAssignmentArguments),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPolicyAssignmentArguments, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModPolicyAssignmentArguments, _is_default_instance_));
  ModGlobalConfigArguments_descriptor_ = file->message_type(15);
  static const int ModGlobalConfigArguments_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModGlobalConfigArguments, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModGlobalConfigArguments, global_),
  };
  ModGlobalConfigArguments_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModGlobalConfigArguments_descriptor_,
      ModGlobalConfigArguments::default_instance_,
      ModGlobalConfigArguments_offsets_,
      -1,
      -1,
      -1,
      sizeof(ModGlobalConfigArguments),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModGlobalConfigArguments, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModGlobalConfigArguments, _is_default_instance_));
  Path_descriptor_ = file->message_type(16);
  static const int Path_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, nlri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, pattrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, best_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, is_withdraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, validation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, no_implicit_withdraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, source_asn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, source_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, filtered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, stale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, is_from_external_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, neighbor_ip_),
  };
  Path_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Path_descriptor_,
      Path::default_instance_,
      Path_offsets_,
      -1,
      -1,
      -1,
      sizeof(Path),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _is_default_instance_));
  Destination_descriptor_ = file->message_type(17);
  static const int Destination_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destination, prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destination, paths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destination, longer_prefixes_),
  };
  Destination_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Destination_descriptor_,
      Destination::default_instance_,
      Destination_offsets_,
      -1,
      -1,
      -1,
      sizeof(Destination),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destination, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destination, _is_default_instance_));
  Table_descriptor_ = file->message_type(18);
  static const int Table_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, destinations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, post_policy_),
  };
  Table_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Table_descriptor_,
      Table::default_instance_,
      Table_offsets_,
      -1,
      -1,
      -1,
      sizeof(Table),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, _is_default_instance_));
  Peer_descriptor_ = file->message_type(19);
  static const int Peer_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, families_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, apply_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, ebgp_multihop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, route_reflector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, timers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, transport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, route_server_),
  };
  Peer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Peer_descriptor_,
      Peer::default_instance_,
      Peer_offsets_,
      -1,
      -1,
      -1,
      sizeof(Peer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, _is_default_instance_));
  ApplyPolicy_descriptor_ = file->message_type(20);
  static const int ApplyPolicy_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyPolicy, in_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyPolicy, export_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyPolicy, import_policy_),
  };
  ApplyPolicy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ApplyPolicy_descriptor_,
      ApplyPolicy::default_instance_,
      ApplyPolicy_offsets_,
      -1,
      -1,
      -1,
      sizeof(ApplyPolicy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyPolicy, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyPolicy, _is_default_instance_));
  PeerConf_descriptor_ = file->message_type(21);
  static const int PeerConf_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerConf, auth_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerConf, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerConf, local_as_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerConf, neighbor_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerConf, peer_as_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerConf, peer_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerConf, peer_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerConf, remove_private_as_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerConf, route_flap_damping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerConf, send_community_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerConf, remote_cap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerConf, local_cap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerConf, id_),
  };
  PeerConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PeerConf_descriptor_,
      PeerConf::default_instance_,
      PeerConf_offsets_,
      -1,
      -1,
      -1,
      sizeof(PeerConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerConf, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerConf, _is_default_instance_));
  EbgpMultihop_descriptor_ = file->message_type(22);
  static const int EbgpMultihop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EbgpMultihop, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EbgpMultihop, multihop_ttl_),
  };
  EbgpMultihop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EbgpMultihop_descriptor_,
      EbgpMultihop::default_instance_,
      EbgpMultihop_offsets_,
      -1,
      -1,
      -1,
      sizeof(EbgpMultihop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EbgpMultihop, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EbgpMultihop, _is_default_instance_));
  RouteReflector_descriptor_ = file->message_type(23);
  static const int RouteReflector_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteReflector, route_reflector_client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteReflector, route_reflector_cluster_id_),
  };
  RouteReflector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RouteReflector_descriptor_,
      RouteReflector::default_instance_,
      RouteReflector_offsets_,
      -1,
      -1,
      -1,
      sizeof(RouteReflector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteReflector, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteReflector, _is_default_instance_));
  PeerState_descriptor_ = file->message_type(24);
  static const int PeerState_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, auth_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, local_as_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, neighbor_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, peer_as_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, peer_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, peer_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, queues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, remove_private_as_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, route_flap_damping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, send_community_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, session_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, supported_capabilities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, bgp_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, admin_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, received_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, accepted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, advertised_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, out_q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, flops_),
  };
  PeerState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PeerState_descriptor_,
      PeerState::default_instance_,
      PeerState_offsets_,
      -1,
      -1,
      -1,
      sizeof(PeerState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerState, _is_default_instance_));
  Messages_descriptor_ = file->message_type(25);
  static const int Messages_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Messages, received_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Messages, sent_),
  };
  Messages_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Messages_descriptor_,
      Messages::default_instance_,
      Messages_offsets_,
      -1,
      -1,
      -1,
      sizeof(Messages),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Messages, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Messages, _is_default_instance_));
  Message_descriptor_ = file->message_type(26);
  static const int Message_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, notification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, keepalive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, refresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, discarded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, total_),
  };
  Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      -1,
      -1,
      -1,
      sizeof(Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _is_default_instance_));
  Queues_descriptor_ = file->message_type(27);
  static const int Queues_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Queues, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Queues, output_),
  };
  Queues_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Queues_descriptor_,
      Queues::default_instance_,
      Queues_offsets_,
      -1,
      -1,
      -1,
      sizeof(Queues),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Queues, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Queues, _is_default_instance_));
  Timers_descriptor_ = file->message_type(28);
  static const int Timers_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timers, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timers, state_),
  };
  Timers_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Timers_descriptor_,
      Timers::default_instance_,
      Timers_offsets_,
      -1,
      -1,
      -1,
      sizeof(Timers),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timers, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timers, _is_default_instance_));
  TimersConfig_descriptor_ = file->message_type(29);
  static const int TimersConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimersConfig, connect_retry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimersConfig, hold_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimersConfig, keepalive_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimersConfig, minimum_advertisement_interval_),
  };
  TimersConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimersConfig_descriptor_,
      TimersConfig::default_instance_,
      TimersConfig_offsets_,
      -1,
      -1,
      -1,
      sizeof(TimersConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimersConfig, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimersConfig, _is_default_instance_));
  TimersState_descriptor_ = file->message_type(30);
  static const int TimersState_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimersState, connect_retry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimersState, hold_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimersState, keepalive_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimersState, minimum_advertisement_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimersState, negotiated_hold_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimersState, uptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimersState, downtime_),
  };
  TimersState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimersState_descriptor_,
      TimersState::default_instance_,
      TimersState_offsets_,
      -1,
      -1,
      -1,
      sizeof(TimersState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimersState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimersState, _is_default_instance_));
  Transport_descriptor_ = file->message_type(31);
  static const int Transport_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport, local_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport, local_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport, mtu_discovery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport, passive_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport, remote_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport, remote_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport, tcp_mss_),
  };
  Transport_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Transport_descriptor_,
      Transport::default_instance_,
      Transport_offsets_,
      -1,
      -1,
      -1,
      sizeof(Transport),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport, _is_default_instance_));
  RouteServer_descriptor_ = file->message_type(32);
  static const int RouteServer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteServer, route_server_client_),
  };
  RouteServer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RouteServer_descriptor_,
      RouteServer::default_instance_,
      RouteServer_offsets_,
      -1,
      -1,
      -1,
      sizeof(RouteServer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteServer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteServer, _is_default_instance_));
  Prefix_descriptor_ = file->message_type(33);
  static const int Prefix_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prefix, ip_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prefix, mask_length_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prefix, mask_length_max_),
  };
  Prefix_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Prefix_descriptor_,
      Prefix::default_instance_,
      Prefix_offsets_,
      -1,
      -1,
      -1,
      sizeof(Prefix),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prefix, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prefix, _is_default_instance_));
  DefinedSet_descriptor_ = file->message_type(34);
  static const int DefinedSet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefinedSet, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefinedSet, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefinedSet, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefinedSet, prefixes_),
  };
  DefinedSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DefinedSet_descriptor_,
      DefinedSet::default_instance_,
      DefinedSet_offsets_,
      -1,
      -1,
      -1,
      sizeof(DefinedSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefinedSet, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefinedSet, _is_default_instance_));
  MatchSet_descriptor_ = file->message_type(35);
  static const int MatchSet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSet, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSet, name_),
  };
  MatchSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MatchSet_descriptor_,
      MatchSet::default_instance_,
      MatchSet_offsets_,
      -1,
      -1,
      -1,
      sizeof(MatchSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSet, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSet, _is_default_instance_));
  AsPathLength_descriptor_ = file->message_type(36);
  static const int AsPathLength_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsPathLength, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsPathLength, length_),
  };
  AsPathLength_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AsPathLength_descriptor_,
      AsPathLength::default_instance_,
      AsPathLength_offsets_,
      -1,
      -1,
      -1,
      sizeof(AsPathLength),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsPathLength, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsPathLength, _is_default_instance_));
  Conditions_descriptor_ = file->message_type(37);
  static const int Conditions_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conditions, prefix_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conditions, neighbor_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conditions, as_path_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conditions, as_path_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conditions, community_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conditions, ext_community_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conditions, rpki_result_),
  };
  Conditions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Conditions_descriptor_,
      Conditions::default_instance_,
      Conditions_offsets_,
      -1,
      -1,
      -1,
      sizeof(Conditions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conditions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conditions, _is_default_instance_));
  CommunityAction_descriptor_ = file->message_type(38);
  static const int CommunityAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommunityAction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommunityAction, communities_),
  };
  CommunityAction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommunityAction_descriptor_,
      CommunityAction::default_instance_,
      CommunityAction_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommunityAction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommunityAction, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommunityAction, _is_default_instance_));
  MedAction_descriptor_ = file->message_type(39);
  static const int MedAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedAction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedAction, value_),
  };
  MedAction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MedAction_descriptor_,
      MedAction::default_instance_,
      MedAction_offsets_,
      -1,
      -1,
      -1,
      sizeof(MedAction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedAction, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedAction, _is_default_instance_));
  AsPrependAction_descriptor_ = file->message_type(40);
  static const int AsPrependAction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsPrependAction, asn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsPrependAction, repeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsPrependAction, use_left_most_),
  };
  AsPrependAction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AsPrependAction_descriptor_,
      AsPrependAction::default_instance_,
      AsPrependAction_offsets_,
      -1,
      -1,
      -1,
      sizeof(AsPrependAction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsPrependAction, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsPrependAction, _is_default_instance_));
  Actions_descriptor_ = file->message_type(41);
  static const int Actions_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actions, route_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actions, community_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actions, med_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actions, as_prepend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actions, ext_community_),
  };
  Actions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Actions_descriptor_,
      Actions::default_instance_,
      Actions_offsets_,
      -1,
      -1,
      -1,
      sizeof(Actions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actions, _is_default_instance_));
  Statement_descriptor_ = file->message_type(42);
  static const int Statement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statement, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statement, conditions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statement, actions_),
  };
  Statement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Statement_descriptor_,
      Statement::default_instance_,
      Statement_offsets_,
      -1,
      -1,
      -1,
      sizeof(Statement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statement, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statement, _is_default_instance_));
  Policy_descriptor_ = file->message_type(43);
  static const int Policy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Policy, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Policy, statements_),
  };
  Policy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Policy_descriptor_,
      Policy::default_instance_,
      Policy_offsets_,
      -1,
      -1,
      -1,
      sizeof(Policy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Policy, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Policy, _is_default_instance_));
  PolicyAssignment_descriptor_ = file->message_type(44);
  static const int PolicyAssignment_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyAssignment, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyAssignment, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyAssignment, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyAssignment, policies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyAssignment, default__),
  };
  PolicyAssignment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PolicyAssignment_descriptor_,
      PolicyAssignment::default_instance_,
      PolicyAssignment_offsets_,
      -1,
      -1,
      -1,
      sizeof(PolicyAssignment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyAssignment, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyAssignment, _is_default_instance_));
  MrtMessage_descriptor_ = file->message_type(45);
  static const int MrtMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MrtMessage, data_),
  };
  MrtMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MrtMessage_descriptor_,
      MrtMessage::default_instance_,
      MrtMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(MrtMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MrtMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MrtMessage, _is_default_instance_));
  RPKIConf_descriptor_ = file->message_type(46);
  static const int RPKIConf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIConf, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIConf, remote_port_),
  };
  RPKIConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RPKIConf_descriptor_,
      RPKIConf::default_instance_,
      RPKIConf_offsets_,
      -1,
      -1,
      -1,
      sizeof(RPKIConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIConf, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIConf, _is_default_instance_));
  RPKIState_descriptor_ = file->message_type(47);
  static const int RPKIState_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIState, uptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIState, downtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIState, up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIState, record_ipv4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIState, record_ipv6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIState, prefix_ipv4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIState, prefix_ipv6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIState, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIState, received_ipv4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIState, received_ipv6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIState, serial_notify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIState, cache_reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIState, cache_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIState, end_of_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIState, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIState, serial_query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIState, reset_query_),
  };
  RPKIState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RPKIState_descriptor_,
      RPKIState::default_instance_,
      RPKIState_offsets_,
      -1,
      -1,
      -1,
      sizeof(RPKIState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKIState, _is_default_instance_));
  RPKI_descriptor_ = file->message_type(48);
  static const int RPKI_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKI, conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKI, state_),
  };
  RPKI_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RPKI_descriptor_,
      RPKI::default_instance_,
      RPKI_offsets_,
      -1,
      -1,
      -1,
      sizeof(RPKI),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKI, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPKI, _is_default_instance_));
  ROA_descriptor_ = file->message_type(49);
  static const int ROA_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROA, as_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROA, prefixlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROA, maxlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROA, prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROA, conf_),
  };
  ROA_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ROA_descriptor_,
      ROA::default_instance_,
      ROA_offsets_,
      -1,
      -1,
      -1,
      sizeof(ROA),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROA, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROA, _is_default_instance_));
  ROAResult_descriptor_ = file->message_type(50);
  static const int ROAResult_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROAResult, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROAResult, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROAResult, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROAResult, aspath_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROAResult, origin_as_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROAResult, prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROAResult, old_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROAResult, new_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROAResult, roas_),
  };
  ROAResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ROAResult_descriptor_,
      ROAResult::default_instance_,
      ROAResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(ROAResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROAResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROAResult, _is_default_instance_));
  ROAResult_ValidationReason_descriptor_ = ROAResult_descriptor_->enum_type(0);
  ROAResult_ValidationResult_descriptor_ = ROAResult_descriptor_->enum_type(1);
  Vrf_descriptor_ = file->message_type(51);
  static const int Vrf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vrf, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vrf, rd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vrf, import_rt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vrf, export_rt_),
  };
  Vrf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vrf_descriptor_,
      Vrf::default_instance_,
      Vrf_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vrf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vrf, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vrf, _is_default_instance_));
  Global_descriptor_ = file->message_type(52);
  static const int Global_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global, as_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global, router_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global, listen_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global, listen_addresses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global, families_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global, mpls_label_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global, mpls_label_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global, collector_),
  };
  Global_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Global_descriptor_,
      Global::default_instance_,
      Global_offsets_,
      -1,
      -1,
      -1,
      sizeof(Global),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global, _is_default_instance_));
  Resource_descriptor_ = file->enum_type(0);
  Operation_descriptor_ = file->enum_type(1);
  DefinedType_descriptor_ = file->enum_type(2);
  MatchType_descriptor_ = file->enum_type(3);
  AsPathLengthType_descriptor_ = file->enum_type(4);
  RouteAction_descriptor_ = file->enum_type(5);
  CommunityActionType_descriptor_ = file->enum_type(6);
  MedActionType_descriptor_ = file->enum_type(7);
  PolicyType_descriptor_ = file->enum_type(8);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gobgp_5fapi_5fclient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Arguments_descriptor_, &Arguments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModPathArguments_descriptor_, &ModPathArguments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModPathResponse_descriptor_, &ModPathResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModPathsArguments_descriptor_, &ModPathsArguments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModNeighborArguments_descriptor_, &ModNeighborArguments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MrtArguments_descriptor_, &MrtArguments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModMrtArguments_descriptor_, &ModMrtArguments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModBmpArguments_descriptor_, &ModBmpArguments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModRpkiArguments_descriptor_, &ModRpkiArguments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModVrfArguments_descriptor_, &ModVrfArguments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModDefinedSetArguments_descriptor_, &ModDefinedSetArguments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModStatementArguments_descriptor_, &ModStatementArguments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModPolicyArguments_descriptor_, &ModPolicyArguments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModPolicyAssignmentArguments_descriptor_, &ModPolicyAssignmentArguments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModGlobalConfigArguments_descriptor_, &ModGlobalConfigArguments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Path_descriptor_, &Path::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Destination_descriptor_, &Destination::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Table_descriptor_, &Table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Peer_descriptor_, &Peer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ApplyPolicy_descriptor_, &ApplyPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PeerConf_descriptor_, &PeerConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EbgpMultihop_descriptor_, &EbgpMultihop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RouteReflector_descriptor_, &RouteReflector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PeerState_descriptor_, &PeerState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Messages_descriptor_, &Messages::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Queues_descriptor_, &Queues::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Timers_descriptor_, &Timers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimersConfig_descriptor_, &TimersConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimersState_descriptor_, &TimersState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Transport_descriptor_, &Transport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RouteServer_descriptor_, &RouteServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Prefix_descriptor_, &Prefix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DefinedSet_descriptor_, &DefinedSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MatchSet_descriptor_, &MatchSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AsPathLength_descriptor_, &AsPathLength::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Conditions_descriptor_, &Conditions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommunityAction_descriptor_, &CommunityAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MedAction_descriptor_, &MedAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AsPrependAction_descriptor_, &AsPrependAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Actions_descriptor_, &Actions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Statement_descriptor_, &Statement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Policy_descriptor_, &Policy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PolicyAssignment_descriptor_, &PolicyAssignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MrtMessage_descriptor_, &MrtMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RPKIConf_descriptor_, &RPKIConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RPKIState_descriptor_, &RPKIState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RPKI_descriptor_, &RPKI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ROA_descriptor_, &ROA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ROAResult_descriptor_, &ROAResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vrf_descriptor_, &Vrf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Global_descriptor_, &Global::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto() {
  delete Error::default_instance_;
  delete Error_reflection_;
  delete Arguments::default_instance_;
  delete Arguments_reflection_;
  delete ModPathArguments::default_instance_;
  delete ModPathArguments_reflection_;
  delete ModPathResponse::default_instance_;
  delete ModPathResponse_reflection_;
  delete ModPathsArguments::default_instance_;
  delete ModPathsArguments_reflection_;
  delete ModNeighborArguments::default_instance_;
  delete ModNeighborArguments_reflection_;
  delete MrtArguments::default_instance_;
  delete MrtArguments_reflection_;
  delete ModMrtArguments::default_instance_;
  delete ModMrtArguments_reflection_;
  delete ModBmpArguments::default_instance_;
  delete ModBmpArguments_reflection_;
  delete ModRpkiArguments::default_instance_;
  delete ModRpkiArguments_reflection_;
  delete ModVrfArguments::default_instance_;
  delete ModVrfArguments_reflection_;
  delete ModDefinedSetArguments::default_instance_;
  delete ModDefinedSetArguments_reflection_;
  delete ModStatementArguments::default_instance_;
  delete ModStatementArguments_reflection_;
  delete ModPolicyArguments::default_instance_;
  delete ModPolicyArguments_reflection_;
  delete ModPolicyAssignmentArguments::default_instance_;
  delete ModPolicyAssignmentArguments_reflection_;
  delete ModGlobalConfigArguments::default_instance_;
  delete ModGlobalConfigArguments_reflection_;
  delete Path::default_instance_;
  delete Path_reflection_;
  delete Destination::default_instance_;
  delete Destination_reflection_;
  delete Table::default_instance_;
  delete Table_reflection_;
  delete Peer::default_instance_;
  delete Peer_reflection_;
  delete ApplyPolicy::default_instance_;
  delete ApplyPolicy_reflection_;
  delete PeerConf::default_instance_;
  delete PeerConf_reflection_;
  delete EbgpMultihop::default_instance_;
  delete EbgpMultihop_reflection_;
  delete RouteReflector::default_instance_;
  delete RouteReflector_reflection_;
  delete PeerState::default_instance_;
  delete PeerState_reflection_;
  delete Messages::default_instance_;
  delete Messages_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
  delete Queues::default_instance_;
  delete Queues_reflection_;
  delete Timers::default_instance_;
  delete Timers_reflection_;
  delete TimersConfig::default_instance_;
  delete TimersConfig_reflection_;
  delete TimersState::default_instance_;
  delete TimersState_reflection_;
  delete Transport::default_instance_;
  delete Transport_reflection_;
  delete RouteServer::default_instance_;
  delete RouteServer_reflection_;
  delete Prefix::default_instance_;
  delete Prefix_reflection_;
  delete DefinedSet::default_instance_;
  delete DefinedSet_reflection_;
  delete MatchSet::default_instance_;
  delete MatchSet_reflection_;
  delete AsPathLength::default_instance_;
  delete AsPathLength_reflection_;
  delete Conditions::default_instance_;
  delete Conditions_reflection_;
  delete CommunityAction::default_instance_;
  delete CommunityAction_reflection_;
  delete MedAction::default_instance_;
  delete MedAction_reflection_;
  delete AsPrependAction::default_instance_;
  delete AsPrependAction_reflection_;
  delete Actions::default_instance_;
  delete Actions_reflection_;
  delete Statement::default_instance_;
  delete Statement_reflection_;
  delete Policy::default_instance_;
  delete Policy_reflection_;
  delete PolicyAssignment::default_instance_;
  delete PolicyAssignment_reflection_;
  delete MrtMessage::default_instance_;
  delete MrtMessage_reflection_;
  delete RPKIConf::default_instance_;
  delete RPKIConf_reflection_;
  delete RPKIState::default_instance_;
  delete RPKIState_reflection_;
  delete RPKI::default_instance_;
  delete RPKI_reflection_;
  delete ROA::default_instance_;
  delete ROA_reflection_;
  delete ROAResult::default_instance_;
  delete ROAResult_reflection_;
  delete Vrf::default_instance_;
  delete Vrf_reflection_;
  delete Global::default_instance_;
  delete Global_reflection_;
}

void protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026gobgp_api_client.proto\022\010gobgpapi\"a\n\005Er"
    "ror\022\'\n\004code\030\001 \001(\0162\031.gobgpapi.Error.Error"
    "Code\022\013\n\003msg\030\002 \001(\t\"\"\n\tErrorCode\022\013\n\007SUCCES"
    "S\020\000\022\010\n\004FAIL\020\001\"O\n\tArguments\022$\n\010resource\030\001"
    " \001(\0162\022.gobgpapi.Resource\022\016\n\006family\030\002 \001(\r"
    "\022\014\n\004name\030\003 \001(\t\"\252\001\n\020ModPathArguments\022&\n\to"
    "peration\030\001 \001(\0162\023.gobgpapi.Operation\022$\n\010r"
    "esource\030\002 \001(\0162\022.gobgpapi.Resource\022\014\n\004nam"
    "e\030\003 \001(\t\022\034\n\004path\030\004 \001(\0132\016.gobgpapi.Path\022\014\n"
    "\004uuid\030\005 \001(\014\022\016\n\006family\030\006 \001(\r\"\037\n\017ModPathRe"
    "sponse\022\014\n\004uuid\030\001 \001(\014\"f\n\021ModPathsArgument"
    "s\022$\n\010resource\030\001 \001(\0162\022.gobgpapi.Resource\022"
    "\014\n\004name\030\002 \001(\t\022\035\n\005paths\030\003 \003(\0132\016.gobgpapi."
    "Path\"\\\n\024ModNeighborArguments\022&\n\toperatio"
    "n\030\001 \001(\0162\023.gobgpapi.Operation\022\034\n\004peer\030\002 \001"
    "(\0132\016.gobgpapi.Peer\"p\n\014MrtArguments\022$\n\010re"
    "source\030\001 \001(\0162\022.gobgpapi.Resource\022\016\n\006fami"
    "ly\030\002 \001(\r\022\020\n\010interval\030\003 \001(\004\022\030\n\020neighbor_a"
    "ddress\030\004 \001(\t\"p\n\017ModMrtArguments\022&\n\topera"
    "tion\030\001 \001(\0162\023.gobgpapi.Operation\022\021\n\tdump_"
    "type\030\002 \001(\005\022\020\n\010filename\030\003 \001(\t\022\020\n\010interval"
    "\030\004 \001(\004\"\303\001\n\017ModBmpArguments\022&\n\toperation\030"
    "\001 \001(\0162\023.gobgpapi.Operation\022\017\n\007address\030\002 "
    "\001(\t\022\014\n\004port\030\003 \001(\r\0228\n\004type\030\004 \001(\0162*.gobgpa"
    "pi.ModBmpArguments.MonitoringPolicy\"/\n\020M"
    "onitoringPolicy\022\007\n\003PRE\020\000\022\010\n\004POST\020\001\022\010\n\004BO"
    "TH\020\002\"Y\n\020ModRpkiArguments\022&\n\toperation\030\001 "
    "\001(\0162\023.gobgpapi.Operation\022\017\n\007address\030\002 \001("
    "\t\022\014\n\004port\030\003 \001(\r\"U\n\017ModVrfArguments\022&\n\top"
    "eration\030\001 \001(\0162\023.gobgpapi.Operation\022\032\n\003vr"
    "f\030\002 \001(\0132\r.gobgpapi.Vrf\"c\n\026ModDefinedSetA"
    "rguments\022&\n\toperation\030\001 \001(\0162\023.gobgpapi.O"
    "peration\022!\n\003set\030\002 \001(\0132\024.gobgpapi.Defined"
    "Set\"g\n\025ModStatementArguments\022&\n\toperatio"
    "n\030\001 \001(\0162\023.gobgpapi.Operation\022&\n\tstatemen"
    "t\030\002 \001(\0132\023.gobgpapi.Statement\"\236\001\n\022ModPoli"
    "cyArguments\022&\n\toperation\030\001 \001(\0162\023.gobgpap"
    "i.Operation\022 \n\006policy\030\002 \001(\0132\020.gobgpapi.P"
    "olicy\022!\n\031refer_existing_statements\030\003 \001(\010"
    "\022\033\n\023preserve_statements\030\004 \001(\010\"v\n\034ModPoli"
    "cyAssignmentArguments\022&\n\toperation\030\001 \001(\016"
    "2\023.gobgpapi.Operation\022.\n\nassignment\030\002 \001("
    "\0132\032.gobgpapi.PolicyAssignment\"d\n\030ModGlob"
    "alConfigArguments\022&\n\toperation\030\001 \001(\0162\023.g"
    "obgpapi.Operation\022 \n\006global\030\002 \001(\0132\020.gobg"
    "papi.Global\"\215\002\n\004Path\022\014\n\004nlri\030\001 \001(\014\022\016\n\006pa"
    "ttrs\030\002 \003(\014\022\013\n\003age\030\003 \001(\003\022\014\n\004best\030\004 \001(\010\022\023\n"
    "\013is_withdraw\030\005 \001(\010\022\022\n\nvalidation\030\006 \001(\005\022\034"
    "\n\024no_implicit_withdraw\030\007 \001(\010\022\016\n\006family\030\010"
    " \001(\r\022\022\n\nsource_asn\030\t \001(\r\022\021\n\tsource_id\030\n "
    "\001(\t\022\020\n\010filtered\030\013 \001(\010\022\r\n\005stale\030\014 \001(\010\022\030\n\020"
    "is_from_external\030\r \001(\010\022\023\n\013neighbor_ip\030\016 "
    "\001(\t\"U\n\013Destination\022\016\n\006prefix\030\001 \001(\t\022\035\n\005pa"
    "ths\030\002 \003(\0132\016.gobgpapi.Path\022\027\n\017longer_pref"
    "ixes\030\003 \001(\010\"\211\001\n\005Table\022 \n\004type\030\001 \001(\0162\022.gob"
    "gpapi.Resource\022\014\n\004name\030\002 \001(\t\022\016\n\006family\030\003"
    " \001(\r\022+\n\014destinations\030\004 \003(\0132\025.gobgpapi.De"
    "stination\022\023\n\013post_policy\030\005 \001(\010\"\343\002\n\004Peer\022"
    "\020\n\010families\030\002 \003(\r\022+\n\014apply_policy\030\003 \001(\0132"
    "\025.gobgpapi.ApplyPolicy\022 \n\004conf\030\005 \001(\0132\022.g"
    "obgpapi.PeerConf\022-\n\rebgp_multihop\030\006 \001(\0132"
    "\026.gobgpapi.EbgpMultihop\0221\n\017route_reflect"
    "or\030\n \001(\0132\030.gobgpapi.RouteReflector\022!\n\004in"
    "fo\030\013 \001(\0132\023.gobgpapi.PeerState\022 \n\006timers\030"
    "\014 \001(\0132\020.gobgpapi.Timers\022&\n\ttransport\030\r \001"
    "(\0132\023.gobgpapi.Transport\022+\n\014route_server\030"
    "\017 \001(\0132\025.gobgpapi.RouteServer\"\242\001\n\013ApplyPo"
    "licy\022-\n\tin_policy\030\001 \001(\0132\032.gobgpapi.Polic"
    "yAssignment\0221\n\rexport_policy\030\002 \001(\0132\032.gob"
    "gpapi.PolicyAssignment\0221\n\rimport_policy\030"
    "\003 \001(\0132\032.gobgpapi.PolicyAssignment\"\234\002\n\010Pe"
    "erConf\022\025\n\rauth_password\030\001 \001(\t\022\023\n\013descrip"
    "tion\030\002 \001(\t\022\020\n\010local_as\030\003 \001(\r\022\030\n\020neighbor"
    "_address\030\004 \001(\t\022\017\n\007peer_as\030\005 \001(\r\022\022\n\npeer_"
    "group\030\006 \001(\t\022\021\n\tpeer_type\030\007 \001(\r\022\031\n\021remove"
    "_private_as\030\010 \001(\r\022\032\n\022route_flap_damping\030"
    "\t \001(\010\022\026\n\016send_community\030\n \001(\r\022\022\n\nremote_"
    "cap\030\013 \003(\014\022\021\n\tlocal_cap\030\014 \003(\014\022\n\n\002id\030\r \001(\t"
    "\"5\n\014EbgpMultihop\022\017\n\007enabled\030\001 \001(\010\022\024\n\014mul"
    "tihop_ttl\030\002 \001(\r\"T\n\016RouteReflector\022\036\n\026rou"
    "te_reflector_client\030\001 \001(\010\022\"\n\032route_refle"
    "ctor_cluster_id\030\002 \001(\r\"\347\003\n\tPeerState\022\025\n\ra"
    "uth_password\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022"
    "\020\n\010local_as\030\003 \001(\r\022$\n\010messages\030\004 \001(\0132\022.go"
    "bgpapi.Messages\022\030\n\020neighbor_address\030\005 \001("
    "\t\022\017\n\007peer_as\030\006 \001(\r\022\022\n\npeer_group\030\007 \001(\t\022\021"
    "\n\tpeer_type\030\010 \001(\r\022 \n\006queues\030\t \001(\0132\020.gobg"
    "papi.Queues\022\031\n\021remove_private_as\030\n \001(\r\022\032"
    "\n\022route_flap_damping\030\013 \001(\010\022\026\n\016send_commu"
    "nity\030\014 \001(\r\022\025\n\rsession_state\030\r \001(\r\022\036\n\026sup"
    "ported_capabilities\030\016 \003(\t\022\021\n\tbgp_state\030\017"
    " \001(\t\022\023\n\013admin_state\030\020 \001(\t\022\020\n\010received\030\021 "
    "\001(\r\022\020\n\010accepted\030\022 \001(\r\022\022\n\nadvertised\030\023 \001("
    "\r\022\r\n\005out_q\030\024 \001(\r\022\r\n\005flops\030\025 \001(\r\"P\n\010Messa"
    "ges\022#\n\010received\030\001 \001(\0132\021.gobgpapi.Message"
    "\022\037\n\004sent\030\002 \001(\0132\021.gobgpapi.Message\"\203\001\n\007Me"
    "ssage\022\024\n\014NOTIFICATION\030\001 \001(\004\022\016\n\006UPDATE\030\002 "
    "\001(\004\022\014\n\004OPEN\030\003 \001(\004\022\021\n\tKEEPALIVE\030\004 \001(\004\022\017\n\007"
    "REFRESH\030\005 \001(\004\022\021\n\tDISCARDED\030\006 \001(\004\022\r\n\005TOTA"
    "L\030\007 \001(\004\"\'\n\006Queues\022\r\n\005input\030\001 \001(\r\022\016\n\006outp"
    "ut\030\002 \001(\r\"V\n\006Timers\022&\n\006config\030\001 \001(\0132\026.gob"
    "gpapi.TimersConfig\022$\n\005state\030\002 \001(\0132\025.gobg"
    "papi.TimersState\"|\n\014TimersConfig\022\025\n\rconn"
    "ect_retry\030\001 \001(\004\022\021\n\thold_time\030\002 \001(\004\022\032\n\022ke"
    "epalive_interval\030\003 \001(\004\022&\n\036minimum_advert"
    "isement_interval\030\004 \001(\004\"\273\001\n\013TimersState\022\025"
    "\n\rconnect_retry\030\001 \001(\004\022\021\n\thold_time\030\002 \001(\004"
    "\022\032\n\022keepalive_interval\030\003 \001(\004\022&\n\036minimum_"
    "advertisement_interval\030\004 \001(\004\022\034\n\024negotiat"
    "ed_hold_time\030\005 \001(\004\022\016\n\006uptime\030\006 \001(\004\022\020\n\010do"
    "wntime\030\007 \001(\004\"\241\001\n\tTransport\022\025\n\rlocal_addr"
    "ess\030\001 \001(\t\022\022\n\nlocal_port\030\002 \001(\r\022\025\n\rmtu_dis"
    "covery\030\003 \001(\010\022\024\n\014passive_mode\030\004 \001(\010\022\026\n\016re"
    "mote_address\030\005 \001(\t\022\023\n\013remote_port\030\006 \001(\r\022"
    "\017\n\007tcp_mss\030\007 \001(\r\"*\n\013RouteServer\022\033\n\023route"
    "_server_client\030\001 \001(\010\"M\n\006Prefix\022\021\n\tip_pre"
    "fix\030\001 \001(\t\022\027\n\017mask_length_min\030\002 \001(\r\022\027\n\017ma"
    "sk_length_max\030\003 \001(\r\"q\n\nDefinedSet\022#\n\004typ"
    "e\030\001 \001(\0162\025.gobgpapi.DefinedType\022\014\n\004name\030\002"
    " \001(\t\022\014\n\004list\030\003 \003(\t\022\"\n\010prefixes\030\004 \003(\0132\020.g"
    "obgpapi.Prefix\";\n\010MatchSet\022!\n\004type\030\001 \001(\016"
    "2\023.gobgpapi.MatchType\022\014\n\004name\030\002 \001(\t\"H\n\014A"
    "sPathLength\022(\n\004type\030\001 \001(\0162\032.gobgpapi.AsP"
    "athLengthType\022\016\n\006length\030\002 \001(\r\"\246\002\n\nCondit"
    "ions\022&\n\nprefix_set\030\001 \001(\0132\022.gobgpapi.Matc"
    "hSet\022(\n\014neighbor_set\030\002 \001(\0132\022.gobgpapi.Ma"
    "tchSet\022.\n\016as_path_length\030\003 \001(\0132\026.gobgpap"
    "i.AsPathLength\022\'\n\013as_path_set\030\004 \001(\0132\022.go"
    "bgpapi.MatchSet\022)\n\rcommunity_set\030\005 \001(\0132\022"
    ".gobgpapi.MatchSet\022-\n\021ext_community_set\030"
    "\006 \001(\0132\022.gobgpapi.MatchSet\022\023\n\013rpki_result"
    "\030\007 \001(\005\"S\n\017CommunityAction\022+\n\004type\030\001 \001(\0162"
    "\035.gobgpapi.CommunityActionType\022\023\n\013commun"
    "ities\030\002 \003(\t\"A\n\tMedAction\022%\n\004type\030\001 \001(\0162\027"
    ".gobgpapi.MedActionType\022\r\n\005value\030\002 \001(\003\"E"
    "\n\017AsPrependAction\022\013\n\003asn\030\001 \001(\r\022\016\n\006repeat"
    "\030\002 \001(\r\022\025\n\ruse_left_most\030\003 \001(\010\"\347\001\n\007Action"
    "s\022+\n\014route_action\030\001 \001(\0162\025.gobgpapi.Route"
    "Action\022,\n\tcommunity\030\002 \001(\0132\031.gobgpapi.Com"
    "munityAction\022 \n\003med\030\003 \001(\0132\023.gobgpapi.Med"
    "Action\022-\n\nas_prepend\030\004 \001(\0132\031.gobgpapi.As"
    "PrependAction\0220\n\rext_community\030\005 \001(\0132\031.g"
    "obgpapi.CommunityAction\"g\n\tStatement\022\014\n\004"
    "name\030\001 \001(\t\022(\n\nconditions\030\002 \001(\0132\024.gobgpap"
    "i.Conditions\022\"\n\007actions\030\003 \001(\0132\021.gobgpapi"
    ".Actions\"\?\n\006Policy\022\014\n\004name\030\001 \001(\t\022\'\n\nstat"
    "ements\030\002 \003(\0132\023.gobgpapi.Statement\"\266\001\n\020Po"
    "licyAssignment\022\"\n\004type\030\001 \001(\0162\024.gobgpapi."
    "PolicyType\022$\n\010resource\030\002 \001(\0162\022.gobgpapi."
    "Resource\022\014\n\004name\030\003 \001(\t\022\"\n\010policies\030\004 \003(\013"
    "2\020.gobgpapi.Policy\022&\n\007default\030\005 \001(\0162\025.go"
    "bgpapi.RouteAction\"\032\n\nMrtMessage\022\014\n\004data"
    "\030\001 \001(\014\"0\n\010RPKIConf\022\017\n\007address\030\001 \001(\t\022\023\n\013r"
    "emote_port\030\002 \001(\t\"\336\002\n\tRPKIState\022\016\n\006uptime"
    "\030\001 \001(\003\022\020\n\010downtime\030\002 \001(\003\022\n\n\002up\030\003 \001(\010\022\023\n\013"
    "record_ipv4\030\004 \001(\r\022\023\n\013record_ipv6\030\005 \001(\r\022\023"
    "\n\013prefix_ipv4\030\006 \001(\r\022\023\n\013prefix_ipv6\030\007 \001(\r"
    "\022\016\n\006serial\030\010 \001(\r\022\025\n\rreceived_ipv4\030\t \001(\003\022"
    "\025\n\rreceived_ipv6\030\n \001(\003\022\025\n\rserial_notify\030"
    "\013 \001(\003\022\023\n\013cache_reset\030\014 \001(\003\022\026\n\016cache_resp"
    "onse\030\r \001(\003\022\023\n\013end_of_data\030\016 \001(\003\022\r\n\005error"
    "\030\017 \001(\003\022\024\n\014serial_query\030\020 \001(\003\022\023\n\013reset_qu"
    "ery\030\021 \001(\003\"L\n\004RPKI\022 \n\004conf\030\001 \001(\0132\022.gobgpa"
    "pi.RPKIConf\022\"\n\005state\030\002 \001(\0132\023.gobgpapi.RP"
    "KIState\"f\n\003ROA\022\n\n\002as\030\001 \001(\r\022\021\n\tprefixlen\030"
    "\002 \001(\r\022\016\n\006maxlen\030\003 \001(\r\022\016\n\006prefix\030\004 \001(\t\022 \n"
    "\004conf\030\005 \001(\0132\022.gobgpapi.RPKIConf\"\300\003\n\tROAR"
    "esult\0224\n\006reason\030\001 \001(\0162$.gobgpapi.ROAResu"
    "lt.ValidationReason\022\017\n\007address\030\002 \001(\t\022\021\n\t"
    "timestamp\030\003 \001(\003\022\023\n\013aspath_attr\030\004 \001(\014\022\021\n\t"
    "origin_as\030\005 \001(\r\022\016\n\006prefix\030\006 \001(\t\0228\n\nold_r"
    "esult\030\007 \001(\0162$.gobgpapi.ROAResult.Validat"
    "ionResult\0228\n\nnew_result\030\010 \001(\0162$.gobgpapi"
    ".ROAResult.ValidationResult\022\033\n\004roas\030\t \003("
    "\0132\r.gobgpapi.ROA\"K\n\020ValidationReason\022\n\n\006"
    "UPDATE\020\000\022\014\n\010WITHDRAW\020\001\022\r\n\tPEER_DOWN\020\002\022\016\n"
    "\nREVALIDATE\020\003\"C\n\020ValidationResult\022\010\n\004NON"
    "E\020\000\022\r\n\tNOT_FOUND\020\001\022\t\n\005VALID\020\002\022\013\n\007INVALID"
    "\020\003\"E\n\003Vrf\022\014\n\004name\030\001 \001(\t\022\n\n\002rd\030\002 \001(\014\022\021\n\ti"
    "mport_rt\030\003 \003(\014\022\021\n\texport_rt\030\004 \003(\014\"\253\001\n\006Gl"
    "obal\022\n\n\002as\030\001 \001(\r\022\021\n\trouter_id\030\002 \001(\t\022\023\n\013l"
    "isten_port\030\003 \001(\005\022\030\n\020listen_addresses\030\004 \003"
    "(\t\022\020\n\010families\030\005 \003(\r\022\026\n\016mpls_label_min\030\006"
    " \001(\r\022\026\n\016mpls_label_max\030\007 \001(\r\022\021\n\tcollecto"
    "r\030\010 \001(\010*C\n\010Resource\022\n\n\006GLOBAL\020\000\022\t\n\005LOCAL"
    "\020\001\022\n\n\006ADJ_IN\020\002\022\013\n\007ADJ_OUT\020\003\022\007\n\003VRF\020\004*j\n\t"
    "Operation\022\007\n\003ADD\020\000\022\007\n\003DEL\020\001\022\013\n\007DEL_ALL\020\002"
    "\022\013\n\007REPLACE\020\003\022\n\n\006ENABLE\020\004\022\013\n\007DISABLE\020\005\022\t"
    "\n\005RESET\020\006\022\r\n\tSOFTRESET\020\007*_\n\013DefinedType\022"
    "\n\n\006PREFIX\020\000\022\014\n\010NEIGHBOR\020\001\022\007\n\003TAG\020\002\022\013\n\007AS"
    "_PATH\020\003\022\r\n\tCOMMUNITY\020\004\022\021\n\rEXT_COMMUNITY\020"
    "\005*)\n\tMatchType\022\007\n\003ANY\020\000\022\007\n\003ALL\020\001\022\n\n\006INVE"
    "RT\020\002**\n\020AsPathLengthType\022\006\n\002EQ\020\000\022\006\n\002GE\020\001"
    "\022\006\n\002LE\020\002*/\n\013RouteAction\022\010\n\004NONE\020\000\022\n\n\006ACC"
    "EPT\020\001\022\n\n\006REJECT\020\002*U\n\023CommunityActionType"
    "\022\021\n\rCOMMUNITY_ADD\020\000\022\024\n\020COMMUNITY_REMOVE\020"
    "\001\022\025\n\021COMMUNITY_REPLACE\020\002*-\n\rMedActionTyp"
    "e\022\013\n\007MED_MOD\020\000\022\017\n\013MED_REPLACE\020\001*,\n\nPolic"
    "yType\022\006\n\002IN\020\000\022\n\n\006IMPORT\020\001\022\n\n\006EXPORT\020\0022\352\021"
    "\n\010GobgpApi\022:\n\017GetGlobalConfig\022\023.gobgpapi"
    ".Arguments\032\020.gobgpapi.Global\"\000\022H\n\017ModGlo"
    "balConfig\022\".gobgpapi.ModGlobalConfigArgu"
    "ments\032\017.gobgpapi.Error\"\000\0227\n\014GetNeighbors"
    "\022\023.gobgpapi.Arguments\032\016.gobgpapi.Peer\"\0000"
    "\001\0224\n\013GetNeighbor\022\023.gobgpapi.Arguments\032\016."
    "gobgpapi.Peer\"\000\022@\n\013ModNeighbor\022\036.gobgpap"
    "i.ModNeighborArguments\032\017.gobgpapi.Error\""
    "\000\022,\n\006GetRib\022\017.gobgpapi.Table\032\017.gobgpapi."
    "Table\"\000\022/\n\005Reset\022\023.gobgpapi.Arguments\032\017."
    "gobgpapi.Error\"\000\0223\n\tSoftReset\022\023.gobgpapi"
    ".Arguments\032\017.gobgpapi.Error\"\000\0225\n\013SoftRes"
    "etIn\022\023.gobgpapi.Arguments\032\017.gobgpapi.Err"
    "or\"\000\0226\n\014SoftResetOut\022\023.gobgpapi.Argument"
    "s\032\017.gobgpapi.Error\"\000\0222\n\010Shutdown\022\023.gobgp"
    "api.Arguments\032\017.gobgpapi.Error\"\000\0220\n\006Enab"
    "le\022\023.gobgpapi.Arguments\032\017.gobgpapi.Error"
    "\"\000\0221\n\007Disable\022\023.gobgpapi.Arguments\032\017.gob"
    "gpapi.Error\"\000\022B\n\007ModPath\022\032.gobgpapi.ModP"
    "athArguments\032\031.gobgpapi.ModPathResponse\""
    "\000\022<\n\010ModPaths\022\033.gobgpapi.ModPathsArgumen"
    "ts\032\017.gobgpapi.Error\"\000(\001\0228\n\nMonitorRib\022\017."
    "gobgpapi.Table\032\025.gobgpapi.Destination\"\0000"
    "\001\022D\n\022MonitorBestChanged\022\023.gobgpapi.Argum"
    "ents\032\025.gobgpapi.Destination\"\0000\001\022;\n\020Monit"
    "orPeerState\022\023.gobgpapi.Arguments\032\016.gobgp"
    "api.Peer\"\0000\001\022D\n\024MonitorROAValidation\022\023.g"
    "obgpapi.Arguments\032\023.gobgpapi.ROAResult\"\000"
    "0\001\022:\n\006GetMrt\022\026.gobgpapi.MrtArguments\032\024.g"
    "obgpapi.MrtMessage\"\0000\001\0226\n\006ModMrt\022\031.gobgp"
    "api.ModMrtArguments\032\017.gobgpapi.Error\"\000\0226"
    "\n\006ModBmp\022\031.gobgpapi.ModBmpArguments\032\017.go"
    "bgpapi.Error\"\000\0222\n\007GetRPKI\022\023.gobgpapi.Arg"
    "uments\032\016.gobgpapi.RPKI\"\0000\001\0228\n\007ModRPKI\022\032."
    "gobgpapi.ModRpkiArguments\032\017.gobgpapi.Err"
    "or\"\000\0220\n\006GetROA\022\023.gobgpapi.Arguments\032\r.go"
    "bgpapi.ROA\"\0000\001\0221\n\007GetVrfs\022\023.gobgpapi.Arg"
    "uments\032\r.gobgpapi.Vrf\"\0000\001\0226\n\006ModVrf\022\031.go"
    "bgpapi.ModVrfArguments\032\017.gobgpapi.Error\""
    "\000\022=\n\rGetDefinedSet\022\024.gobgpapi.DefinedSet"
    "\032\024.gobgpapi.DefinedSet\"\000\022@\n\016GetDefinedSe"
    "ts\022\024.gobgpapi.DefinedSet\032\024.gobgpapi.Defi"
    "nedSet\"\0000\001\022D\n\rModDefinedSet\022 .gobgpapi.M"
    "odDefinedSetArguments\032\017.gobgpapi.Error\"\000"
    "\022:\n\014GetStatement\022\023.gobgpapi.Statement\032\023."
    "gobgpapi.Statement\"\000\022=\n\rGetStatements\022\023."
    "gobgpapi.Statement\032\023.gobgpapi.Statement\""
    "\0000\001\022B\n\014ModStatement\022\037.gobgpapi.ModStatem"
    "entArguments\032\017.gobgpapi.Error\"\000\0221\n\tGetPo"
    "licy\022\020.gobgpapi.Policy\032\020.gobgpapi.Policy"
    "\"\000\0225\n\013GetPolicies\022\020.gobgpapi.Policy\032\020.go"
    "bgpapi.Policy\"\0000\001\022<\n\tModPolicy\022\034.gobgpap"
    "i.ModPolicyArguments\032\017.gobgpapi.Error\"\000\022"
    "O\n\023GetPolicyAssignment\022\032.gobgpapi.Policy"
    "Assignment\032\032.gobgpapi.PolicyAssignment\"\000"
    "\022P\n\023ModPolicyAssignment\022&.gobgpapi.ModPo"
    "licyAssignmentArguments\032\017.gobgpapi.Error"
    "\"\000b\006proto3", 10250);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gobgp_api_client.proto", &protobuf_RegisterTypes);
  Error::default_instance_ = new Error();
  Arguments::default_instance_ = new Arguments();
  ModPathArguments::default_instance_ = new ModPathArguments();
  ModPathResponse::default_instance_ = new ModPathResponse();
  ModPathsArguments::default_instance_ = new ModPathsArguments();
  ModNeighborArguments::default_instance_ = new ModNeighborArguments();
  MrtArguments::default_instance_ = new MrtArguments();
  ModMrtArguments::default_instance_ = new ModMrtArguments();
  ModBmpArguments::default_instance_ = new ModBmpArguments();
  ModRpkiArguments::default_instance_ = new ModRpkiArguments();
  ModVrfArguments::default_instance_ = new ModVrfArguments();
  ModDefinedSetArguments::default_instance_ = new ModDefinedSetArguments();
  ModStatementArguments::default_instance_ = new ModStatementArguments();
  ModPolicyArguments::default_instance_ = new ModPolicyArguments();
  ModPolicyAssignmentArguments::default_instance_ = new ModPolicyAssignmentArguments();
  ModGlobalConfigArguments::default_instance_ = new ModGlobalConfigArguments();
  Path::default_instance_ = new Path();
  Destination::default_instance_ = new Destination();
  Table::default_instance_ = new Table();
  Peer::default_instance_ = new Peer();
  ApplyPolicy::default_instance_ = new ApplyPolicy();
  PeerConf::default_instance_ = new PeerConf();
  EbgpMultihop::default_instance_ = new EbgpMultihop();
  RouteReflector::default_instance_ = new RouteReflector();
  PeerState::default_instance_ = new PeerState();
  Messages::default_instance_ = new Messages();
  Message::default_instance_ = new Message();
  Queues::default_instance_ = new Queues();
  Timers::default_instance_ = new Timers();
  TimersConfig::default_instance_ = new TimersConfig();
  TimersState::default_instance_ = new TimersState();
  Transport::default_instance_ = new Transport();
  RouteServer::default_instance_ = new RouteServer();
  Prefix::default_instance_ = new Prefix();
  DefinedSet::default_instance_ = new DefinedSet();
  MatchSet::default_instance_ = new MatchSet();
  AsPathLength::default_instance_ = new AsPathLength();
  Conditions::default_instance_ = new Conditions();
  CommunityAction::default_instance_ = new CommunityAction();
  MedAction::default_instance_ = new MedAction();
  AsPrependAction::default_instance_ = new AsPrependAction();
  Actions::default_instance_ = new Actions();
  Statement::default_instance_ = new Statement();
  Policy::default_instance_ = new Policy();
  PolicyAssignment::default_instance_ = new PolicyAssignment();
  MrtMessage::default_instance_ = new MrtMessage();
  RPKIConf::default_instance_ = new RPKIConf();
  RPKIState::default_instance_ = new RPKIState();
  RPKI::default_instance_ = new RPKI();
  ROA::default_instance_ = new ROA();
  ROAResult::default_instance_ = new ROAResult();
  Vrf::default_instance_ = new Vrf();
  Global::default_instance_ = new Global();
  Error::default_instance_->InitAsDefaultInstance();
  Arguments::default_instance_->InitAsDefaultInstance();
  ModPathArguments::default_instance_->InitAsDefaultInstance();
  ModPathResponse::default_instance_->InitAsDefaultInstance();
  ModPathsArguments::default_instance_->InitAsDefaultInstance();
  ModNeighborArguments::default_instance_->InitAsDefaultInstance();
  MrtArguments::default_instance_->InitAsDefaultInstance();
  ModMrtArguments::default_instance_->InitAsDefaultInstance();
  ModBmpArguments::default_instance_->InitAsDefaultInstance();
  ModRpkiArguments::default_instance_->InitAsDefaultInstance();
  ModVrfArguments::default_instance_->InitAsDefaultInstance();
  ModDefinedSetArguments::default_instance_->InitAsDefaultInstance();
  ModStatementArguments::default_instance_->InitAsDefaultInstance();
  ModPolicyArguments::default_instance_->InitAsDefaultInstance();
  ModPolicyAssignmentArguments::default_instance_->InitAsDefaultInstance();
  ModGlobalConfigArguments::default_instance_->InitAsDefaultInstance();
  Path::default_instance_->InitAsDefaultInstance();
  Destination::default_instance_->InitAsDefaultInstance();
  Table::default_instance_->InitAsDefaultInstance();
  Peer::default_instance_->InitAsDefaultInstance();
  ApplyPolicy::default_instance_->InitAsDefaultInstance();
  PeerConf::default_instance_->InitAsDefaultInstance();
  EbgpMultihop::default_instance_->InitAsDefaultInstance();
  RouteReflector::default_instance_->InitAsDefaultInstance();
  PeerState::default_instance_->InitAsDefaultInstance();
  Messages::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  Queues::default_instance_->InitAsDefaultInstance();
  Timers::default_instance_->InitAsDefaultInstance();
  TimersConfig::default_instance_->InitAsDefaultInstance();
  TimersState::default_instance_->InitAsDefaultInstance();
  Transport::default_instance_->InitAsDefaultInstance();
  RouteServer::default_instance_->InitAsDefaultInstance();
  Prefix::default_instance_->InitAsDefaultInstance();
  DefinedSet::default_instance_->InitAsDefaultInstance();
  MatchSet::default_instance_->InitAsDefaultInstance();
  AsPathLength::default_instance_->InitAsDefaultInstance();
  Conditions::default_instance_->InitAsDefaultInstance();
  CommunityAction::default_instance_->InitAsDefaultInstance();
  MedAction::default_instance_->InitAsDefaultInstance();
  AsPrependAction::default_instance_->InitAsDefaultInstance();
  Actions::default_instance_->InitAsDefaultInstance();
  Statement::default_instance_->InitAsDefaultInstance();
  Policy::default_instance_->InitAsDefaultInstance();
  PolicyAssignment::default_instance_->InitAsDefaultInstance();
  MrtMessage::default_instance_->InitAsDefaultInstance();
  RPKIConf::default_instance_->InitAsDefaultInstance();
  RPKIState::default_instance_->InitAsDefaultInstance();
  RPKI::default_instance_->InitAsDefaultInstance();
  ROA::default_instance_->InitAsDefaultInstance();
  ROAResult::default_instance_->InitAsDefaultInstance();
  Vrf::default_instance_->InitAsDefaultInstance();
  Global::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gobgp_5fapi_5fclient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gobgp_5fapi_5fclient_2eproto {
  StaticDescriptorInitializer_gobgp_5fapi_5fclient_2eproto() {
    protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  }
} static_descriptor_initializer_gobgp_5fapi_5fclient_2eproto_;
const ::google::protobuf::EnumDescriptor* Resource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_descriptor_;
}
bool Resource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Operation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_descriptor_;
}
bool Operation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DefinedType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DefinedType_descriptor_;
}
bool DefinedType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MatchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchType_descriptor_;
}
bool MatchType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AsPathLengthType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AsPathLengthType_descriptor_;
}
bool AsPathLengthType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RouteAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteAction_descriptor_;
}
bool RouteAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CommunityActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommunityActionType_descriptor_;
}
bool CommunityActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MedActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MedActionType_descriptor_;
}
bool MedActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PolicyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PolicyType_descriptor_;
}
bool PolicyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Error_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_ErrorCode_descriptor_;
}
bool Error_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Error_ErrorCode Error::SUCCESS;
const Error_ErrorCode Error::FAIL;
const Error_ErrorCode Error::ErrorCode_MIN;
const Error_ErrorCode Error::ErrorCode_MAX;
const int Error::ErrorCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Error::kCodeFieldNumber;
const int Error::kMsgFieldNumber;
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Error)
}

void Error::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Error::Error(const Error& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Error)
}

void Error::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:gobgpapi.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
  code_ = 0;
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.Error.ErrorCode code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::gobgpapi::Error_ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Error.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Error)
  // optional .gobgpapi.Error.ErrorCode code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Error.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.Error)
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Error)
  // optional .gobgpapi.Error.ErrorCode code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Error.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Error)
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.Error.ErrorCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Error* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {

  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  std::swap(code_, other->code_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// optional .gobgpapi.Error.ErrorCode code = 1;
void Error::clear_code() {
  code_ = 0;
}
 ::gobgpapi::Error_ErrorCode Error::code() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Error.code)
  return static_cast< ::gobgpapi::Error_ErrorCode >(code_);
}
 void Error::set_code(::gobgpapi::Error_ErrorCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Error.code)
}

// optional string msg = 2;
void Error::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Error::msg() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Error.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Error::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Error.msg)
}
 void Error::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Error.msg)
}
 void Error::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Error.msg)
}
 ::std::string* Error::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Error.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Error::release_msg() {
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Error::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Error.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Arguments::kResourceFieldNumber;
const int Arguments::kFamilyFieldNumber;
const int Arguments::kNameFieldNumber;
#endif  // !_MSC_VER

Arguments::Arguments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Arguments)
}

void Arguments::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Arguments::Arguments(const Arguments& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Arguments)
}

void Arguments::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resource_ = 0;
  family_ = 0u;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Arguments::~Arguments() {
  // @@protoc_insertion_point(destructor:gobgpapi.Arguments)
  SharedDtor();
}

void Arguments::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Arguments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Arguments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Arguments_descriptor_;
}

const Arguments& Arguments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

Arguments* Arguments::default_instance_ = NULL;

Arguments* Arguments::New(::google::protobuf::Arena* arena) const {
  Arguments* n = new Arguments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Arguments::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Arguments*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(resource_, family_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Arguments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Arguments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.Resource resource = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_resource(static_cast< ::gobgpapi::Resource >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_family;
        break;
      }

      // optional uint32 family = 2;
      case 2: {
        if (tag == 16) {
         parse_family:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Arguments.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Arguments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Arguments)
  return false;
#undef DO_
}

void Arguments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Arguments)
  // optional .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->resource(), output);
  }

  // optional uint32 family = 2;
  if (this->family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Arguments.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.Arguments)
}

::google::protobuf::uint8* Arguments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Arguments)
  // optional .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->resource(), target);
  }

  // optional uint32 family = 2;
  if (this->family() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Arguments.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Arguments)
  return target;
}

int Arguments::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->resource());
  }

  // optional uint32 family = 2;
  if (this->family() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->family());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Arguments::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Arguments* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Arguments>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Arguments::MergeFrom(const Arguments& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.resource() != 0) {
    set_resource(from.resource());
  }
  if (from.family() != 0) {
    set_family(from.family());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Arguments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Arguments::CopyFrom(const Arguments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arguments::IsInitialized() const {

  return true;
}

void Arguments::Swap(Arguments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Arguments::InternalSwap(Arguments* other) {
  std::swap(resource_, other->resource_);
  std::swap(family_, other->family_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Arguments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Arguments_descriptor_;
  metadata.reflection = Arguments_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Arguments

// optional .gobgpapi.Resource resource = 1;
void Arguments::clear_resource() {
  resource_ = 0;
}
 ::gobgpapi::Resource Arguments::resource() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Arguments.resource)
  return static_cast< ::gobgpapi::Resource >(resource_);
}
 void Arguments::set_resource(::gobgpapi::Resource value) {
  
  resource_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Arguments.resource)
}

// optional uint32 family = 2;
void Arguments::clear_family() {
  family_ = 0u;
}
 ::google::protobuf::uint32 Arguments::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Arguments.family)
  return family_;
}
 void Arguments::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Arguments.family)
}

// optional string name = 3;
void Arguments::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Arguments::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Arguments.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Arguments::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Arguments.name)
}
 void Arguments::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Arguments.name)
}
 void Arguments::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Arguments.name)
}
 ::std::string* Arguments::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Arguments.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Arguments::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Arguments::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Arguments.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ModPathArguments::kOperationFieldNumber;
const int ModPathArguments::kResourceFieldNumber;
const int ModPathArguments::kNameFieldNumber;
const int ModPathArguments::kPathFieldNumber;
const int ModPathArguments::kUuidFieldNumber;
const int ModPathArguments::kFamilyFieldNumber;
#endif  // !_MSC_VER

ModPathArguments::ModPathArguments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ModPathArguments)
}

void ModPathArguments::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  path_ = const_cast< ::gobgpapi::Path*>(&::gobgpapi::Path::default_instance());
}

ModPathArguments::ModPathArguments(const ModPathArguments& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ModPathArguments)
}

void ModPathArguments::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  operation_ = 0;
  resource_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_ = NULL;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  family_ = 0u;
}

ModPathArguments::~ModPathArguments() {
  // @@protoc_insertion_point(destructor:gobgpapi.ModPathArguments)
  SharedDtor();
}

void ModPathArguments::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete path_;
  }
}

void ModPathArguments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModPathArguments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModPathArguments_descriptor_;
}

const ModPathArguments& ModPathArguments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

ModPathArguments* ModPathArguments::default_instance_ = NULL;

ModPathArguments* ModPathArguments::New(::google::protobuf::Arena* arena) const {
  ModPathArguments* n = new ModPathArguments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModPathArguments::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ModPathArguments*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(operation_, resource_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  family_ = 0u;

#undef ZR_HELPER_
#undef ZR_

}

bool ModPathArguments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ModPathArguments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.Operation operation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation(static_cast< ::gobgpapi::Operation >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_resource;
        break;
      }

      // optional .gobgpapi.Resource resource = 2;
      case 2: {
        if (tag == 16) {
         parse_resource:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_resource(static_cast< ::gobgpapi::Resource >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.ModPathArguments.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_path;
        break;
      }

      // optional .gobgpapi.Path path = 4;
      case 4: {
        if (tag == 34) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_uuid;
        break;
      }

      // optional bytes uuid = 5;
      case 5: {
        if (tag == 42) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_family;
        break;
      }

      // optional uint32 family = 6;
      case 6: {
        if (tag == 48) {
         parse_family:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ModPathArguments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ModPathArguments)
  return false;
#undef DO_
}

void ModPathArguments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ModPathArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // optional .gobgpapi.Resource resource = 2;
  if (this->resource() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->resource(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ModPathArguments.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .gobgpapi.Path path = 4;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->path_, output);
  }

  // optional bytes uuid = 5;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->uuid(), output);
  }

  // optional uint32 family = 6;
  if (this->family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->family(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.ModPathArguments)
}

::google::protobuf::uint8* ModPathArguments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ModPathArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // optional .gobgpapi.Resource resource = 2;
  if (this->resource() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->resource(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ModPathArguments.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .gobgpapi.Path path = 4;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->path_, target);
  }

  // optional bytes uuid = 5;
  if (this->uuid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->uuid(), target);
  }

  // optional uint32 family = 6;
  if (this->family() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->family(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ModPathArguments)
  return target;
}

int ModPathArguments::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
  }

  // optional .gobgpapi.Resource resource = 2;
  if (this->resource() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->resource());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .gobgpapi.Path path = 4;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_);
  }

  // optional bytes uuid = 5;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uuid());
  }

  // optional uint32 family = 6;
  if (this->family() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->family());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModPathArguments::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModPathArguments* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModPathArguments>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModPathArguments::MergeFrom(const ModPathArguments& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.operation() != 0) {
    set_operation(from.operation());
  }
  if (from.resource() != 0) {
    set_resource(from.resource());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_path()) {
    mutable_path()->::gobgpapi::Path::MergeFrom(from.path());
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.family() != 0) {
    set_family(from.family());
  }
}

void ModPathArguments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModPathArguments::CopyFrom(const ModPathArguments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModPathArguments::IsInitialized() const {

  return true;
}

void ModPathArguments::Swap(ModPathArguments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModPathArguments::InternalSwap(ModPathArguments* other) {
  std::swap(operation_, other->operation_);
  std::swap(resource_, other->resource_);
  name_.Swap(&other->name_);
  std::swap(path_, other->path_);
  uuid_.Swap(&other->uuid_);
  std::swap(family_, other->family_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModPathArguments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModPathArguments_descriptor_;
  metadata.reflection = ModPathArguments_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModPathArguments

// optional .gobgpapi.Operation operation = 1;
void ModPathArguments::clear_operation() {
  operation_ = 0;
}
 ::gobgpapi::Operation ModPathArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPathArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
 void ModPathArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModPathArguments.operation)
}

// optional .gobgpapi.Resource resource = 2;
void ModPathArguments::clear_resource() {
  resource_ = 0;
}
 ::gobgpapi::Resource ModPathArguments::resource() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPathArguments.resource)
  return static_cast< ::gobgpapi::Resource >(resource_);
}
 void ModPathArguments::set_resource(::gobgpapi::Resource value) {
  
  resource_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModPathArguments.resource)
}

// optional string name = 3;
void ModPathArguments::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ModPathArguments::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPathArguments.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModPathArguments::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ModPathArguments.name)
}
 void ModPathArguments::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ModPathArguments.name)
}
 void ModPathArguments::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ModPathArguments.name)
}
 ::std::string* ModPathArguments::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModPathArguments.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModPathArguments::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModPathArguments::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModPathArguments.name)
}

// optional .gobgpapi.Path path = 4;
bool ModPathArguments::has_path() const {
  return !_is_default_instance_ && path_ != NULL;
}
void ModPathArguments::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}
const ::gobgpapi::Path& ModPathArguments::path() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPathArguments.path)
  return path_ != NULL ? *path_ : *default_instance_->path_;
}
::gobgpapi::Path* ModPathArguments::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::gobgpapi::Path;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModPathArguments.path)
  return path_;
}
::gobgpapi::Path* ModPathArguments::release_path() {
  
  ::gobgpapi::Path* temp = path_;
  path_ = NULL;
  return temp;
}
void ModPathArguments::set_allocated_path(::gobgpapi::Path* path) {
  delete path_;
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModPathArguments.path)
}

// optional bytes uuid = 5;
void ModPathArguments::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ModPathArguments::uuid() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPathArguments.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModPathArguments::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ModPathArguments.uuid)
}
 void ModPathArguments::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ModPathArguments.uuid)
}
 void ModPathArguments::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ModPathArguments.uuid)
}
 ::std::string* ModPathArguments::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModPathArguments.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModPathArguments::release_uuid() {
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModPathArguments::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModPathArguments.uuid)
}

// optional uint32 family = 6;
void ModPathArguments::clear_family() {
  family_ = 0u;
}
 ::google::protobuf::uint32 ModPathArguments::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPathArguments.family)
  return family_;
}
 void ModPathArguments::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModPathArguments.family)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ModPathResponse::kUuidFieldNumber;
#endif  // !_MSC_VER

ModPathResponse::ModPathResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ModPathResponse)
}

void ModPathResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ModPathResponse::ModPathResponse(const ModPathResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ModPathResponse)
}

void ModPathResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ModPathResponse::~ModPathResponse() {
  // @@protoc_insertion_point(destructor:gobgpapi.ModPathResponse)
  SharedDtor();
}

void ModPathResponse::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ModPathResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModPathResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModPathResponse_descriptor_;
}

const ModPathResponse& ModPathResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

ModPathResponse* ModPathResponse::default_instance_ = NULL;

ModPathResponse* ModPathResponse::New(::google::protobuf::Arena* arena) const {
  ModPathResponse* n = new ModPathResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModPathResponse::Clear() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ModPathResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ModPathResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ModPathResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ModPathResponse)
  return false;
#undef DO_
}

void ModPathResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ModPathResponse)
  // optional bytes uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->uuid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.ModPathResponse)
}

::google::protobuf::uint8* ModPathResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ModPathResponse)
  // optional bytes uuid = 1;
  if (this->uuid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ModPathResponse)
  return target;
}

int ModPathResponse::ByteSize() const {
  int total_size = 0;

  // optional bytes uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uuid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModPathResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModPathResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModPathResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModPathResponse::MergeFrom(const ModPathResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
}

void ModPathResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModPathResponse::CopyFrom(const ModPathResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModPathResponse::IsInitialized() const {

  return true;
}

void ModPathResponse::Swap(ModPathResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModPathResponse::InternalSwap(ModPathResponse* other) {
  uuid_.Swap(&other->uuid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModPathResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModPathResponse_descriptor_;
  metadata.reflection = ModPathResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModPathResponse

// optional bytes uuid = 1;
void ModPathResponse::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ModPathResponse::uuid() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPathResponse.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModPathResponse::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ModPathResponse.uuid)
}
 void ModPathResponse::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ModPathResponse.uuid)
}
 void ModPathResponse::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ModPathResponse.uuid)
}
 ::std::string* ModPathResponse::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModPathResponse.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModPathResponse::release_uuid() {
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModPathResponse::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModPathResponse.uuid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ModPathsArguments::kResourceFieldNumber;
const int ModPathsArguments::kNameFieldNumber;
const int ModPathsArguments::kPathsFieldNumber;
#endif  // !_MSC_VER

ModPathsArguments::ModPathsArguments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ModPathsArguments)
}

void ModPathsArguments::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ModPathsArguments::ModPathsArguments(const ModPathsArguments& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ModPathsArguments)
}

void ModPathsArguments::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resource_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ModPathsArguments::~ModPathsArguments() {
  // @@protoc_insertion_point(destructor:gobgpapi.ModPathsArguments)
  SharedDtor();
}

void ModPathsArguments::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ModPathsArguments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModPathsArguments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModPathsArguments_descriptor_;
}

const ModPathsArguments& ModPathsArguments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

ModPathsArguments* ModPathsArguments::default_instance_ = NULL;

ModPathsArguments* ModPathsArguments::New(::google::protobuf::Arena* arena) const {
  ModPathsArguments* n = new ModPathsArguments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModPathsArguments::Clear() {
  resource_ = 0;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paths_.Clear();
}

bool ModPathsArguments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ModPathsArguments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.Resource resource = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_resource(static_cast< ::gobgpapi::Resource >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.ModPathsArguments.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_paths;
        break;
      }

      // repeated .gobgpapi.Path paths = 3;
      case 3: {
        if (tag == 26) {
         parse_paths:
          DO_(input->IncrementRecursionDepth());
         parse_loop_paths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_paths()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_paths;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ModPathsArguments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ModPathsArguments)
  return false;
#undef DO_
}

void ModPathsArguments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ModPathsArguments)
  // optional .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->resource(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ModPathsArguments.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .gobgpapi.Path paths = 3;
  for (unsigned int i = 0, n = this->paths_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->paths(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.ModPathsArguments)
}

::google::protobuf::uint8* ModPathsArguments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ModPathsArguments)
  // optional .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->resource(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ModPathsArguments.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .gobgpapi.Path paths = 3;
  for (unsigned int i = 0, n = this->paths_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->paths(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ModPathsArguments)
  return target;
}

int ModPathsArguments::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->resource());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated .gobgpapi.Path paths = 3;
  total_size += 1 * this->paths_size();
  for (int i = 0; i < this->paths_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paths(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModPathsArguments::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModPathsArguments* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModPathsArguments>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModPathsArguments::MergeFrom(const ModPathsArguments& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  paths_.MergeFrom(from.paths_);
  if (from.resource() != 0) {
    set_resource(from.resource());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ModPathsArguments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModPathsArguments::CopyFrom(const ModPathsArguments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModPathsArguments::IsInitialized() const {

  return true;
}

void ModPathsArguments::Swap(ModPathsArguments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModPathsArguments::InternalSwap(ModPathsArguments* other) {
  std::swap(resource_, other->resource_);
  name_.Swap(&other->name_);
  paths_.UnsafeArenaSwap(&other->paths_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModPathsArguments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModPathsArguments_descriptor_;
  metadata.reflection = ModPathsArguments_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModPathsArguments

// optional .gobgpapi.Resource resource = 1;
void ModPathsArguments::clear_resource() {
  resource_ = 0;
}
 ::gobgpapi::Resource ModPathsArguments::resource() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPathsArguments.resource)
  return static_cast< ::gobgpapi::Resource >(resource_);
}
 void ModPathsArguments::set_resource(::gobgpapi::Resource value) {
  
  resource_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModPathsArguments.resource)
}

// optional string name = 2;
void ModPathsArguments::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ModPathsArguments::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPathsArguments.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModPathsArguments::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ModPathsArguments.name)
}
 void ModPathsArguments::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ModPathsArguments.name)
}
 void ModPathsArguments::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ModPathsArguments.name)
}
 ::std::string* ModPathsArguments::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModPathsArguments.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModPathsArguments::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModPathsArguments::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModPathsArguments.name)
}

// repeated .gobgpapi.Path paths = 3;
int ModPathsArguments::paths_size() const {
  return paths_.size();
}
void ModPathsArguments::clear_paths() {
  paths_.Clear();
}
const ::gobgpapi::Path& ModPathsArguments::paths(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPathsArguments.paths)
  return paths_.Get(index);
}
::gobgpapi::Path* ModPathsArguments::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModPathsArguments.paths)
  return paths_.Mutable(index);
}
::gobgpapi::Path* ModPathsArguments::add_paths() {
  // @@protoc_insertion_point(field_add:gobgpapi.ModPathsArguments.paths)
  return paths_.Add();
}
::google::protobuf::RepeatedPtrField< ::gobgpapi::Path >*
ModPathsArguments::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.ModPathsArguments.paths)
  return &paths_;
}
const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path >&
ModPathsArguments::paths() const {
  // @@protoc_insertion_point(field_list:gobgpapi.ModPathsArguments.paths)
  return paths_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ModNeighborArguments::kOperationFieldNumber;
const int ModNeighborArguments::kPeerFieldNumber;
#endif  // !_MSC_VER

ModNeighborArguments::ModNeighborArguments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ModNeighborArguments)
}

void ModNeighborArguments::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  peer_ = const_cast< ::gobgpapi::Peer*>(&::gobgpapi::Peer::default_instance());
}

ModNeighborArguments::ModNeighborArguments(const ModNeighborArguments& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ModNeighborArguments)
}

void ModNeighborArguments::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  operation_ = 0;
  peer_ = NULL;
}

ModNeighborArguments::~ModNeighborArguments() {
  // @@protoc_insertion_point(destructor:gobgpapi.ModNeighborArguments)
  SharedDtor();
}

void ModNeighborArguments::SharedDtor() {
  if (this != default_instance_) {
    delete peer_;
  }
}

void ModNeighborArguments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModNeighborArguments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModNeighborArguments_descriptor_;
}

const ModNeighborArguments& ModNeighborArguments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

ModNeighborArguments* ModNeighborArguments::default_instance_ = NULL;

ModNeighborArguments* ModNeighborArguments::New(::google::protobuf::Arena* arena) const {
  ModNeighborArguments* n = new ModNeighborArguments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModNeighborArguments::Clear() {
  operation_ = 0;
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}

bool ModNeighborArguments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ModNeighborArguments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.Operation operation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation(static_cast< ::gobgpapi::Operation >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_peer;
        break;
      }

      // optional .gobgpapi.Peer peer = 2;
      case 2: {
        if (tag == 18) {
         parse_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ModNeighborArguments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ModNeighborArguments)
  return false;
#undef DO_
}

void ModNeighborArguments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ModNeighborArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // optional .gobgpapi.Peer peer = 2;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->peer_, output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.ModNeighborArguments)
}

::google::protobuf::uint8* ModNeighborArguments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ModNeighborArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // optional .gobgpapi.Peer peer = 2;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->peer_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ModNeighborArguments)
  return target;
}

int ModNeighborArguments::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
  }

  // optional .gobgpapi.Peer peer = 2;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModNeighborArguments::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModNeighborArguments* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModNeighborArguments>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModNeighborArguments::MergeFrom(const ModNeighborArguments& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.operation() != 0) {
    set_operation(from.operation());
  }
  if (from.has_peer()) {
    mutable_peer()->::gobgpapi::Peer::MergeFrom(from.peer());
  }
}

void ModNeighborArguments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModNeighborArguments::CopyFrom(const ModNeighborArguments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModNeighborArguments::IsInitialized() const {

  return true;
}

void ModNeighborArguments::Swap(ModNeighborArguments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModNeighborArguments::InternalSwap(ModNeighborArguments* other) {
  std::swap(operation_, other->operation_);
  std::swap(peer_, other->peer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModNeighborArguments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModNeighborArguments_descriptor_;
  metadata.reflection = ModNeighborArguments_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModNeighborArguments

// optional .gobgpapi.Operation operation = 1;
void ModNeighborArguments::clear_operation() {
  operation_ = 0;
}
 ::gobgpapi::Operation ModNeighborArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModNeighborArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
 void ModNeighborArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModNeighborArguments.operation)
}

// optional .gobgpapi.Peer peer = 2;
bool ModNeighborArguments::has_peer() const {
  return !_is_default_instance_ && peer_ != NULL;
}
void ModNeighborArguments::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
const ::gobgpapi::Peer& ModNeighborArguments::peer() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModNeighborArguments.peer)
  return peer_ != NULL ? *peer_ : *default_instance_->peer_;
}
::gobgpapi::Peer* ModNeighborArguments::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::gobgpapi::Peer;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModNeighborArguments.peer)
  return peer_;
}
::gobgpapi::Peer* ModNeighborArguments::release_peer() {
  
  ::gobgpapi::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void ModNeighborArguments::set_allocated_peer(::gobgpapi::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModNeighborArguments.peer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MrtArguments::kResourceFieldNumber;
const int MrtArguments::kFamilyFieldNumber;
const int MrtArguments::kIntervalFieldNumber;
const int MrtArguments::kNeighborAddressFieldNumber;
#endif  // !_MSC_VER

MrtArguments::MrtArguments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MrtArguments)
}

void MrtArguments::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MrtArguments::MrtArguments(const MrtArguments& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MrtArguments)
}

void MrtArguments::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resource_ = 0;
  family_ = 0u;
  interval_ = GOOGLE_ULONGLONG(0);
  neighbor_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MrtArguments::~MrtArguments() {
  // @@protoc_insertion_point(destructor:gobgpapi.MrtArguments)
  SharedDtor();
}

void MrtArguments::SharedDtor() {
  neighbor_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MrtArguments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MrtArguments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MrtArguments_descriptor_;
}

const MrtArguments& MrtArguments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

MrtArguments* MrtArguments::default_instance_ = NULL;

MrtArguments* MrtArguments::New(::google::protobuf::Arena* arena) const {
  MrtArguments* n = new MrtArguments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MrtArguments::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MrtArguments*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(resource_, interval_);
  neighbor_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MrtArguments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.MrtArguments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.Resource resource = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_resource(static_cast< ::gobgpapi::Resource >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_family;
        break;
      }

      // optional uint32 family = 2;
      case 2: {
        if (tag == 16) {
         parse_family:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_interval;
        break;
      }

      // optional uint64 interval = 3;
      case 3: {
        if (tag == 24) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &interval_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_neighbor_address;
        break;
      }

      // optional string neighbor_address = 4;
      case 4: {
        if (tag == 34) {
         parse_neighbor_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neighbor_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neighbor_address().data(), this->neighbor_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.MrtArguments.neighbor_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.MrtArguments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.MrtArguments)
  return false;
#undef DO_
}

void MrtArguments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.MrtArguments)
  // optional .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->resource(), output);
  }

  // optional uint32 family = 2;
  if (this->family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->family(), output);
  }

  // optional uint64 interval = 3;
  if (this->interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->interval(), output);
  }

  // optional string neighbor_address = 4;
  if (this->neighbor_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neighbor_address().data(), this->neighbor_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.MrtArguments.neighbor_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->neighbor_address(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.MrtArguments)
}

::google::protobuf::uint8* MrtArguments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MrtArguments)
  // optional .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->resource(), target);
  }

  // optional uint32 family = 2;
  if (this->family() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->family(), target);
  }

  // optional uint64 interval = 3;
  if (this->interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->interval(), target);
  }

  // optional string neighbor_address = 4;
  if (this->neighbor_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neighbor_address().data(), this->neighbor_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.MrtArguments.neighbor_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->neighbor_address(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MrtArguments)
  return target;
}

int MrtArguments::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.Resource resource = 1;
  if (this->resource() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->resource());
  }

  // optional uint32 family = 2;
  if (this->family() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->family());
  }

  // optional uint64 interval = 3;
  if (this->interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->interval());
  }

  // optional string neighbor_address = 4;
  if (this->neighbor_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neighbor_address());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MrtArguments::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MrtArguments* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MrtArguments>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MrtArguments::MergeFrom(const MrtArguments& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.resource() != 0) {
    set_resource(from.resource());
  }
  if (from.family() != 0) {
    set_family(from.family());
  }
  if (from.interval() != 0) {
    set_interval(from.interval());
  }
  if (from.neighbor_address().size() > 0) {

    neighbor_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neighbor_address_);
  }
}

void MrtArguments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MrtArguments::CopyFrom(const MrtArguments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MrtArguments::IsInitialized() const {

  return true;
}

void MrtArguments::Swap(MrtArguments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MrtArguments::InternalSwap(MrtArguments* other) {
  std::swap(resource_, other->resource_);
  std::swap(family_, other->family_);
  std::swap(interval_, other->interval_);
  neighbor_address_.Swap(&other->neighbor_address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MrtArguments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MrtArguments_descriptor_;
  metadata.reflection = MrtArguments_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MrtArguments

// optional .gobgpapi.Resource resource = 1;
void MrtArguments::clear_resource() {
  resource_ = 0;
}
 ::gobgpapi::Resource MrtArguments::resource() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MrtArguments.resource)
  return static_cast< ::gobgpapi::Resource >(resource_);
}
 void MrtArguments::set_resource(::gobgpapi::Resource value) {
  
  resource_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MrtArguments.resource)
}

// optional uint32 family = 2;
void MrtArguments::clear_family() {
  family_ = 0u;
}
 ::google::protobuf::uint32 MrtArguments::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MrtArguments.family)
  return family_;
}
 void MrtArguments::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MrtArguments.family)
}

// optional uint64 interval = 3;
void MrtArguments::clear_interval() {
  interval_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 MrtArguments::interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MrtArguments.interval)
  return interval_;
}
 void MrtArguments::set_interval(::google::protobuf::uint64 value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MrtArguments.interval)
}

// optional string neighbor_address = 4;
void MrtArguments::clear_neighbor_address() {
  neighbor_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MrtArguments::neighbor_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MrtArguments.neighbor_address)
  return neighbor_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MrtArguments::set_neighbor_address(const ::std::string& value) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.MrtArguments.neighbor_address)
}
 void MrtArguments::set_neighbor_address(const char* value) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.MrtArguments.neighbor_address)
}
 void MrtArguments::set_neighbor_address(const char* value, size_t size) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.MrtArguments.neighbor_address)
}
 ::std::string* MrtArguments::mutable_neighbor_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.MrtArguments.neighbor_address)
  return neighbor_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MrtArguments::release_neighbor_address() {
  
  return neighbor_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MrtArguments::set_allocated_neighbor_address(::std::string* neighbor_address) {
  if (neighbor_address != NULL) {
    
  } else {
    
  }
  neighbor_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neighbor_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.MrtArguments.neighbor_address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ModMrtArguments::kOperationFieldNumber;
const int ModMrtArguments::kDumpTypeFieldNumber;
const int ModMrtArguments::kFilenameFieldNumber;
const int ModMrtArguments::kIntervalFieldNumber;
#endif  // !_MSC_VER

ModMrtArguments::ModMrtArguments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ModMrtArguments)
}

void ModMrtArguments::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ModMrtArguments::ModMrtArguments(const ModMrtArguments& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ModMrtArguments)
}

void ModMrtArguments::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  operation_ = 0;
  dump_type_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interval_ = GOOGLE_ULONGLONG(0);
}

ModMrtArguments::~ModMrtArguments() {
  // @@protoc_insertion_point(destructor:gobgpapi.ModMrtArguments)
  SharedDtor();
}

void ModMrtArguments::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ModMrtArguments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModMrtArguments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModMrtArguments_descriptor_;
}

const ModMrtArguments& ModMrtArguments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

ModMrtArguments* ModMrtArguments::default_instance_ = NULL;

ModMrtArguments* ModMrtArguments::New(::google::protobuf::Arena* arena) const {
  ModMrtArguments* n = new ModMrtArguments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModMrtArguments::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ModMrtArguments*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(operation_, dump_type_);
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interval_ = GOOGLE_ULONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

}

bool ModMrtArguments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ModMrtArguments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.Operation operation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation(static_cast< ::gobgpapi::Operation >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dump_type;
        break;
      }

      // optional int32 dump_type = 2;
      case 2: {
        if (tag == 16) {
         parse_dump_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dump_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_filename;
        break;
      }

      // optional string filename = 3;
      case 3: {
        if (tag == 26) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.ModMrtArguments.filename"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_interval;
        break;
      }

      // optional uint64 interval = 4;
      case 4: {
        if (tag == 32) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &interval_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ModMrtArguments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ModMrtArguments)
  return false;
#undef DO_
}

void ModMrtArguments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ModMrtArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // optional int32 dump_type = 2;
  if (this->dump_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dump_type(), output);
  }

  // optional string filename = 3;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ModMrtArguments.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  // optional uint64 interval = 4;
  if (this->interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->interval(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.ModMrtArguments)
}

::google::protobuf::uint8* ModMrtArguments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ModMrtArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // optional int32 dump_type = 2;
  if (this->dump_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dump_type(), target);
  }

  // optional string filename = 3;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ModMrtArguments.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // optional uint64 interval = 4;
  if (this->interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->interval(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ModMrtArguments)
  return target;
}

int ModMrtArguments::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
  }

  // optional int32 dump_type = 2;
  if (this->dump_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dump_type());
  }

  // optional string filename = 3;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // optional uint64 interval = 4;
  if (this->interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->interval());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModMrtArguments::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModMrtArguments* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModMrtArguments>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModMrtArguments::MergeFrom(const ModMrtArguments& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.operation() != 0) {
    set_operation(from.operation());
  }
  if (from.dump_type() != 0) {
    set_dump_type(from.dump_type());
  }
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.interval() != 0) {
    set_interval(from.interval());
  }
}

void ModMrtArguments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModMrtArguments::CopyFrom(const ModMrtArguments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModMrtArguments::IsInitialized() const {

  return true;
}

void ModMrtArguments::Swap(ModMrtArguments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModMrtArguments::InternalSwap(ModMrtArguments* other) {
  std::swap(operation_, other->operation_);
  std::swap(dump_type_, other->dump_type_);
  filename_.Swap(&other->filename_);
  std::swap(interval_, other->interval_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModMrtArguments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModMrtArguments_descriptor_;
  metadata.reflection = ModMrtArguments_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModMrtArguments

// optional .gobgpapi.Operation operation = 1;
void ModMrtArguments::clear_operation() {
  operation_ = 0;
}
 ::gobgpapi::Operation ModMrtArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModMrtArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
 void ModMrtArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModMrtArguments.operation)
}

// optional int32 dump_type = 2;
void ModMrtArguments::clear_dump_type() {
  dump_type_ = 0;
}
 ::google::protobuf::int32 ModMrtArguments::dump_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModMrtArguments.dump_type)
  return dump_type_;
}
 void ModMrtArguments::set_dump_type(::google::protobuf::int32 value) {
  
  dump_type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModMrtArguments.dump_type)
}

// optional string filename = 3;
void ModMrtArguments::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ModMrtArguments::filename() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModMrtArguments.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModMrtArguments::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ModMrtArguments.filename)
}
 void ModMrtArguments::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ModMrtArguments.filename)
}
 void ModMrtArguments::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ModMrtArguments.filename)
}
 ::std::string* ModMrtArguments::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModMrtArguments.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModMrtArguments::release_filename() {
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModMrtArguments::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModMrtArguments.filename)
}

// optional uint64 interval = 4;
void ModMrtArguments::clear_interval() {
  interval_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 ModMrtArguments::interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModMrtArguments.interval)
  return interval_;
}
 void ModMrtArguments::set_interval(::google::protobuf::uint64 value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModMrtArguments.interval)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ModBmpArguments_MonitoringPolicy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModBmpArguments_MonitoringPolicy_descriptor_;
}
bool ModBmpArguments_MonitoringPolicy_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ModBmpArguments_MonitoringPolicy ModBmpArguments::PRE;
const ModBmpArguments_MonitoringPolicy ModBmpArguments::POST;
const ModBmpArguments_MonitoringPolicy ModBmpArguments::BOTH;
const ModBmpArguments_MonitoringPolicy ModBmpArguments::MonitoringPolicy_MIN;
const ModBmpArguments_MonitoringPolicy ModBmpArguments::MonitoringPolicy_MAX;
const int ModBmpArguments::MonitoringPolicy_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ModBmpArguments::kOperationFieldNumber;
const int ModBmpArguments::kAddressFieldNumber;
const int ModBmpArguments::kPortFieldNumber;
const int ModBmpArguments::kTypeFieldNumber;
#endif  // !_MSC_VER

ModBmpArguments::ModBmpArguments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ModBmpArguments)
}

void ModBmpArguments::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ModBmpArguments::ModBmpArguments(const ModBmpArguments& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ModBmpArguments)
}

void ModBmpArguments::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  operation_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  type_ = 0;
}

ModBmpArguments::~ModBmpArguments() {
  // @@protoc_insertion_point(destructor:gobgpapi.ModBmpArguments)
  SharedDtor();
}

void ModBmpArguments::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ModBmpArguments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModBmpArguments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModBmpArguments_descriptor_;
}

const ModBmpArguments& ModBmpArguments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

ModBmpArguments* ModBmpArguments::default_instance_ = NULL;

ModBmpArguments* ModBmpArguments::New(::google::protobuf::Arena* arena) const {
  ModBmpArguments* n = new ModBmpArguments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModBmpArguments::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ModBmpArguments*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(operation_, type_);
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ModBmpArguments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ModBmpArguments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.Operation operation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation(static_cast< ::gobgpapi::Operation >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // optional string address = 2;
      case 2: {
        if (tag == 18) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.ModBmpArguments.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .gobgpapi.ModBmpArguments.MonitoringPolicy type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gobgpapi::ModBmpArguments_MonitoringPolicy >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ModBmpArguments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ModBmpArguments)
  return false;
#undef DO_
}

void ModBmpArguments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ModBmpArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // optional string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ModBmpArguments.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // optional uint32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // optional .gobgpapi.ModBmpArguments.MonitoringPolicy type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.ModBmpArguments)
}

::google::protobuf::uint8* ModBmpArguments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ModBmpArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // optional string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ModBmpArguments.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // optional uint32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // optional .gobgpapi.ModBmpArguments.MonitoringPolicy type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ModBmpArguments)
  return target;
}

int ModBmpArguments::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
  }

  // optional string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // optional uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // optional .gobgpapi.ModBmpArguments.MonitoringPolicy type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModBmpArguments::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModBmpArguments* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModBmpArguments>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModBmpArguments::MergeFrom(const ModBmpArguments& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.operation() != 0) {
    set_operation(from.operation());
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ModBmpArguments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModBmpArguments::CopyFrom(const ModBmpArguments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModBmpArguments::IsInitialized() const {

  return true;
}

void ModBmpArguments::Swap(ModBmpArguments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModBmpArguments::InternalSwap(ModBmpArguments* other) {
  std::swap(operation_, other->operation_);
  address_.Swap(&other->address_);
  std::swap(port_, other->port_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModBmpArguments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModBmpArguments_descriptor_;
  metadata.reflection = ModBmpArguments_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModBmpArguments

// optional .gobgpapi.Operation operation = 1;
void ModBmpArguments::clear_operation() {
  operation_ = 0;
}
 ::gobgpapi::Operation ModBmpArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModBmpArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
 void ModBmpArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModBmpArguments.operation)
}

// optional string address = 2;
void ModBmpArguments::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ModBmpArguments::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModBmpArguments.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModBmpArguments::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ModBmpArguments.address)
}
 void ModBmpArguments::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ModBmpArguments.address)
}
 void ModBmpArguments::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ModBmpArguments.address)
}
 ::std::string* ModBmpArguments::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModBmpArguments.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModBmpArguments::release_address() {
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModBmpArguments::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModBmpArguments.address)
}

// optional uint32 port = 3;
void ModBmpArguments::clear_port() {
  port_ = 0u;
}
 ::google::protobuf::uint32 ModBmpArguments::port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModBmpArguments.port)
  return port_;
}
 void ModBmpArguments::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModBmpArguments.port)
}

// optional .gobgpapi.ModBmpArguments.MonitoringPolicy type = 4;
void ModBmpArguments::clear_type() {
  type_ = 0;
}
 ::gobgpapi::ModBmpArguments_MonitoringPolicy ModBmpArguments::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModBmpArguments.type)
  return static_cast< ::gobgpapi::ModBmpArguments_MonitoringPolicy >(type_);
}
 void ModBmpArguments::set_type(::gobgpapi::ModBmpArguments_MonitoringPolicy value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModBmpArguments.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ModRpkiArguments::kOperationFieldNumber;
const int ModRpkiArguments::kAddressFieldNumber;
const int ModRpkiArguments::kPortFieldNumber;
#endif  // !_MSC_VER

ModRpkiArguments::ModRpkiArguments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ModRpkiArguments)
}

void ModRpkiArguments::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ModRpkiArguments::ModRpkiArguments(const ModRpkiArguments& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ModRpkiArguments)
}

void ModRpkiArguments::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  operation_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

ModRpkiArguments::~ModRpkiArguments() {
  // @@protoc_insertion_point(destructor:gobgpapi.ModRpkiArguments)
  SharedDtor();
}

void ModRpkiArguments::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ModRpkiArguments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModRpkiArguments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModRpkiArguments_descriptor_;
}

const ModRpkiArguments& ModRpkiArguments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

ModRpkiArguments* ModRpkiArguments::default_instance_ = NULL;

ModRpkiArguments* ModRpkiArguments::New(::google::protobuf::Arena* arena) const {
  ModRpkiArguments* n = new ModRpkiArguments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModRpkiArguments::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ModRpkiArguments*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(operation_, port_);
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ModRpkiArguments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ModRpkiArguments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.Operation operation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation(static_cast< ::gobgpapi::Operation >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // optional string address = 2;
      case 2: {
        if (tag == 18) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.ModRpkiArguments.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ModRpkiArguments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ModRpkiArguments)
  return false;
#undef DO_
}

void ModRpkiArguments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ModRpkiArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // optional string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ModRpkiArguments.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // optional uint32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.ModRpkiArguments)
}

::google::protobuf::uint8* ModRpkiArguments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ModRpkiArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // optional string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ModRpkiArguments.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // optional uint32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ModRpkiArguments)
  return target;
}

int ModRpkiArguments::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
  }

  // optional string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // optional uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModRpkiArguments::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModRpkiArguments* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModRpkiArguments>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModRpkiArguments::MergeFrom(const ModRpkiArguments& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.operation() != 0) {
    set_operation(from.operation());
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void ModRpkiArguments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModRpkiArguments::CopyFrom(const ModRpkiArguments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModRpkiArguments::IsInitialized() const {

  return true;
}

void ModRpkiArguments::Swap(ModRpkiArguments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModRpkiArguments::InternalSwap(ModRpkiArguments* other) {
  std::swap(operation_, other->operation_);
  address_.Swap(&other->address_);
  std::swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModRpkiArguments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModRpkiArguments_descriptor_;
  metadata.reflection = ModRpkiArguments_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModRpkiArguments

// optional .gobgpapi.Operation operation = 1;
void ModRpkiArguments::clear_operation() {
  operation_ = 0;
}
 ::gobgpapi::Operation ModRpkiArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModRpkiArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
 void ModRpkiArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModRpkiArguments.operation)
}

// optional string address = 2;
void ModRpkiArguments::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ModRpkiArguments::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModRpkiArguments.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModRpkiArguments::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ModRpkiArguments.address)
}
 void ModRpkiArguments::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ModRpkiArguments.address)
}
 void ModRpkiArguments::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ModRpkiArguments.address)
}
 ::std::string* ModRpkiArguments::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModRpkiArguments.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ModRpkiArguments::release_address() {
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ModRpkiArguments::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModRpkiArguments.address)
}

// optional uint32 port = 3;
void ModRpkiArguments::clear_port() {
  port_ = 0u;
}
 ::google::protobuf::uint32 ModRpkiArguments::port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModRpkiArguments.port)
  return port_;
}
 void ModRpkiArguments::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModRpkiArguments.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ModVrfArguments::kOperationFieldNumber;
const int ModVrfArguments::kVrfFieldNumber;
#endif  // !_MSC_VER

ModVrfArguments::ModVrfArguments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ModVrfArguments)
}

void ModVrfArguments::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  vrf_ = const_cast< ::gobgpapi::Vrf*>(&::gobgpapi::Vrf::default_instance());
}

ModVrfArguments::ModVrfArguments(const ModVrfArguments& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ModVrfArguments)
}

void ModVrfArguments::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  operation_ = 0;
  vrf_ = NULL;
}

ModVrfArguments::~ModVrfArguments() {
  // @@protoc_insertion_point(destructor:gobgpapi.ModVrfArguments)
  SharedDtor();
}

void ModVrfArguments::SharedDtor() {
  if (this != default_instance_) {
    delete vrf_;
  }
}

void ModVrfArguments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModVrfArguments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModVrfArguments_descriptor_;
}

const ModVrfArguments& ModVrfArguments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

ModVrfArguments* ModVrfArguments::default_instance_ = NULL;

ModVrfArguments* ModVrfArguments::New(::google::protobuf::Arena* arena) const {
  ModVrfArguments* n = new ModVrfArguments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModVrfArguments::Clear() {
  operation_ = 0;
  if (GetArenaNoVirtual() == NULL && vrf_ != NULL) delete vrf_;
  vrf_ = NULL;
}

bool ModVrfArguments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ModVrfArguments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.Operation operation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation(static_cast< ::gobgpapi::Operation >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vrf;
        break;
      }

      // optional .gobgpapi.Vrf vrf = 2;
      case 2: {
        if (tag == 18) {
         parse_vrf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vrf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ModVrfArguments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ModVrfArguments)
  return false;
#undef DO_
}

void ModVrfArguments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ModVrfArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // optional .gobgpapi.Vrf vrf = 2;
  if (this->has_vrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->vrf_, output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.ModVrfArguments)
}

::google::protobuf::uint8* ModVrfArguments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ModVrfArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // optional .gobgpapi.Vrf vrf = 2;
  if (this->has_vrf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->vrf_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ModVrfArguments)
  return target;
}

int ModVrfArguments::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
  }

  // optional .gobgpapi.Vrf vrf = 2;
  if (this->has_vrf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vrf_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModVrfArguments::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModVrfArguments* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModVrfArguments>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModVrfArguments::MergeFrom(const ModVrfArguments& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.operation() != 0) {
    set_operation(from.operation());
  }
  if (from.has_vrf()) {
    mutable_vrf()->::gobgpapi::Vrf::MergeFrom(from.vrf());
  }
}

void ModVrfArguments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModVrfArguments::CopyFrom(const ModVrfArguments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModVrfArguments::IsInitialized() const {

  return true;
}

void ModVrfArguments::Swap(ModVrfArguments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModVrfArguments::InternalSwap(ModVrfArguments* other) {
  std::swap(operation_, other->operation_);
  std::swap(vrf_, other->vrf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModVrfArguments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModVrfArguments_descriptor_;
  metadata.reflection = ModVrfArguments_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModVrfArguments

// optional .gobgpapi.Operation operation = 1;
void ModVrfArguments::clear_operation() {
  operation_ = 0;
}
 ::gobgpapi::Operation ModVrfArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModVrfArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
 void ModVrfArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModVrfArguments.operation)
}

// optional .gobgpapi.Vrf vrf = 2;
bool ModVrfArguments::has_vrf() const {
  return !_is_default_instance_ && vrf_ != NULL;
}
void ModVrfArguments::clear_vrf() {
  if (GetArenaNoVirtual() == NULL && vrf_ != NULL) delete vrf_;
  vrf_ = NULL;
}
const ::gobgpapi::Vrf& ModVrfArguments::vrf() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModVrfArguments.vrf)
  return vrf_ != NULL ? *vrf_ : *default_instance_->vrf_;
}
::gobgpapi::Vrf* ModVrfArguments::mutable_vrf() {
  
  if (vrf_ == NULL) {
    vrf_ = new ::gobgpapi::Vrf;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModVrfArguments.vrf)
  return vrf_;
}
::gobgpapi::Vrf* ModVrfArguments::release_vrf() {
  
  ::gobgpapi::Vrf* temp = vrf_;
  vrf_ = NULL;
  return temp;
}
void ModVrfArguments::set_allocated_vrf(::gobgpapi::Vrf* vrf) {
  delete vrf_;
  vrf_ = vrf;
  if (vrf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModVrfArguments.vrf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ModDefinedSetArguments::kOperationFieldNumber;
const int ModDefinedSetArguments::kSetFieldNumber;
#endif  // !_MSC_VER

ModDefinedSetArguments::ModDefinedSetArguments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ModDefinedSetArguments)
}

void ModDefinedSetArguments::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  set_ = const_cast< ::gobgpapi::DefinedSet*>(&::gobgpapi::DefinedSet::default_instance());
}

ModDefinedSetArguments::ModDefinedSetArguments(const ModDefinedSetArguments& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ModDefinedSetArguments)
}

void ModDefinedSetArguments::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  operation_ = 0;
  set_ = NULL;
}

ModDefinedSetArguments::~ModDefinedSetArguments() {
  // @@protoc_insertion_point(destructor:gobgpapi.ModDefinedSetArguments)
  SharedDtor();
}

void ModDefinedSetArguments::SharedDtor() {
  if (this != default_instance_) {
    delete set_;
  }
}

void ModDefinedSetArguments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModDefinedSetArguments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModDefinedSetArguments_descriptor_;
}

const ModDefinedSetArguments& ModDefinedSetArguments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

ModDefinedSetArguments* ModDefinedSetArguments::default_instance_ = NULL;

ModDefinedSetArguments* ModDefinedSetArguments::New(::google::protobuf::Arena* arena) const {
  ModDefinedSetArguments* n = new ModDefinedSetArguments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModDefinedSetArguments::Clear() {
  operation_ = 0;
  if (GetArenaNoVirtual() == NULL && set_ != NULL) delete set_;
  set_ = NULL;
}

bool ModDefinedSetArguments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ModDefinedSetArguments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.Operation operation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation(static_cast< ::gobgpapi::Operation >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_set;
        break;
      }

      // optional .gobgpapi.DefinedSet set = 2;
      case 2: {
        if (tag == 18) {
         parse_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ModDefinedSetArguments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ModDefinedSetArguments)
  return false;
#undef DO_
}

void ModDefinedSetArguments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ModDefinedSetArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // optional .gobgpapi.DefinedSet set = 2;
  if (this->has_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->set_, output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.ModDefinedSetArguments)
}

::google::protobuf::uint8* ModDefinedSetArguments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ModDefinedSetArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // optional .gobgpapi.DefinedSet set = 2;
  if (this->has_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->set_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ModDefinedSetArguments)
  return target;
}

int ModDefinedSetArguments::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
  }

  // optional .gobgpapi.DefinedSet set = 2;
  if (this->has_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->set_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModDefinedSetArguments::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModDefinedSetArguments* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModDefinedSetArguments>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModDefinedSetArguments::MergeFrom(const ModDefinedSetArguments& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.operation() != 0) {
    set_operation(from.operation());
  }
  if (from.has_set()) {
    mutable_set()->::gobgpapi::DefinedSet::MergeFrom(from.set());
  }
}

void ModDefinedSetArguments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModDefinedSetArguments::CopyFrom(const ModDefinedSetArguments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModDefinedSetArguments::IsInitialized() const {

  return true;
}

void ModDefinedSetArguments::Swap(ModDefinedSetArguments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModDefinedSetArguments::InternalSwap(ModDefinedSetArguments* other) {
  std::swap(operation_, other->operation_);
  std::swap(set_, other->set_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModDefinedSetArguments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModDefinedSetArguments_descriptor_;
  metadata.reflection = ModDefinedSetArguments_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModDefinedSetArguments

// optional .gobgpapi.Operation operation = 1;
void ModDefinedSetArguments::clear_operation() {
  operation_ = 0;
}
 ::gobgpapi::Operation ModDefinedSetArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModDefinedSetArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
 void ModDefinedSetArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModDefinedSetArguments.operation)
}

// optional .gobgpapi.DefinedSet set = 2;
bool ModDefinedSetArguments::has_set() const {
  return !_is_default_instance_ && set_ != NULL;
}
void ModDefinedSetArguments::clear_set() {
  if (GetArenaNoVirtual() == NULL && set_ != NULL) delete set_;
  set_ = NULL;
}
const ::gobgpapi::DefinedSet& ModDefinedSetArguments::set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModDefinedSetArguments.set)
  return set_ != NULL ? *set_ : *default_instance_->set_;
}
::gobgpapi::DefinedSet* ModDefinedSetArguments::mutable_set() {
  
  if (set_ == NULL) {
    set_ = new ::gobgpapi::DefinedSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModDefinedSetArguments.set)
  return set_;
}
::gobgpapi::DefinedSet* ModDefinedSetArguments::release_set() {
  
  ::gobgpapi::DefinedSet* temp = set_;
  set_ = NULL;
  return temp;
}
void ModDefinedSetArguments::set_allocated_set(::gobgpapi::DefinedSet* set) {
  delete set_;
  set_ = set;
  if (set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModDefinedSetArguments.set)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ModStatementArguments::kOperationFieldNumber;
const int ModStatementArguments::kStatementFieldNumber;
#endif  // !_MSC_VER

ModStatementArguments::ModStatementArguments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ModStatementArguments)
}

void ModStatementArguments::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  statement_ = const_cast< ::gobgpapi::Statement*>(&::gobgpapi::Statement::default_instance());
}

ModStatementArguments::ModStatementArguments(const ModStatementArguments& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ModStatementArguments)
}

void ModStatementArguments::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  operation_ = 0;
  statement_ = NULL;
}

ModStatementArguments::~ModStatementArguments() {
  // @@protoc_insertion_point(destructor:gobgpapi.ModStatementArguments)
  SharedDtor();
}

void ModStatementArguments::SharedDtor() {
  if (this != default_instance_) {
    delete statement_;
  }
}

void ModStatementArguments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModStatementArguments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModStatementArguments_descriptor_;
}

const ModStatementArguments& ModStatementArguments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

ModStatementArguments* ModStatementArguments::default_instance_ = NULL;

ModStatementArguments* ModStatementArguments::New(::google::protobuf::Arena* arena) const {
  ModStatementArguments* n = new ModStatementArguments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModStatementArguments::Clear() {
  operation_ = 0;
  if (GetArenaNoVirtual() == NULL && statement_ != NULL) delete statement_;
  statement_ = NULL;
}

bool ModStatementArguments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ModStatementArguments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.Operation operation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation(static_cast< ::gobgpapi::Operation >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_statement;
        break;
      }

      // optional .gobgpapi.Statement statement = 2;
      case 2: {
        if (tag == 18) {
         parse_statement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ModStatementArguments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ModStatementArguments)
  return false;
#undef DO_
}

void ModStatementArguments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ModStatementArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // optional .gobgpapi.Statement statement = 2;
  if (this->has_statement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->statement_, output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.ModStatementArguments)
}

::google::protobuf::uint8* ModStatementArguments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ModStatementArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // optional .gobgpapi.Statement statement = 2;
  if (this->has_statement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->statement_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ModStatementArguments)
  return target;
}

int ModStatementArguments::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
  }

  // optional .gobgpapi.Statement statement = 2;
  if (this->has_statement()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->statement_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModStatementArguments::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModStatementArguments* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModStatementArguments>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModStatementArguments::MergeFrom(const ModStatementArguments& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.operation() != 0) {
    set_operation(from.operation());
  }
  if (from.has_statement()) {
    mutable_statement()->::gobgpapi::Statement::MergeFrom(from.statement());
  }
}

void ModStatementArguments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModStatementArguments::CopyFrom(const ModStatementArguments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModStatementArguments::IsInitialized() const {

  return true;
}

void ModStatementArguments::Swap(ModStatementArguments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModStatementArguments::InternalSwap(ModStatementArguments* other) {
  std::swap(operation_, other->operation_);
  std::swap(statement_, other->statement_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModStatementArguments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModStatementArguments_descriptor_;
  metadata.reflection = ModStatementArguments_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModStatementArguments

// optional .gobgpapi.Operation operation = 1;
void ModStatementArguments::clear_operation() {
  operation_ = 0;
}
 ::gobgpapi::Operation ModStatementArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModStatementArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
 void ModStatementArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModStatementArguments.operation)
}

// optional .gobgpapi.Statement statement = 2;
bool ModStatementArguments::has_statement() const {
  return !_is_default_instance_ && statement_ != NULL;
}
void ModStatementArguments::clear_statement() {
  if (GetArenaNoVirtual() == NULL && statement_ != NULL) delete statement_;
  statement_ = NULL;
}
const ::gobgpapi::Statement& ModStatementArguments::statement() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModStatementArguments.statement)
  return statement_ != NULL ? *statement_ : *default_instance_->statement_;
}
::gobgpapi::Statement* ModStatementArguments::mutable_statement() {
  
  if (statement_ == NULL) {
    statement_ = new ::gobgpapi::Statement;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModStatementArguments.statement)
  return statement_;
}
::gobgpapi::Statement* ModStatementArguments::release_statement() {
  
  ::gobgpapi::Statement* temp = statement_;
  statement_ = NULL;
  return temp;
}
void ModStatementArguments::set_allocated_statement(::gobgpapi::Statement* statement) {
  delete statement_;
  statement_ = statement;
  if (statement) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModStatementArguments.statement)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ModPolicyArguments::kOperationFieldNumber;
const int ModPolicyArguments::kPolicyFieldNumber;
const int ModPolicyArguments::kReferExistingStatementsFieldNumber;
const int ModPolicyArguments::kPreserveStatementsFieldNumber;
#endif  // !_MSC_VER

ModPolicyArguments::ModPolicyArguments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ModPolicyArguments)
}

void ModPolicyArguments::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  policy_ = const_cast< ::gobgpapi::Policy*>(&::gobgpapi::Policy::default_instance());
}

ModPolicyArguments::ModPolicyArguments(const ModPolicyArguments& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ModPolicyArguments)
}

void ModPolicyArguments::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  operation_ = 0;
  policy_ = NULL;
  refer_existing_statements_ = false;
  preserve_statements_ = false;
}

ModPolicyArguments::~ModPolicyArguments() {
  // @@protoc_insertion_point(destructor:gobgpapi.ModPolicyArguments)
  SharedDtor();
}

void ModPolicyArguments::SharedDtor() {
  if (this != default_instance_) {
    delete policy_;
  }
}

void ModPolicyArguments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModPolicyArguments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModPolicyArguments_descriptor_;
}

const ModPolicyArguments& ModPolicyArguments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

ModPolicyArguments* ModPolicyArguments::default_instance_ = NULL;

ModPolicyArguments* ModPolicyArguments::New(::google::protobuf::Arena* arena) const {
  ModPolicyArguments* n = new ModPolicyArguments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModPolicyArguments::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ModPolicyArguments*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(operation_, preserve_statements_);
  if (GetArenaNoVirtual() == NULL && policy_ != NULL) delete policy_;
  policy_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool ModPolicyArguments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ModPolicyArguments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.Operation operation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation(static_cast< ::gobgpapi::Operation >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_policy;
        break;
      }

      // optional .gobgpapi.Policy policy = 2;
      case 2: {
        if (tag == 18) {
         parse_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_policy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_refer_existing_statements;
        break;
      }

      // optional bool refer_existing_statements = 3;
      case 3: {
        if (tag == 24) {
         parse_refer_existing_statements:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refer_existing_statements_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_preserve_statements;
        break;
      }

      // optional bool preserve_statements = 4;
      case 4: {
        if (tag == 32) {
         parse_preserve_statements:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_statements_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ModPolicyArguments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ModPolicyArguments)
  return false;
#undef DO_
}

void ModPolicyArguments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ModPolicyArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // optional .gobgpapi.Policy policy = 2;
  if (this->has_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->policy_, output);
  }

  // optional bool refer_existing_statements = 3;
  if (this->refer_existing_statements() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->refer_existing_statements(), output);
  }

  // optional bool preserve_statements = 4;
  if (this->preserve_statements() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->preserve_statements(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.ModPolicyArguments)
}

::google::protobuf::uint8* ModPolicyArguments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ModPolicyArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // optional .gobgpapi.Policy policy = 2;
  if (this->has_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->policy_, target);
  }

  // optional bool refer_existing_statements = 3;
  if (this->refer_existing_statements() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->refer_existing_statements(), target);
  }

  // optional bool preserve_statements = 4;
  if (this->preserve_statements() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->preserve_statements(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ModPolicyArguments)
  return target;
}

int ModPolicyArguments::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
  }

  // optional .gobgpapi.Policy policy = 2;
  if (this->has_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->policy_);
  }

  // optional bool refer_existing_statements = 3;
  if (this->refer_existing_statements() != 0) {
    total_size += 1 + 1;
  }

  // optional bool preserve_statements = 4;
  if (this->preserve_statements() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModPolicyArguments::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModPolicyArguments* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModPolicyArguments>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModPolicyArguments::MergeFrom(const ModPolicyArguments& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.operation() != 0) {
    set_operation(from.operation());
  }
  if (from.has_policy()) {
    mutable_policy()->::gobgpapi::Policy::MergeFrom(from.policy());
  }
  if (from.refer_existing_statements() != 0) {
    set_refer_existing_statements(from.refer_existing_statements());
  }
  if (from.preserve_statements() != 0) {
    set_preserve_statements(from.preserve_statements());
  }
}

void ModPolicyArguments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModPolicyArguments::CopyFrom(const ModPolicyArguments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModPolicyArguments::IsInitialized() const {

  return true;
}

void ModPolicyArguments::Swap(ModPolicyArguments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModPolicyArguments::InternalSwap(ModPolicyArguments* other) {
  std::swap(operation_, other->operation_);
  std::swap(policy_, other->policy_);
  std::swap(refer_existing_statements_, other->refer_existing_statements_);
  std::swap(preserve_statements_, other->preserve_statements_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModPolicyArguments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModPolicyArguments_descriptor_;
  metadata.reflection = ModPolicyArguments_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModPolicyArguments

// optional .gobgpapi.Operation operation = 1;
void ModPolicyArguments::clear_operation() {
  operation_ = 0;
}
 ::gobgpapi::Operation ModPolicyArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPolicyArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
 void ModPolicyArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModPolicyArguments.operation)
}

// optional .gobgpapi.Policy policy = 2;
bool ModPolicyArguments::has_policy() const {
  return !_is_default_instance_ && policy_ != NULL;
}
void ModPolicyArguments::clear_policy() {
  if (GetArenaNoVirtual() == NULL && policy_ != NULL) delete policy_;
  policy_ = NULL;
}
const ::gobgpapi::Policy& ModPolicyArguments::policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPolicyArguments.policy)
  return policy_ != NULL ? *policy_ : *default_instance_->policy_;
}
::gobgpapi::Policy* ModPolicyArguments::mutable_policy() {
  
  if (policy_ == NULL) {
    policy_ = new ::gobgpapi::Policy;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModPolicyArguments.policy)
  return policy_;
}
::gobgpapi::Policy* ModPolicyArguments::release_policy() {
  
  ::gobgpapi::Policy* temp = policy_;
  policy_ = NULL;
  return temp;
}
void ModPolicyArguments::set_allocated_policy(::gobgpapi::Policy* policy) {
  delete policy_;
  policy_ = policy;
  if (policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModPolicyArguments.policy)
}

// optional bool refer_existing_statements = 3;
void ModPolicyArguments::clear_refer_existing_statements() {
  refer_existing_statements_ = false;
}
 bool ModPolicyArguments::refer_existing_statements() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPolicyArguments.refer_existing_statements)
  return refer_existing_statements_;
}
 void ModPolicyArguments::set_refer_existing_statements(bool value) {
  
  refer_existing_statements_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModPolicyArguments.refer_existing_statements)
}

// optional bool preserve_statements = 4;
void ModPolicyArguments::clear_preserve_statements() {
  preserve_statements_ = false;
}
 bool ModPolicyArguments::preserve_statements() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPolicyArguments.preserve_statements)
  return preserve_statements_;
}
 void ModPolicyArguments::set_preserve_statements(bool value) {
  
  preserve_statements_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModPolicyArguments.preserve_statements)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ModPolicyAssignmentArguments::kOperationFieldNumber;
const int ModPolicyAssignmentArguments::kAssignmentFieldNumber;
#endif  // !_MSC_VER

ModPolicyAssignmentArguments::ModPolicyAssignmentArguments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ModPolicyAssignmentArguments)
}

void ModPolicyAssignmentArguments::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  assignment_ = const_cast< ::gobgpapi::PolicyAssignment*>(&::gobgpapi::PolicyAssignment::default_instance());
}

ModPolicyAssignmentArguments::ModPolicyAssignmentArguments(const ModPolicyAssignmentArguments& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ModPolicyAssignmentArguments)
}

void ModPolicyAssignmentArguments::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  operation_ = 0;
  assignment_ = NULL;
}

ModPolicyAssignmentArguments::~ModPolicyAssignmentArguments() {
  // @@protoc_insertion_point(destructor:gobgpapi.ModPolicyAssignmentArguments)
  SharedDtor();
}

void ModPolicyAssignmentArguments::SharedDtor() {
  if (this != default_instance_) {
    delete assignment_;
  }
}

void ModPolicyAssignmentArguments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModPolicyAssignmentArguments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModPolicyAssignmentArguments_descriptor_;
}

const ModPolicyAssignmentArguments& ModPolicyAssignmentArguments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

ModPolicyAssignmentArguments* ModPolicyAssignmentArguments::default_instance_ = NULL;

ModPolicyAssignmentArguments* ModPolicyAssignmentArguments::New(::google::protobuf::Arena* arena) const {
  ModPolicyAssignmentArguments* n = new ModPolicyAssignmentArguments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModPolicyAssignmentArguments::Clear() {
  operation_ = 0;
  if (GetArenaNoVirtual() == NULL && assignment_ != NULL) delete assignment_;
  assignment_ = NULL;
}

bool ModPolicyAssignmentArguments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ModPolicyAssignmentArguments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.Operation operation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation(static_cast< ::gobgpapi::Operation >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_assignment;
        break;
      }

      // optional .gobgpapi.PolicyAssignment assignment = 2;
      case 2: {
        if (tag == 18) {
         parse_assignment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_assignment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ModPolicyAssignmentArguments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ModPolicyAssignmentArguments)
  return false;
#undef DO_
}

void ModPolicyAssignmentArguments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ModPolicyAssignmentArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // optional .gobgpapi.PolicyAssignment assignment = 2;
  if (this->has_assignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->assignment_, output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.ModPolicyAssignmentArguments)
}

::google::protobuf::uint8* ModPolicyAssignmentArguments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ModPolicyAssignmentArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // optional .gobgpapi.PolicyAssignment assignment = 2;
  if (this->has_assignment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->assignment_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ModPolicyAssignmentArguments)
  return target;
}

int ModPolicyAssignmentArguments::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
  }

  // optional .gobgpapi.PolicyAssignment assignment = 2;
  if (this->has_assignment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->assignment_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModPolicyAssignmentArguments::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModPolicyAssignmentArguments* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModPolicyAssignmentArguments>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModPolicyAssignmentArguments::MergeFrom(const ModPolicyAssignmentArguments& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.operation() != 0) {
    set_operation(from.operation());
  }
  if (from.has_assignment()) {
    mutable_assignment()->::gobgpapi::PolicyAssignment::MergeFrom(from.assignment());
  }
}

void ModPolicyAssignmentArguments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModPolicyAssignmentArguments::CopyFrom(const ModPolicyAssignmentArguments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModPolicyAssignmentArguments::IsInitialized() const {

  return true;
}

void ModPolicyAssignmentArguments::Swap(ModPolicyAssignmentArguments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModPolicyAssignmentArguments::InternalSwap(ModPolicyAssignmentArguments* other) {
  std::swap(operation_, other->operation_);
  std::swap(assignment_, other->assignment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModPolicyAssignmentArguments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModPolicyAssignmentArguments_descriptor_;
  metadata.reflection = ModPolicyAssignmentArguments_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModPolicyAssignmentArguments

// optional .gobgpapi.Operation operation = 1;
void ModPolicyAssignmentArguments::clear_operation() {
  operation_ = 0;
}
 ::gobgpapi::Operation ModPolicyAssignmentArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPolicyAssignmentArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
 void ModPolicyAssignmentArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModPolicyAssignmentArguments.operation)
}

// optional .gobgpapi.PolicyAssignment assignment = 2;
bool ModPolicyAssignmentArguments::has_assignment() const {
  return !_is_default_instance_ && assignment_ != NULL;
}
void ModPolicyAssignmentArguments::clear_assignment() {
  if (GetArenaNoVirtual() == NULL && assignment_ != NULL) delete assignment_;
  assignment_ = NULL;
}
const ::gobgpapi::PolicyAssignment& ModPolicyAssignmentArguments::assignment() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModPolicyAssignmentArguments.assignment)
  return assignment_ != NULL ? *assignment_ : *default_instance_->assignment_;
}
::gobgpapi::PolicyAssignment* ModPolicyAssignmentArguments::mutable_assignment() {
  
  if (assignment_ == NULL) {
    assignment_ = new ::gobgpapi::PolicyAssignment;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModPolicyAssignmentArguments.assignment)
  return assignment_;
}
::gobgpapi::PolicyAssignment* ModPolicyAssignmentArguments::release_assignment() {
  
  ::gobgpapi::PolicyAssignment* temp = assignment_;
  assignment_ = NULL;
  return temp;
}
void ModPolicyAssignmentArguments::set_allocated_assignment(::gobgpapi::PolicyAssignment* assignment) {
  delete assignment_;
  assignment_ = assignment;
  if (assignment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModPolicyAssignmentArguments.assignment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ModGlobalConfigArguments::kOperationFieldNumber;
const int ModGlobalConfigArguments::kGlobalFieldNumber;
#endif  // !_MSC_VER

ModGlobalConfigArguments::ModGlobalConfigArguments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ModGlobalConfigArguments)
}

void ModGlobalConfigArguments::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  global_ = const_cast< ::gobgpapi::Global*>(&::gobgpapi::Global::default_instance());
}

ModGlobalConfigArguments::ModGlobalConfigArguments(const ModGlobalConfigArguments& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ModGlobalConfigArguments)
}

void ModGlobalConfigArguments::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  operation_ = 0;
  global_ = NULL;
}

ModGlobalConfigArguments::~ModGlobalConfigArguments() {
  // @@protoc_insertion_point(destructor:gobgpapi.ModGlobalConfigArguments)
  SharedDtor();
}

void ModGlobalConfigArguments::SharedDtor() {
  if (this != default_instance_) {
    delete global_;
  }
}

void ModGlobalConfigArguments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModGlobalConfigArguments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModGlobalConfigArguments_descriptor_;
}

const ModGlobalConfigArguments& ModGlobalConfigArguments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

ModGlobalConfigArguments* ModGlobalConfigArguments::default_instance_ = NULL;

ModGlobalConfigArguments* ModGlobalConfigArguments::New(::google::protobuf::Arena* arena) const {
  ModGlobalConfigArguments* n = new ModGlobalConfigArguments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModGlobalConfigArguments::Clear() {
  operation_ = 0;
  if (GetArenaNoVirtual() == NULL && global_ != NULL) delete global_;
  global_ = NULL;
}

bool ModGlobalConfigArguments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ModGlobalConfigArguments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.Operation operation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation(static_cast< ::gobgpapi::Operation >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_global;
        break;
      }

      // optional .gobgpapi.Global global = 2;
      case 2: {
        if (tag == 18) {
         parse_global:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_global()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ModGlobalConfigArguments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ModGlobalConfigArguments)
  return false;
#undef DO_
}

void ModGlobalConfigArguments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ModGlobalConfigArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // optional .gobgpapi.Global global = 2;
  if (this->has_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->global_, output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.ModGlobalConfigArguments)
}

::google::protobuf::uint8* ModGlobalConfigArguments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ModGlobalConfigArguments)
  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // optional .gobgpapi.Global global = 2;
  if (this->has_global()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->global_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ModGlobalConfigArguments)
  return target;
}

int ModGlobalConfigArguments::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.Operation operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
  }

  // optional .gobgpapi.Global global = 2;
  if (this->has_global()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->global_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModGlobalConfigArguments::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModGlobalConfigArguments* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModGlobalConfigArguments>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModGlobalConfigArguments::MergeFrom(const ModGlobalConfigArguments& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.operation() != 0) {
    set_operation(from.operation());
  }
  if (from.has_global()) {
    mutable_global()->::gobgpapi::Global::MergeFrom(from.global());
  }
}

void ModGlobalConfigArguments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModGlobalConfigArguments::CopyFrom(const ModGlobalConfigArguments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModGlobalConfigArguments::IsInitialized() const {

  return true;
}

void ModGlobalConfigArguments::Swap(ModGlobalConfigArguments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModGlobalConfigArguments::InternalSwap(ModGlobalConfigArguments* other) {
  std::swap(operation_, other->operation_);
  std::swap(global_, other->global_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModGlobalConfigArguments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModGlobalConfigArguments_descriptor_;
  metadata.reflection = ModGlobalConfigArguments_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModGlobalConfigArguments

// optional .gobgpapi.Operation operation = 1;
void ModGlobalConfigArguments::clear_operation() {
  operation_ = 0;
}
 ::gobgpapi::Operation ModGlobalConfigArguments::operation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModGlobalConfigArguments.operation)
  return static_cast< ::gobgpapi::Operation >(operation_);
}
 void ModGlobalConfigArguments::set_operation(::gobgpapi::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ModGlobalConfigArguments.operation)
}

// optional .gobgpapi.Global global = 2;
bool ModGlobalConfigArguments::has_global() const {
  return !_is_default_instance_ && global_ != NULL;
}
void ModGlobalConfigArguments::clear_global() {
  if (GetArenaNoVirtual() == NULL && global_ != NULL) delete global_;
  global_ = NULL;
}
const ::gobgpapi::Global& ModGlobalConfigArguments::global() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ModGlobalConfigArguments.global)
  return global_ != NULL ? *global_ : *default_instance_->global_;
}
::gobgpapi::Global* ModGlobalConfigArguments::mutable_global() {
  
  if (global_ == NULL) {
    global_ = new ::gobgpapi::Global;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ModGlobalConfigArguments.global)
  return global_;
}
::gobgpapi::Global* ModGlobalConfigArguments::release_global() {
  
  ::gobgpapi::Global* temp = global_;
  global_ = NULL;
  return temp;
}
void ModGlobalConfigArguments::set_allocated_global(::gobgpapi::Global* global) {
  delete global_;
  global_ = global;
  if (global) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ModGlobalConfigArguments.global)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Path::kNlriFieldNumber;
const int Path::kPattrsFieldNumber;
const int Path::kAgeFieldNumber;
const int Path::kBestFieldNumber;
const int Path::kIsWithdrawFieldNumber;
const int Path::kValidationFieldNumber;
const int Path::kNoImplicitWithdrawFieldNumber;
const int Path::kFamilyFieldNumber;
const int Path::kSourceAsnFieldNumber;
const int Path::kSourceIdFieldNumber;
const int Path::kFilteredFieldNumber;
const int Path::kStaleFieldNumber;
const int Path::kIsFromExternalFieldNumber;
const int Path::kNeighborIpFieldNumber;
#endif  // !_MSC_VER

Path::Path()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Path)
}

void Path::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Path::Path(const Path& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Path)
}

void Path::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nlri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  age_ = GOOGLE_LONGLONG(0);
  best_ = false;
  is_withdraw_ = false;
  validation_ = 0;
  no_implicit_withdraw_ = false;
  family_ = 0u;
  source_asn_ = 0u;
  source_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filtered_ = false;
  stale_ = false;
  is_from_external_ = false;
  neighbor_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:gobgpapi.Path)
  SharedDtor();
}

void Path::SharedDtor() {
  nlri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neighbor_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Path::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Path_descriptor_;
}

const Path& Path::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

Path* Path::default_instance_ = NULL;

Path* Path::New(::google::protobuf::Arena* arena) const {
  Path* n = new Path;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Path::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Path*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(age_, no_implicit_withdraw_);
  nlri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  family_ = 0u;
  ZR_(stale_, is_from_external_);
  source_asn_ = 0u;
  source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filtered_ = false;
  neighbor_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  pattrs_.Clear();
}

bool Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Path)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes nlri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nlri()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pattrs;
        break;
      }

      // repeated bytes pattrs = 2;
      case 2: {
        if (tag == 18) {
         parse_pattrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_pattrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pattrs;
        if (input->ExpectTag(24)) goto parse_age;
        break;
      }

      // optional int64 age = 3;
      case 3: {
        if (tag == 24) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &age_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_best;
        break;
      }

      // optional bool best = 4;
      case 4: {
        if (tag == 32) {
         parse_best:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &best_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_withdraw;
        break;
      }

      // optional bool is_withdraw = 5;
      case 5: {
        if (tag == 40) {
         parse_is_withdraw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_withdraw_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_validation;
        break;
      }

      // optional int32 validation = 6;
      case 6: {
        if (tag == 48) {
         parse_validation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validation_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_no_implicit_withdraw;
        break;
      }

      // optional bool no_implicit_withdraw = 7;
      case 7: {
        if (tag == 56) {
         parse_no_implicit_withdraw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_implicit_withdraw_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_family;
        break;
      }

      // optional uint32 family = 8;
      case 8: {
        if (tag == 64) {
         parse_family:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_source_asn;
        break;
      }

      // optional uint32 source_asn = 9;
      case 9: {
        if (tag == 72) {
         parse_source_asn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_asn_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_source_id;
        break;
      }

      // optional string source_id = 10;
      case 10: {
        if (tag == 82) {
         parse_source_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_id().data(), this->source_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Path.source_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_filtered;
        break;
      }

      // optional bool filtered = 11;
      case 11: {
        if (tag == 88) {
         parse_filtered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filtered_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_stale;
        break;
      }

      // optional bool stale = 12;
      case 12: {
        if (tag == 96) {
         parse_stale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_is_from_external;
        break;
      }

      // optional bool is_from_external = 13;
      case 13: {
        if (tag == 104) {
         parse_is_from_external:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_from_external_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_neighbor_ip;
        break;
      }

      // optional string neighbor_ip = 14;
      case 14: {
        if (tag == 114) {
         parse_neighbor_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neighbor_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neighbor_ip().data(), this->neighbor_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Path.neighbor_ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Path)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Path)
  return false;
#undef DO_
}

void Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Path)
  // optional bytes nlri = 1;
  if (this->nlri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->nlri(), output);
  }

  // repeated bytes pattrs = 2;
  for (int i = 0; i < this->pattrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->pattrs(i), output);
  }

  // optional int64 age = 3;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->age(), output);
  }

  // optional bool best = 4;
  if (this->best() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->best(), output);
  }

  // optional bool is_withdraw = 5;
  if (this->is_withdraw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_withdraw(), output);
  }

  // optional int32 validation = 6;
  if (this->validation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->validation(), output);
  }

  // optional bool no_implicit_withdraw = 7;
  if (this->no_implicit_withdraw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->no_implicit_withdraw(), output);
  }

  // optional uint32 family = 8;
  if (this->family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->family(), output);
  }

  // optional uint32 source_asn = 9;
  if (this->source_asn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->source_asn(), output);
  }

  // optional string source_id = 10;
  if (this->source_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_id().data(), this->source_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Path.source_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->source_id(), output);
  }

  // optional bool filtered = 11;
  if (this->filtered() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->filtered(), output);
  }

  // optional bool stale = 12;
  if (this->stale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->stale(), output);
  }

  // optional bool is_from_external = 13;
  if (this->is_from_external() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_from_external(), output);
  }

  // optional string neighbor_ip = 14;
  if (this->neighbor_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neighbor_ip().data(), this->neighbor_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Path.neighbor_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->neighbor_ip(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.Path)
}

::google::protobuf::uint8* Path::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Path)
  // optional bytes nlri = 1;
  if (this->nlri().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->nlri(), target);
  }

  // repeated bytes pattrs = 2;
  for (int i = 0; i < this->pattrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->pattrs(i), target);
  }

  // optional int64 age = 3;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->age(), target);
  }

  // optional bool best = 4;
  if (this->best() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->best(), target);
  }

  // optional bool is_withdraw = 5;
  if (this->is_withdraw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_withdraw(), target);
  }

  // optional int32 validation = 6;
  if (this->validation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->validation(), target);
  }

  // optional bool no_implicit_withdraw = 7;
  if (this->no_implicit_withdraw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->no_implicit_withdraw(), target);
  }

  // optional uint32 family = 8;
  if (this->family() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->family(), target);
  }

  // optional uint32 source_asn = 9;
  if (this->source_asn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->source_asn(), target);
  }

  // optional string source_id = 10;
  if (this->source_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_id().data(), this->source_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Path.source_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->source_id(), target);
  }

  // optional bool filtered = 11;
  if (this->filtered() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->filtered(), target);
  }

  // optional bool stale = 12;
  if (this->stale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->stale(), target);
  }

  // optional bool is_from_external = 13;
  if (this->is_from_external() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_from_external(), target);
  }

  // optional string neighbor_ip = 14;
  if (this->neighbor_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neighbor_ip().data(), this->neighbor_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Path.neighbor_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->neighbor_ip(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Path)
  return target;
}

int Path::ByteSize() const {
  int total_size = 0;

  // optional bytes nlri = 1;
  if (this->nlri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nlri());
  }

  // optional int64 age = 3;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->age());
  }

  // optional bool best = 4;
  if (this->best() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_withdraw = 5;
  if (this->is_withdraw() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 validation = 6;
  if (this->validation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->validation());
  }

  // optional bool no_implicit_withdraw = 7;
  if (this->no_implicit_withdraw() != 0) {
    total_size += 1 + 1;
  }

  // optional uint32 family = 8;
  if (this->family() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->family());
  }

  // optional uint32 source_asn = 9;
  if (this->source_asn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source_asn());
  }

  // optional string source_id = 10;
  if (this->source_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_id());
  }

  // optional bool filtered = 11;
  if (this->filtered() != 0) {
    total_size += 1 + 1;
  }

  // optional bool stale = 12;
  if (this->stale() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_from_external = 13;
  if (this->is_from_external() != 0) {
    total_size += 1 + 1;
  }

  // optional string neighbor_ip = 14;
  if (this->neighbor_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neighbor_ip());
  }

  // repeated bytes pattrs = 2;
  total_size += 1 * this->pattrs_size();
  for (int i = 0; i < this->pattrs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->pattrs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Path::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Path* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Path>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  pattrs_.MergeFrom(from.pattrs_);
  if (from.nlri().size() > 0) {

    nlri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nlri_);
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.best() != 0) {
    set_best(from.best());
  }
  if (from.is_withdraw() != 0) {
    set_is_withdraw(from.is_withdraw());
  }
  if (from.validation() != 0) {
    set_validation(from.validation());
  }
  if (from.no_implicit_withdraw() != 0) {
    set_no_implicit_withdraw(from.no_implicit_withdraw());
  }
  if (from.family() != 0) {
    set_family(from.family());
  }
  if (from.source_asn() != 0) {
    set_source_asn(from.source_asn());
  }
  if (from.source_id().size() > 0) {

    source_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_id_);
  }
  if (from.filtered() != 0) {
    set_filtered(from.filtered());
  }
  if (from.stale() != 0) {
    set_stale(from.stale());
  }
  if (from.is_from_external() != 0) {
    set_is_from_external(from.is_from_external());
  }
  if (from.neighbor_ip().size() > 0) {

    neighbor_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neighbor_ip_);
  }
}

void Path::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {

  return true;
}

void Path::Swap(Path* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Path::InternalSwap(Path* other) {
  nlri_.Swap(&other->nlri_);
  pattrs_.UnsafeArenaSwap(&other->pattrs_);
  std::swap(age_, other->age_);
  std::swap(best_, other->best_);
  std::swap(is_withdraw_, other->is_withdraw_);
  std::swap(validation_, other->validation_);
  std::swap(no_implicit_withdraw_, other->no_implicit_withdraw_);
  std::swap(family_, other->family_);
  std::swap(source_asn_, other->source_asn_);
  source_id_.Swap(&other->source_id_);
  std::swap(filtered_, other->filtered_);
  std::swap(stale_, other->stale_);
  std::swap(is_from_external_, other->is_from_external_);
  neighbor_ip_.Swap(&other->neighbor_ip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Path::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Path_descriptor_;
  metadata.reflection = Path_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Path

// optional bytes nlri = 1;
void Path::clear_nlri() {
  nlri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Path::nlri() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.nlri)
  return nlri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Path::set_nlri(const ::std::string& value) {
  
  nlri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.nlri)
}
 void Path::set_nlri(const char* value) {
  
  nlri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Path.nlri)
}
 void Path::set_nlri(const void* value, size_t size) {
  
  nlri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Path.nlri)
}
 ::std::string* Path::mutable_nlri() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.nlri)
  return nlri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Path::release_nlri() {
  
  return nlri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Path::set_allocated_nlri(::std::string* nlri) {
  if (nlri != NULL) {
    
  } else {
    
  }
  nlri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nlri);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Path.nlri)
}

// repeated bytes pattrs = 2;
int Path::pattrs_size() const {
  return pattrs_.size();
}
void Path::clear_pattrs() {
  pattrs_.Clear();
}
 const ::std::string& Path::pattrs(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.pattrs)
  return pattrs_.Get(index);
}
 ::std::string* Path::mutable_pattrs(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.pattrs)
  return pattrs_.Mutable(index);
}
 void Path::set_pattrs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Path.pattrs)
  pattrs_.Mutable(index)->assign(value);
}
 void Path::set_pattrs(int index, const char* value) {
  pattrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.Path.pattrs)
}
 void Path::set_pattrs(int index, const void* value, size_t size) {
  pattrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Path.pattrs)
}
 ::std::string* Path::add_pattrs() {
  return pattrs_.Add();
}
 void Path::add_pattrs(const ::std::string& value) {
  pattrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Path.pattrs)
}
 void Path::add_pattrs(const char* value) {
  pattrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.Path.pattrs)
}
 void Path::add_pattrs(const void* value, size_t size) {
  pattrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.Path.pattrs)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Path::pattrs() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Path.pattrs)
  return pattrs_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Path::mutable_pattrs() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Path.pattrs)
  return &pattrs_;
}

// optional int64 age = 3;
void Path::clear_age() {
  age_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Path::age() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.age)
  return age_;
}
 void Path::set_age(::google::protobuf::int64 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.age)
}

// optional bool best = 4;
void Path::clear_best() {
  best_ = false;
}
 bool Path::best() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.best)
  return best_;
}
 void Path::set_best(bool value) {
  
  best_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.best)
}

// optional bool is_withdraw = 5;
void Path::clear_is_withdraw() {
  is_withdraw_ = false;
}
 bool Path::is_withdraw() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.is_withdraw)
  return is_withdraw_;
}
 void Path::set_is_withdraw(bool value) {
  
  is_withdraw_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.is_withdraw)
}

// optional int32 validation = 6;
void Path::clear_validation() {
  validation_ = 0;
}
 ::google::protobuf::int32 Path::validation() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.validation)
  return validation_;
}
 void Path::set_validation(::google::protobuf::int32 value) {
  
  validation_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.validation)
}

// optional bool no_implicit_withdraw = 7;
void Path::clear_no_implicit_withdraw() {
  no_implicit_withdraw_ = false;
}
 bool Path::no_implicit_withdraw() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.no_implicit_withdraw)
  return no_implicit_withdraw_;
}
 void Path::set_no_implicit_withdraw(bool value) {
  
  no_implicit_withdraw_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.no_implicit_withdraw)
}

// optional uint32 family = 8;
void Path::clear_family() {
  family_ = 0u;
}
 ::google::protobuf::uint32 Path::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.family)
  return family_;
}
 void Path::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.family)
}

// optional uint32 source_asn = 9;
void Path::clear_source_asn() {
  source_asn_ = 0u;
}
 ::google::protobuf::uint32 Path::source_asn() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.source_asn)
  return source_asn_;
}
 void Path::set_source_asn(::google::protobuf::uint32 value) {
  
  source_asn_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.source_asn)
}

// optional string source_id = 10;
void Path::clear_source_id() {
  source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Path::source_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.source_id)
  return source_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Path::set_source_id(const ::std::string& value) {
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.source_id)
}
 void Path::set_source_id(const char* value) {
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Path.source_id)
}
 void Path::set_source_id(const char* value, size_t size) {
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Path.source_id)
}
 ::std::string* Path::mutable_source_id() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.source_id)
  return source_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Path::release_source_id() {
  
  return source_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Path::set_allocated_source_id(::std::string* source_id) {
  if (source_id != NULL) {
    
  } else {
    
  }
  source_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Path.source_id)
}

// optional bool filtered = 11;
void Path::clear_filtered() {
  filtered_ = false;
}
 bool Path::filtered() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.filtered)
  return filtered_;
}
 void Path::set_filtered(bool value) {
  
  filtered_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.filtered)
}

// optional bool stale = 12;
void Path::clear_stale() {
  stale_ = false;
}
 bool Path::stale() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.stale)
  return stale_;
}
 void Path::set_stale(bool value) {
  
  stale_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.stale)
}

// optional bool is_from_external = 13;
void Path::clear_is_from_external() {
  is_from_external_ = false;
}
 bool Path::is_from_external() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.is_from_external)
  return is_from_external_;
}
 void Path::set_is_from_external(bool value) {
  
  is_from_external_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Path.is_from_external)
}

// optional string neighbor_ip = 14;
void Path::clear_neighbor_ip() {
  neighbor_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Path::neighbor_ip() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Path.neighbor_ip)
  return neighbor_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Path::set_neighbor_ip(const ::std::string& value) {
  
  neighbor_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Path.neighbor_ip)
}
 void Path::set_neighbor_ip(const char* value) {
  
  neighbor_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Path.neighbor_ip)
}
 void Path::set_neighbor_ip(const char* value, size_t size) {
  
  neighbor_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Path.neighbor_ip)
}
 ::std::string* Path::mutable_neighbor_ip() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Path.neighbor_ip)
  return neighbor_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Path::release_neighbor_ip() {
  
  return neighbor_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Path::set_allocated_neighbor_ip(::std::string* neighbor_ip) {
  if (neighbor_ip != NULL) {
    
  } else {
    
  }
  neighbor_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neighbor_ip);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Path.neighbor_ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Destination::kPrefixFieldNumber;
const int Destination::kPathsFieldNumber;
const int Destination::kLongerPrefixesFieldNumber;
#endif  // !_MSC_VER

Destination::Destination()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Destination)
}

void Destination::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Destination::Destination(const Destination& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Destination)
}

void Destination::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  longer_prefixes_ = false;
}

Destination::~Destination() {
  // @@protoc_insertion_point(destructor:gobgpapi.Destination)
  SharedDtor();
}

void Destination::SharedDtor() {
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Destination::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Destination::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Destination_descriptor_;
}

const Destination& Destination::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

Destination* Destination::default_instance_ = NULL;

Destination* Destination::New(::google::protobuf::Arena* arena) const {
  Destination* n = new Destination;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Destination::Clear() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  longer_prefixes_ = false;
  paths_.Clear();
}

bool Destination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Destination)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string prefix = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Destination.prefix"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_paths;
        break;
      }

      // repeated .gobgpapi.Path paths = 2;
      case 2: {
        if (tag == 18) {
         parse_paths:
          DO_(input->IncrementRecursionDepth());
         parse_loop_paths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_paths()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_paths;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_longer_prefixes;
        break;
      }

      // optional bool longer_prefixes = 3;
      case 3: {
        if (tag == 24) {
         parse_longer_prefixes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &longer_prefixes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Destination)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Destination)
  return false;
#undef DO_
}

void Destination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Destination)
  // optional string prefix = 1;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Destination.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->prefix(), output);
  }

  // repeated .gobgpapi.Path paths = 2;
  for (unsigned int i = 0, n = this->paths_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->paths(i), output);
  }

  // optional bool longer_prefixes = 3;
  if (this->longer_prefixes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->longer_prefixes(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.Destination)
}

::google::protobuf::uint8* Destination::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Destination)
  // optional string prefix = 1;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Destination.prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->prefix(), target);
  }

  // repeated .gobgpapi.Path paths = 2;
  for (unsigned int i = 0, n = this->paths_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->paths(i), target);
  }

  // optional bool longer_prefixes = 3;
  if (this->longer_prefixes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->longer_prefixes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Destination)
  return target;
}

int Destination::ByteSize() const {
  int total_size = 0;

  // optional string prefix = 1;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefix());
  }

  // optional bool longer_prefixes = 3;
  if (this->longer_prefixes() != 0) {
    total_size += 1 + 1;
  }

  // repeated .gobgpapi.Path paths = 2;
  total_size += 1 * this->paths_size();
  for (int i = 0; i < this->paths_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paths(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Destination::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Destination* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Destination>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Destination::MergeFrom(const Destination& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  paths_.MergeFrom(from.paths_);
  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.longer_prefixes() != 0) {
    set_longer_prefixes(from.longer_prefixes());
  }
}

void Destination::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Destination::CopyFrom(const Destination& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Destination::IsInitialized() const {

  return true;
}

void Destination::Swap(Destination* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Destination::InternalSwap(Destination* other) {
  prefix_.Swap(&other->prefix_);
  paths_.UnsafeArenaSwap(&other->paths_);
  std::swap(longer_prefixes_, other->longer_prefixes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Destination::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Destination_descriptor_;
  metadata.reflection = Destination_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Destination

// optional string prefix = 1;
void Destination::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Destination::prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Destination.prefix)
  return prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Destination::set_prefix(const ::std::string& value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Destination.prefix)
}
 void Destination::set_prefix(const char* value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Destination.prefix)
}
 void Destination::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Destination.prefix)
}
 ::std::string* Destination::mutable_prefix() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Destination.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Destination::release_prefix() {
  
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Destination::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Destination.prefix)
}

// repeated .gobgpapi.Path paths = 2;
int Destination::paths_size() const {
  return paths_.size();
}
void Destination::clear_paths() {
  paths_.Clear();
}
const ::gobgpapi::Path& Destination::paths(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Destination.paths)
  return paths_.Get(index);
}
::gobgpapi::Path* Destination::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Destination.paths)
  return paths_.Mutable(index);
}
::gobgpapi::Path* Destination::add_paths() {
  // @@protoc_insertion_point(field_add:gobgpapi.Destination.paths)
  return paths_.Add();
}
::google::protobuf::RepeatedPtrField< ::gobgpapi::Path >*
Destination::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Destination.paths)
  return &paths_;
}
const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Path >&
Destination::paths() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Destination.paths)
  return paths_;
}

// optional bool longer_prefixes = 3;
void Destination::clear_longer_prefixes() {
  longer_prefixes_ = false;
}
 bool Destination::longer_prefixes() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Destination.longer_prefixes)
  return longer_prefixes_;
}
 void Destination::set_longer_prefixes(bool value) {
  
  longer_prefixes_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Destination.longer_prefixes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Table::kTypeFieldNumber;
const int Table::kNameFieldNumber;
const int Table::kFamilyFieldNumber;
const int Table::kDestinationsFieldNumber;
const int Table::kPostPolicyFieldNumber;
#endif  // !_MSC_VER

Table::Table()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Table)
}

void Table::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Table::Table(const Table& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Table)
}

void Table::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  family_ = 0u;
  post_policy_ = false;
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:gobgpapi.Table)
  SharedDtor();
}

void Table::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_descriptor_;
}

const Table& Table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

Table* Table::default_instance_ = NULL;

Table* Table::New(::google::protobuf::Arena* arena) const {
  Table* n = new Table;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Table*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, family_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  post_policy_ = false;

#undef ZR_HELPER_
#undef ZR_

  destinations_.Clear();
}

bool Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Table)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.Resource type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gobgpapi::Resource >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Table.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_family;
        break;
      }

      // optional uint32 family = 3;
      case 3: {
        if (tag == 24) {
         parse_family:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &family_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_destinations;
        break;
      }

      // repeated .gobgpapi.Destination destinations = 4;
      case 4: {
        if (tag == 34) {
         parse_destinations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_destinations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_destinations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_destinations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_post_policy;
        break;
      }

      // optional bool post_policy = 5;
      case 5: {
        if (tag == 40) {
         parse_post_policy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &post_policy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Table)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Table)
  return false;
#undef DO_
}

void Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Table)
  // optional .gobgpapi.Resource type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Table.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 family = 3;
  if (this->family() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->family(), output);
  }

  // repeated .gobgpapi.Destination destinations = 4;
  for (unsigned int i = 0, n = this->destinations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->destinations(i), output);
  }

  // optional bool post_policy = 5;
  if (this->post_policy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->post_policy(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.Table)
}

::google::protobuf::uint8* Table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Table)
  // optional .gobgpapi.Resource type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Table.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 family = 3;
  if (this->family() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->family(), target);
  }

  // repeated .gobgpapi.Destination destinations = 4;
  for (unsigned int i = 0, n = this->destinations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->destinations(i), target);
  }

  // optional bool post_policy = 5;
  if (this->post_policy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->post_policy(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Table)
  return target;
}

int Table::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.Resource type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 family = 3;
  if (this->family() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->family());
  }

  // optional bool post_policy = 5;
  if (this->post_policy() != 0) {
    total_size += 1 + 1;
  }

  // repeated .gobgpapi.Destination destinations = 4;
  total_size += 1 * this->destinations_size();
  for (int i = 0; i < this->destinations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->destinations(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Table* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Table>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  destinations_.MergeFrom(from.destinations_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.family() != 0) {
    set_family(from.family());
  }
  if (from.post_policy() != 0) {
    set_post_policy(from.post_policy());
  }
}

void Table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {

  return true;
}

void Table::Swap(Table* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table::InternalSwap(Table* other) {
  std::swap(type_, other->type_);
  name_.Swap(&other->name_);
  std::swap(family_, other->family_);
  destinations_.UnsafeArenaSwap(&other->destinations_);
  std::swap(post_policy_, other->post_policy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Table_descriptor_;
  metadata.reflection = Table_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Table

// optional .gobgpapi.Resource type = 1;
void Table::clear_type() {
  type_ = 0;
}
 ::gobgpapi::Resource Table::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Table.type)
  return static_cast< ::gobgpapi::Resource >(type_);
}
 void Table::set_type(::gobgpapi::Resource value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Table.type)
}

// optional string name = 2;
void Table::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Table::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Table.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Table::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Table.name)
}
 void Table::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Table.name)
}
 void Table::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Table.name)
}
 ::std::string* Table::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Table.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Table::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Table::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Table.name)
}

// optional uint32 family = 3;
void Table::clear_family() {
  family_ = 0u;
}
 ::google::protobuf::uint32 Table::family() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Table.family)
  return family_;
}
 void Table::set_family(::google::protobuf::uint32 value) {
  
  family_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Table.family)
}

// repeated .gobgpapi.Destination destinations = 4;
int Table::destinations_size() const {
  return destinations_.size();
}
void Table::clear_destinations() {
  destinations_.Clear();
}
const ::gobgpapi::Destination& Table::destinations(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Table.destinations)
  return destinations_.Get(index);
}
::gobgpapi::Destination* Table::mutable_destinations(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Table.destinations)
  return destinations_.Mutable(index);
}
::gobgpapi::Destination* Table::add_destinations() {
  // @@protoc_insertion_point(field_add:gobgpapi.Table.destinations)
  return destinations_.Add();
}
::google::protobuf::RepeatedPtrField< ::gobgpapi::Destination >*
Table::mutable_destinations() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Table.destinations)
  return &destinations_;
}
const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Destination >&
Table::destinations() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Table.destinations)
  return destinations_;
}

// optional bool post_policy = 5;
void Table::clear_post_policy() {
  post_policy_ = false;
}
 bool Table::post_policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Table.post_policy)
  return post_policy_;
}
 void Table::set_post_policy(bool value) {
  
  post_policy_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Table.post_policy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Peer::kFamiliesFieldNumber;
const int Peer::kApplyPolicyFieldNumber;
const int Peer::kConfFieldNumber;
const int Peer::kEbgpMultihopFieldNumber;
const int Peer::kRouteReflectorFieldNumber;
const int Peer::kInfoFieldNumber;
const int Peer::kTimersFieldNumber;
const int Peer::kTransportFieldNumber;
const int Peer::kRouteServerFieldNumber;
#endif  // !_MSC_VER

Peer::Peer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Peer)
}

void Peer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  apply_policy_ = const_cast< ::gobgpapi::ApplyPolicy*>(&::gobgpapi::ApplyPolicy::default_instance());
  conf_ = const_cast< ::gobgpapi::PeerConf*>(&::gobgpapi::PeerConf::default_instance());
  ebgp_multihop_ = const_cast< ::gobgpapi::EbgpMultihop*>(&::gobgpapi::EbgpMultihop::default_instance());
  route_reflector_ = const_cast< ::gobgpapi::RouteReflector*>(&::gobgpapi::RouteReflector::default_instance());
  info_ = const_cast< ::gobgpapi::PeerState*>(&::gobgpapi::PeerState::default_instance());
  timers_ = const_cast< ::gobgpapi::Timers*>(&::gobgpapi::Timers::default_instance());
  transport_ = const_cast< ::gobgpapi::Transport*>(&::gobgpapi::Transport::default_instance());
  route_server_ = const_cast< ::gobgpapi::RouteServer*>(&::gobgpapi::RouteServer::default_instance());
}

Peer::Peer(const Peer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Peer)
}

void Peer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  apply_policy_ = NULL;
  conf_ = NULL;
  ebgp_multihop_ = NULL;
  route_reflector_ = NULL;
  info_ = NULL;
  timers_ = NULL;
  transport_ = NULL;
  route_server_ = NULL;
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:gobgpapi.Peer)
  SharedDtor();
}

void Peer::SharedDtor() {
  if (this != default_instance_) {
    delete apply_policy_;
    delete conf_;
    delete ebgp_multihop_;
    delete route_reflector_;
    delete info_;
    delete timers_;
    delete transport_;
    delete route_server_;
  }
}

void Peer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Peer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Peer_descriptor_;
}

const Peer& Peer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

Peer* Peer::default_instance_ = NULL;

Peer* Peer::New(::google::protobuf::Arena* arena) const {
  Peer* n = new Peer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Peer::Clear() {
  if (GetArenaNoVirtual() == NULL && apply_policy_ != NULL) delete apply_policy_;
  apply_policy_ = NULL;
  if (GetArenaNoVirtual() == NULL && conf_ != NULL) delete conf_;
  conf_ = NULL;
  if (GetArenaNoVirtual() == NULL && ebgp_multihop_ != NULL) delete ebgp_multihop_;
  ebgp_multihop_ = NULL;
  if (GetArenaNoVirtual() == NULL && route_reflector_ != NULL) delete route_reflector_;
  route_reflector_ = NULL;
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
  if (GetArenaNoVirtual() == NULL && timers_ != NULL) delete timers_;
  timers_ = NULL;
  if (GetArenaNoVirtual() == NULL && transport_ != NULL) delete transport_;
  transport_ = NULL;
  if (GetArenaNoVirtual() == NULL && route_server_ != NULL) delete route_server_;
  route_server_ = NULL;
  families_.Clear();
}

bool Peer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Peer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 families = 2;
      case 2: {
        if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_families())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_families())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_apply_policy;
        break;
      }

      // optional .gobgpapi.ApplyPolicy apply_policy = 3;
      case 3: {
        if (tag == 26) {
         parse_apply_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_apply_policy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_conf;
        break;
      }

      // optional .gobgpapi.PeerConf conf = 5;
      case 5: {
        if (tag == 42) {
         parse_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ebgp_multihop;
        break;
      }

      // optional .gobgpapi.EbgpMultihop ebgp_multihop = 6;
      case 6: {
        if (tag == 50) {
         parse_ebgp_multihop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ebgp_multihop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_route_reflector;
        break;
      }

      // optional .gobgpapi.RouteReflector route_reflector = 10;
      case 10: {
        if (tag == 82) {
         parse_route_reflector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route_reflector()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_info;
        break;
      }

      // optional .gobgpapi.PeerState info = 11;
      case 11: {
        if (tag == 90) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_timers;
        break;
      }

      // optional .gobgpapi.Timers timers = 12;
      case 12: {
        if (tag == 98) {
         parse_timers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_transport;
        break;
      }

      // optional .gobgpapi.Transport transport = 13;
      case 13: {
        if (tag == 106) {
         parse_transport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transport()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_route_server;
        break;
      }

      // optional .gobgpapi.RouteServer route_server = 15;
      case 15: {
        if (tag == 122) {
         parse_route_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route_server()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Peer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Peer)
  return false;
#undef DO_
}

void Peer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Peer)
  // repeated uint32 families = 2;
  if (this->families_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_families_cached_byte_size_);
  }
  for (int i = 0; i < this->families_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->families(i), output);
  }

  // optional .gobgpapi.ApplyPolicy apply_policy = 3;
  if (this->has_apply_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->apply_policy_, output);
  }

  // optional .gobgpapi.PeerConf conf = 5;
  if (this->has_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->conf_, output);
  }

  // optional .gobgpapi.EbgpMultihop ebgp_multihop = 6;
  if (this->has_ebgp_multihop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ebgp_multihop_, output);
  }

  // optional .gobgpapi.RouteReflector route_reflector = 10;
  if (this->has_route_reflector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->route_reflector_, output);
  }

  // optional .gobgpapi.PeerState info = 11;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->info_, output);
  }

  // optional .gobgpapi.Timers timers = 12;
  if (this->has_timers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->timers_, output);
  }

  // optional .gobgpapi.Transport transport = 13;
  if (this->has_transport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->transport_, output);
  }

  // optional .gobgpapi.RouteServer route_server = 15;
  if (this->has_route_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->route_server_, output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.Peer)
}

::google::protobuf::uint8* Peer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Peer)
  // repeated uint32 families = 2;
  if (this->families_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _families_cached_byte_size_, target);
  }
  for (int i = 0; i < this->families_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->families(i), target);
  }

  // optional .gobgpapi.ApplyPolicy apply_policy = 3;
  if (this->has_apply_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->apply_policy_, target);
  }

  // optional .gobgpapi.PeerConf conf = 5;
  if (this->has_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->conf_, target);
  }

  // optional .gobgpapi.EbgpMultihop ebgp_multihop = 6;
  if (this->has_ebgp_multihop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->ebgp_multihop_, target);
  }

  // optional .gobgpapi.RouteReflector route_reflector = 10;
  if (this->has_route_reflector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->route_reflector_, target);
  }

  // optional .gobgpapi.PeerState info = 11;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->info_, target);
  }

  // optional .gobgpapi.Timers timers = 12;
  if (this->has_timers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *this->timers_, target);
  }

  // optional .gobgpapi.Transport transport = 13;
  if (this->has_transport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, *this->transport_, target);
  }

  // optional .gobgpapi.RouteServer route_server = 15;
  if (this->has_route_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, *this->route_server_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Peer)
  return target;
}

int Peer::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.ApplyPolicy apply_policy = 3;
  if (this->has_apply_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->apply_policy_);
  }

  // optional .gobgpapi.PeerConf conf = 5;
  if (this->has_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->conf_);
  }

  // optional .gobgpapi.EbgpMultihop ebgp_multihop = 6;
  if (this->has_ebgp_multihop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ebgp_multihop_);
  }

  // optional .gobgpapi.RouteReflector route_reflector = 10;
  if (this->has_route_reflector()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->route_reflector_);
  }

  // optional .gobgpapi.PeerState info = 11;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // optional .gobgpapi.Timers timers = 12;
  if (this->has_timers()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timers_);
  }

  // optional .gobgpapi.Transport transport = 13;
  if (this->has_transport()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transport_);
  }

  // optional .gobgpapi.RouteServer route_server = 15;
  if (this->has_route_server()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->route_server_);
  }

  // repeated uint32 families = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->families_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->families(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _families_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Peer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Peer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Peer>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Peer::MergeFrom(const Peer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  families_.MergeFrom(from.families_);
  if (from.has_apply_policy()) {
    mutable_apply_policy()->::gobgpapi::ApplyPolicy::MergeFrom(from.apply_policy());
  }
  if (from.has_conf()) {
    mutable_conf()->::gobgpapi::PeerConf::MergeFrom(from.conf());
  }
  if (from.has_ebgp_multihop()) {
    mutable_ebgp_multihop()->::gobgpapi::EbgpMultihop::MergeFrom(from.ebgp_multihop());
  }
  if (from.has_route_reflector()) {
    mutable_route_reflector()->::gobgpapi::RouteReflector::MergeFrom(from.route_reflector());
  }
  if (from.has_info()) {
    mutable_info()->::gobgpapi::PeerState::MergeFrom(from.info());
  }
  if (from.has_timers()) {
    mutable_timers()->::gobgpapi::Timers::MergeFrom(from.timers());
  }
  if (from.has_transport()) {
    mutable_transport()->::gobgpapi::Transport::MergeFrom(from.transport());
  }
  if (from.has_route_server()) {
    mutable_route_server()->::gobgpapi::RouteServer::MergeFrom(from.route_server());
  }
}

void Peer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Peer::CopyFrom(const Peer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer::IsInitialized() const {

  return true;
}

void Peer::Swap(Peer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Peer::InternalSwap(Peer* other) {
  families_.UnsafeArenaSwap(&other->families_);
  std::swap(apply_policy_, other->apply_policy_);
  std::swap(conf_, other->conf_);
  std::swap(ebgp_multihop_, other->ebgp_multihop_);
  std::swap(route_reflector_, other->route_reflector_);
  std::swap(info_, other->info_);
  std::swap(timers_, other->timers_);
  std::swap(transport_, other->transport_);
  std::swap(route_server_, other->route_server_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Peer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Peer_descriptor_;
  metadata.reflection = Peer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Peer

// repeated uint32 families = 2;
int Peer::families_size() const {
  return families_.size();
}
void Peer::clear_families() {
  families_.Clear();
}
 ::google::protobuf::uint32 Peer::families(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.families)
  return families_.Get(index);
}
 void Peer::set_families(int index, ::google::protobuf::uint32 value) {
  families_.Set(index, value);
  // @@protoc_insertion_point(field_set:gobgpapi.Peer.families)
}
 void Peer::add_families(::google::protobuf::uint32 value) {
  families_.Add(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Peer.families)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Peer::families() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Peer.families)
  return families_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Peer::mutable_families() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Peer.families)
  return &families_;
}

// optional .gobgpapi.ApplyPolicy apply_policy = 3;
bool Peer::has_apply_policy() const {
  return !_is_default_instance_ && apply_policy_ != NULL;
}
void Peer::clear_apply_policy() {
  if (GetArenaNoVirtual() == NULL && apply_policy_ != NULL) delete apply_policy_;
  apply_policy_ = NULL;
}
const ::gobgpapi::ApplyPolicy& Peer::apply_policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.apply_policy)
  return apply_policy_ != NULL ? *apply_policy_ : *default_instance_->apply_policy_;
}
::gobgpapi::ApplyPolicy* Peer::mutable_apply_policy() {
  
  if (apply_policy_ == NULL) {
    apply_policy_ = new ::gobgpapi::ApplyPolicy;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.apply_policy)
  return apply_policy_;
}
::gobgpapi::ApplyPolicy* Peer::release_apply_policy() {
  
  ::gobgpapi::ApplyPolicy* temp = apply_policy_;
  apply_policy_ = NULL;
  return temp;
}
void Peer::set_allocated_apply_policy(::gobgpapi::ApplyPolicy* apply_policy) {
  delete apply_policy_;
  apply_policy_ = apply_policy;
  if (apply_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.apply_policy)
}

// optional .gobgpapi.PeerConf conf = 5;
bool Peer::has_conf() const {
  return !_is_default_instance_ && conf_ != NULL;
}
void Peer::clear_conf() {
  if (GetArenaNoVirtual() == NULL && conf_ != NULL) delete conf_;
  conf_ = NULL;
}
const ::gobgpapi::PeerConf& Peer::conf() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.conf)
  return conf_ != NULL ? *conf_ : *default_instance_->conf_;
}
::gobgpapi::PeerConf* Peer::mutable_conf() {
  
  if (conf_ == NULL) {
    conf_ = new ::gobgpapi::PeerConf;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.conf)
  return conf_;
}
::gobgpapi::PeerConf* Peer::release_conf() {
  
  ::gobgpapi::PeerConf* temp = conf_;
  conf_ = NULL;
  return temp;
}
void Peer::set_allocated_conf(::gobgpapi::PeerConf* conf) {
  delete conf_;
  conf_ = conf;
  if (conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.conf)
}

// optional .gobgpapi.EbgpMultihop ebgp_multihop = 6;
bool Peer::has_ebgp_multihop() const {
  return !_is_default_instance_ && ebgp_multihop_ != NULL;
}
void Peer::clear_ebgp_multihop() {
  if (GetArenaNoVirtual() == NULL && ebgp_multihop_ != NULL) delete ebgp_multihop_;
  ebgp_multihop_ = NULL;
}
const ::gobgpapi::EbgpMultihop& Peer::ebgp_multihop() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.ebgp_multihop)
  return ebgp_multihop_ != NULL ? *ebgp_multihop_ : *default_instance_->ebgp_multihop_;
}
::gobgpapi::EbgpMultihop* Peer::mutable_ebgp_multihop() {
  
  if (ebgp_multihop_ == NULL) {
    ebgp_multihop_ = new ::gobgpapi::EbgpMultihop;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.ebgp_multihop)
  return ebgp_multihop_;
}
::gobgpapi::EbgpMultihop* Peer::release_ebgp_multihop() {
  
  ::gobgpapi::EbgpMultihop* temp = ebgp_multihop_;
  ebgp_multihop_ = NULL;
  return temp;
}
void Peer::set_allocated_ebgp_multihop(::gobgpapi::EbgpMultihop* ebgp_multihop) {
  delete ebgp_multihop_;
  ebgp_multihop_ = ebgp_multihop;
  if (ebgp_multihop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.ebgp_multihop)
}

// optional .gobgpapi.RouteReflector route_reflector = 10;
bool Peer::has_route_reflector() const {
  return !_is_default_instance_ && route_reflector_ != NULL;
}
void Peer::clear_route_reflector() {
  if (GetArenaNoVirtual() == NULL && route_reflector_ != NULL) delete route_reflector_;
  route_reflector_ = NULL;
}
const ::gobgpapi::RouteReflector& Peer::route_reflector() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.route_reflector)
  return route_reflector_ != NULL ? *route_reflector_ : *default_instance_->route_reflector_;
}
::gobgpapi::RouteReflector* Peer::mutable_route_reflector() {
  
  if (route_reflector_ == NULL) {
    route_reflector_ = new ::gobgpapi::RouteReflector;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.route_reflector)
  return route_reflector_;
}
::gobgpapi::RouteReflector* Peer::release_route_reflector() {
  
  ::gobgpapi::RouteReflector* temp = route_reflector_;
  route_reflector_ = NULL;
  return temp;
}
void Peer::set_allocated_route_reflector(::gobgpapi::RouteReflector* route_reflector) {
  delete route_reflector_;
  route_reflector_ = route_reflector;
  if (route_reflector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.route_reflector)
}

// optional .gobgpapi.PeerState info = 11;
bool Peer::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
void Peer::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::gobgpapi::PeerState& Peer::info() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
::gobgpapi::PeerState* Peer::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::gobgpapi::PeerState;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.info)
  return info_;
}
::gobgpapi::PeerState* Peer::release_info() {
  
  ::gobgpapi::PeerState* temp = info_;
  info_ = NULL;
  return temp;
}
void Peer::set_allocated_info(::gobgpapi::PeerState* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.info)
}

// optional .gobgpapi.Timers timers = 12;
bool Peer::has_timers() const {
  return !_is_default_instance_ && timers_ != NULL;
}
void Peer::clear_timers() {
  if (GetArenaNoVirtual() == NULL && timers_ != NULL) delete timers_;
  timers_ = NULL;
}
const ::gobgpapi::Timers& Peer::timers() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.timers)
  return timers_ != NULL ? *timers_ : *default_instance_->timers_;
}
::gobgpapi::Timers* Peer::mutable_timers() {
  
  if (timers_ == NULL) {
    timers_ = new ::gobgpapi::Timers;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.timers)
  return timers_;
}
::gobgpapi::Timers* Peer::release_timers() {
  
  ::gobgpapi::Timers* temp = timers_;
  timers_ = NULL;
  return temp;
}
void Peer::set_allocated_timers(::gobgpapi::Timers* timers) {
  delete timers_;
  timers_ = timers;
  if (timers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.timers)
}

// optional .gobgpapi.Transport transport = 13;
bool Peer::has_transport() const {
  return !_is_default_instance_ && transport_ != NULL;
}
void Peer::clear_transport() {
  if (GetArenaNoVirtual() == NULL && transport_ != NULL) delete transport_;
  transport_ = NULL;
}
const ::gobgpapi::Transport& Peer::transport() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.transport)
  return transport_ != NULL ? *transport_ : *default_instance_->transport_;
}
::gobgpapi::Transport* Peer::mutable_transport() {
  
  if (transport_ == NULL) {
    transport_ = new ::gobgpapi::Transport;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.transport)
  return transport_;
}
::gobgpapi::Transport* Peer::release_transport() {
  
  ::gobgpapi::Transport* temp = transport_;
  transport_ = NULL;
  return temp;
}
void Peer::set_allocated_transport(::gobgpapi::Transport* transport) {
  delete transport_;
  transport_ = transport;
  if (transport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.transport)
}

// optional .gobgpapi.RouteServer route_server = 15;
bool Peer::has_route_server() const {
  return !_is_default_instance_ && route_server_ != NULL;
}
void Peer::clear_route_server() {
  if (GetArenaNoVirtual() == NULL && route_server_ != NULL) delete route_server_;
  route_server_ = NULL;
}
const ::gobgpapi::RouteServer& Peer::route_server() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Peer.route_server)
  return route_server_ != NULL ? *route_server_ : *default_instance_->route_server_;
}
::gobgpapi::RouteServer* Peer::mutable_route_server() {
  
  if (route_server_ == NULL) {
    route_server_ = new ::gobgpapi::RouteServer;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Peer.route_server)
  return route_server_;
}
::gobgpapi::RouteServer* Peer::release_route_server() {
  
  ::gobgpapi::RouteServer* temp = route_server_;
  route_server_ = NULL;
  return temp;
}
void Peer::set_allocated_route_server(::gobgpapi::RouteServer* route_server) {
  delete route_server_;
  route_server_ = route_server;
  if (route_server) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Peer.route_server)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ApplyPolicy::kInPolicyFieldNumber;
const int ApplyPolicy::kExportPolicyFieldNumber;
const int ApplyPolicy::kImportPolicyFieldNumber;
#endif  // !_MSC_VER

ApplyPolicy::ApplyPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ApplyPolicy)
}

void ApplyPolicy::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  in_policy_ = const_cast< ::gobgpapi::PolicyAssignment*>(&::gobgpapi::PolicyAssignment::default_instance());
  export_policy_ = const_cast< ::gobgpapi::PolicyAssignment*>(&::gobgpapi::PolicyAssignment::default_instance());
  import_policy_ = const_cast< ::gobgpapi::PolicyAssignment*>(&::gobgpapi::PolicyAssignment::default_instance());
}

ApplyPolicy::ApplyPolicy(const ApplyPolicy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ApplyPolicy)
}

void ApplyPolicy::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  in_policy_ = NULL;
  export_policy_ = NULL;
  import_policy_ = NULL;
}

ApplyPolicy::~ApplyPolicy() {
  // @@protoc_insertion_point(destructor:gobgpapi.ApplyPolicy)
  SharedDtor();
}

void ApplyPolicy::SharedDtor() {
  if (this != default_instance_) {
    delete in_policy_;
    delete export_policy_;
    delete import_policy_;
  }
}

void ApplyPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyPolicy_descriptor_;
}

const ApplyPolicy& ApplyPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

ApplyPolicy* ApplyPolicy::default_instance_ = NULL;

ApplyPolicy* ApplyPolicy::New(::google::protobuf::Arena* arena) const {
  ApplyPolicy* n = new ApplyPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ApplyPolicy::Clear() {
  if (GetArenaNoVirtual() == NULL && in_policy_ != NULL) delete in_policy_;
  in_policy_ = NULL;
  if (GetArenaNoVirtual() == NULL && export_policy_ != NULL) delete export_policy_;
  export_policy_ = NULL;
  if (GetArenaNoVirtual() == NULL && import_policy_ != NULL) delete import_policy_;
  import_policy_ = NULL;
}

bool ApplyPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ApplyPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.PolicyAssignment in_policy = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_in_policy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_export_policy;
        break;
      }

      // optional .gobgpapi.PolicyAssignment export_policy = 2;
      case 2: {
        if (tag == 18) {
         parse_export_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_export_policy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_import_policy;
        break;
      }

      // optional .gobgpapi.PolicyAssignment import_policy = 3;
      case 3: {
        if (tag == 26) {
         parse_import_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_import_policy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ApplyPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ApplyPolicy)
  return false;
#undef DO_
}

void ApplyPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ApplyPolicy)
  // optional .gobgpapi.PolicyAssignment in_policy = 1;
  if (this->has_in_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->in_policy_, output);
  }

  // optional .gobgpapi.PolicyAssignment export_policy = 2;
  if (this->has_export_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->export_policy_, output);
  }

  // optional .gobgpapi.PolicyAssignment import_policy = 3;
  if (this->has_import_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->import_policy_, output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.ApplyPolicy)
}

::google::protobuf::uint8* ApplyPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ApplyPolicy)
  // optional .gobgpapi.PolicyAssignment in_policy = 1;
  if (this->has_in_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->in_policy_, target);
  }

  // optional .gobgpapi.PolicyAssignment export_policy = 2;
  if (this->has_export_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->export_policy_, target);
  }

  // optional .gobgpapi.PolicyAssignment import_policy = 3;
  if (this->has_import_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->import_policy_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ApplyPolicy)
  return target;
}

int ApplyPolicy::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.PolicyAssignment in_policy = 1;
  if (this->has_in_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->in_policy_);
  }

  // optional .gobgpapi.PolicyAssignment export_policy = 2;
  if (this->has_export_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->export_policy_);
  }

  // optional .gobgpapi.PolicyAssignment import_policy = 3;
  if (this->has_import_policy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->import_policy_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ApplyPolicy* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ApplyPolicy>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyPolicy::MergeFrom(const ApplyPolicy& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_in_policy()) {
    mutable_in_policy()->::gobgpapi::PolicyAssignment::MergeFrom(from.in_policy());
  }
  if (from.has_export_policy()) {
    mutable_export_policy()->::gobgpapi::PolicyAssignment::MergeFrom(from.export_policy());
  }
  if (from.has_import_policy()) {
    mutable_import_policy()->::gobgpapi::PolicyAssignment::MergeFrom(from.import_policy());
  }
}

void ApplyPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyPolicy::CopyFrom(const ApplyPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyPolicy::IsInitialized() const {

  return true;
}

void ApplyPolicy::Swap(ApplyPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ApplyPolicy::InternalSwap(ApplyPolicy* other) {
  std::swap(in_policy_, other->in_policy_);
  std::swap(export_policy_, other->export_policy_);
  std::swap(import_policy_, other->import_policy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ApplyPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyPolicy_descriptor_;
  metadata.reflection = ApplyPolicy_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ApplyPolicy

// optional .gobgpapi.PolicyAssignment in_policy = 1;
bool ApplyPolicy::has_in_policy() const {
  return !_is_default_instance_ && in_policy_ != NULL;
}
void ApplyPolicy::clear_in_policy() {
  if (GetArenaNoVirtual() == NULL && in_policy_ != NULL) delete in_policy_;
  in_policy_ = NULL;
}
const ::gobgpapi::PolicyAssignment& ApplyPolicy::in_policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ApplyPolicy.in_policy)
  return in_policy_ != NULL ? *in_policy_ : *default_instance_->in_policy_;
}
::gobgpapi::PolicyAssignment* ApplyPolicy::mutable_in_policy() {
  
  if (in_policy_ == NULL) {
    in_policy_ = new ::gobgpapi::PolicyAssignment;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ApplyPolicy.in_policy)
  return in_policy_;
}
::gobgpapi::PolicyAssignment* ApplyPolicy::release_in_policy() {
  
  ::gobgpapi::PolicyAssignment* temp = in_policy_;
  in_policy_ = NULL;
  return temp;
}
void ApplyPolicy::set_allocated_in_policy(::gobgpapi::PolicyAssignment* in_policy) {
  delete in_policy_;
  in_policy_ = in_policy;
  if (in_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ApplyPolicy.in_policy)
}

// optional .gobgpapi.PolicyAssignment export_policy = 2;
bool ApplyPolicy::has_export_policy() const {
  return !_is_default_instance_ && export_policy_ != NULL;
}
void ApplyPolicy::clear_export_policy() {
  if (GetArenaNoVirtual() == NULL && export_policy_ != NULL) delete export_policy_;
  export_policy_ = NULL;
}
const ::gobgpapi::PolicyAssignment& ApplyPolicy::export_policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ApplyPolicy.export_policy)
  return export_policy_ != NULL ? *export_policy_ : *default_instance_->export_policy_;
}
::gobgpapi::PolicyAssignment* ApplyPolicy::mutable_export_policy() {
  
  if (export_policy_ == NULL) {
    export_policy_ = new ::gobgpapi::PolicyAssignment;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ApplyPolicy.export_policy)
  return export_policy_;
}
::gobgpapi::PolicyAssignment* ApplyPolicy::release_export_policy() {
  
  ::gobgpapi::PolicyAssignment* temp = export_policy_;
  export_policy_ = NULL;
  return temp;
}
void ApplyPolicy::set_allocated_export_policy(::gobgpapi::PolicyAssignment* export_policy) {
  delete export_policy_;
  export_policy_ = export_policy;
  if (export_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ApplyPolicy.export_policy)
}

// optional .gobgpapi.PolicyAssignment import_policy = 3;
bool ApplyPolicy::has_import_policy() const {
  return !_is_default_instance_ && import_policy_ != NULL;
}
void ApplyPolicy::clear_import_policy() {
  if (GetArenaNoVirtual() == NULL && import_policy_ != NULL) delete import_policy_;
  import_policy_ = NULL;
}
const ::gobgpapi::PolicyAssignment& ApplyPolicy::import_policy() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ApplyPolicy.import_policy)
  return import_policy_ != NULL ? *import_policy_ : *default_instance_->import_policy_;
}
::gobgpapi::PolicyAssignment* ApplyPolicy::mutable_import_policy() {
  
  if (import_policy_ == NULL) {
    import_policy_ = new ::gobgpapi::PolicyAssignment;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ApplyPolicy.import_policy)
  return import_policy_;
}
::gobgpapi::PolicyAssignment* ApplyPolicy::release_import_policy() {
  
  ::gobgpapi::PolicyAssignment* temp = import_policy_;
  import_policy_ = NULL;
  return temp;
}
void ApplyPolicy::set_allocated_import_policy(::gobgpapi::PolicyAssignment* import_policy) {
  delete import_policy_;
  import_policy_ = import_policy;
  if (import_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ApplyPolicy.import_policy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PeerConf::kAuthPasswordFieldNumber;
const int PeerConf::kDescriptionFieldNumber;
const int PeerConf::kLocalAsFieldNumber;
const int PeerConf::kNeighborAddressFieldNumber;
const int PeerConf::kPeerAsFieldNumber;
const int PeerConf::kPeerGroupFieldNumber;
const int PeerConf::kPeerTypeFieldNumber;
const int PeerConf::kRemovePrivateAsFieldNumber;
const int PeerConf::kRouteFlapDampingFieldNumber;
const int PeerConf::kSendCommunityFieldNumber;
const int PeerConf::kRemoteCapFieldNumber;
const int PeerConf::kLocalCapFieldNumber;
const int PeerConf::kIdFieldNumber;
#endif  // !_MSC_VER

PeerConf::PeerConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.PeerConf)
}

void PeerConf::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PeerConf::PeerConf(const PeerConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.PeerConf)
}

void PeerConf::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  auth_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_as_ = 0u;
  neighbor_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_as_ = 0u;
  peer_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_type_ = 0u;
  remove_private_as_ = 0u;
  route_flap_damping_ = false;
  send_community_ = 0u;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerConf::~PeerConf() {
  // @@protoc_insertion_point(destructor:gobgpapi.PeerConf)
  SharedDtor();
}

void PeerConf::SharedDtor() {
  auth_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neighbor_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PeerConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerConf_descriptor_;
}

const PeerConf& PeerConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

PeerConf* PeerConf::default_instance_ = NULL;

PeerConf* PeerConf::New(::google::protobuf::Arena* arena) const {
  PeerConf* n = new PeerConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerConf::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PeerConf*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(local_as_, peer_as_);
  ZR_(peer_type_, remove_private_as_);
  auth_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neighbor_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(route_flap_damping_, send_community_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  remote_cap_.Clear();
  local_cap_.Clear();
}

bool PeerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.PeerConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string auth_password = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->auth_password().data(), this->auth_password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerConf.auth_password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerConf.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_local_as;
        break;
      }

      // optional uint32 local_as = 3;
      case 3: {
        if (tag == 24) {
         parse_local_as:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_as_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_neighbor_address;
        break;
      }

      // optional string neighbor_address = 4;
      case 4: {
        if (tag == 34) {
         parse_neighbor_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neighbor_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neighbor_address().data(), this->neighbor_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerConf.neighbor_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_peer_as;
        break;
      }

      // optional uint32 peer_as = 5;
      case 5: {
        if (tag == 40) {
         parse_peer_as:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peer_as_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_peer_group;
        break;
      }

      // optional string peer_group = 6;
      case 6: {
        if (tag == 50) {
         parse_peer_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->peer_group().data(), this->peer_group().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerConf.peer_group"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_peer_type;
        break;
      }

      // optional uint32 peer_type = 7;
      case 7: {
        if (tag == 56) {
         parse_peer_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peer_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_remove_private_as;
        break;
      }

      // optional uint32 remove_private_as = 8;
      case 8: {
        if (tag == 64) {
         parse_remove_private_as:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remove_private_as_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_route_flap_damping;
        break;
      }

      // optional bool route_flap_damping = 9;
      case 9: {
        if (tag == 72) {
         parse_route_flap_damping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &route_flap_damping_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_send_community;
        break;
      }

      // optional uint32 send_community = 10;
      case 10: {
        if (tag == 80) {
         parse_send_community:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_community_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_remote_cap;
        break;
      }

      // repeated bytes remote_cap = 11;
      case 11: {
        if (tag == 90) {
         parse_remote_cap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_remote_cap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_remote_cap;
        if (input->ExpectTag(98)) goto parse_local_cap;
        break;
      }

      // repeated bytes local_cap = 12;
      case 12: {
        if (tag == 98) {
         parse_local_cap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_local_cap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_local_cap;
        if (input->ExpectTag(106)) goto parse_id;
        break;
      }

      // optional string id = 13;
      case 13: {
        if (tag == 106) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerConf.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.PeerConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.PeerConf)
  return false;
#undef DO_
}

void PeerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.PeerConf)
  // optional string auth_password = 1;
  if (this->auth_password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth_password().data(), this->auth_password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.auth_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->auth_password(), output);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional uint32 local_as = 3;
  if (this->local_as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->local_as(), output);
  }

  // optional string neighbor_address = 4;
  if (this->neighbor_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neighbor_address().data(), this->neighbor_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.neighbor_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->neighbor_address(), output);
  }

  // optional uint32 peer_as = 5;
  if (this->peer_as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->peer_as(), output);
  }

  // optional string peer_group = 6;
  if (this->peer_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer_group().data(), this->peer_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.peer_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->peer_group(), output);
  }

  // optional uint32 peer_type = 7;
  if (this->peer_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->peer_type(), output);
  }

  // optional uint32 remove_private_as = 8;
  if (this->remove_private_as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->remove_private_as(), output);
  }

  // optional bool route_flap_damping = 9;
  if (this->route_flap_damping() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->route_flap_damping(), output);
  }

  // optional uint32 send_community = 10;
  if (this->send_community() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->send_community(), output);
  }

  // repeated bytes remote_cap = 11;
  for (int i = 0; i < this->remote_cap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->remote_cap(i), output);
  }

  // repeated bytes local_cap = 12;
  for (int i = 0; i < this->local_cap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->local_cap(i), output);
  }

  // optional string id = 13;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.PeerConf)
}

::google::protobuf::uint8* PeerConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.PeerConf)
  // optional string auth_password = 1;
  if (this->auth_password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth_password().data(), this->auth_password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.auth_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->auth_password(), target);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional uint32 local_as = 3;
  if (this->local_as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->local_as(), target);
  }

  // optional string neighbor_address = 4;
  if (this->neighbor_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neighbor_address().data(), this->neighbor_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.neighbor_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->neighbor_address(), target);
  }

  // optional uint32 peer_as = 5;
  if (this->peer_as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->peer_as(), target);
  }

  // optional string peer_group = 6;
  if (this->peer_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer_group().data(), this->peer_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.peer_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->peer_group(), target);
  }

  // optional uint32 peer_type = 7;
  if (this->peer_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->peer_type(), target);
  }

  // optional uint32 remove_private_as = 8;
  if (this->remove_private_as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->remove_private_as(), target);
  }

  // optional bool route_flap_damping = 9;
  if (this->route_flap_damping() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->route_flap_damping(), target);
  }

  // optional uint32 send_community = 10;
  if (this->send_community() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->send_community(), target);
  }

  // repeated bytes remote_cap = 11;
  for (int i = 0; i < this->remote_cap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(11, this->remote_cap(i), target);
  }

  // repeated bytes local_cap = 12;
  for (int i = 0; i < this->local_cap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(12, this->local_cap(i), target);
  }

  // optional string id = 13;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerConf.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.PeerConf)
  return target;
}

int PeerConf::ByteSize() const {
  int total_size = 0;

  // optional string auth_password = 1;
  if (this->auth_password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth_password());
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional uint32 local_as = 3;
  if (this->local_as() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->local_as());
  }

  // optional string neighbor_address = 4;
  if (this->neighbor_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neighbor_address());
  }

  // optional uint32 peer_as = 5;
  if (this->peer_as() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peer_as());
  }

  // optional string peer_group = 6;
  if (this->peer_group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_group());
  }

  // optional uint32 peer_type = 7;
  if (this->peer_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peer_type());
  }

  // optional uint32 remove_private_as = 8;
  if (this->remove_private_as() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remove_private_as());
  }

  // optional bool route_flap_damping = 9;
  if (this->route_flap_damping() != 0) {
    total_size += 1 + 1;
  }

  // optional uint32 send_community = 10;
  if (this->send_community() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->send_community());
  }

  // optional string id = 13;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // repeated bytes remote_cap = 11;
  total_size += 1 * this->remote_cap_size();
  for (int i = 0; i < this->remote_cap_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->remote_cap(i));
  }

  // repeated bytes local_cap = 12;
  total_size += 1 * this->local_cap_size();
  for (int i = 0; i < this->local_cap_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->local_cap(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerConf::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PeerConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerConf>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerConf::MergeFrom(const PeerConf& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  remote_cap_.MergeFrom(from.remote_cap_);
  local_cap_.MergeFrom(from.local_cap_);
  if (from.auth_password().size() > 0) {

    auth_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_password_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.local_as() != 0) {
    set_local_as(from.local_as());
  }
  if (from.neighbor_address().size() > 0) {

    neighbor_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neighbor_address_);
  }
  if (from.peer_as() != 0) {
    set_peer_as(from.peer_as());
  }
  if (from.peer_group().size() > 0) {

    peer_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_group_);
  }
  if (from.peer_type() != 0) {
    set_peer_type(from.peer_type());
  }
  if (from.remove_private_as() != 0) {
    set_remove_private_as(from.remove_private_as());
  }
  if (from.route_flap_damping() != 0) {
    set_route_flap_damping(from.route_flap_damping());
  }
  if (from.send_community() != 0) {
    set_send_community(from.send_community());
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void PeerConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerConf::CopyFrom(const PeerConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerConf::IsInitialized() const {

  return true;
}

void PeerConf::Swap(PeerConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerConf::InternalSwap(PeerConf* other) {
  auth_password_.Swap(&other->auth_password_);
  description_.Swap(&other->description_);
  std::swap(local_as_, other->local_as_);
  neighbor_address_.Swap(&other->neighbor_address_);
  std::swap(peer_as_, other->peer_as_);
  peer_group_.Swap(&other->peer_group_);
  std::swap(peer_type_, other->peer_type_);
  std::swap(remove_private_as_, other->remove_private_as_);
  std::swap(route_flap_damping_, other->route_flap_damping_);
  std::swap(send_community_, other->send_community_);
  remote_cap_.UnsafeArenaSwap(&other->remote_cap_);
  local_cap_.UnsafeArenaSwap(&other->local_cap_);
  id_.Swap(&other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerConf_descriptor_;
  metadata.reflection = PeerConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PeerConf

// optional string auth_password = 1;
void PeerConf::clear_auth_password() {
  auth_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PeerConf::auth_password() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.auth_password)
  return auth_password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerConf::set_auth_password(const ::std::string& value) {
  
  auth_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.auth_password)
}
 void PeerConf::set_auth_password(const char* value) {
  
  auth_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.auth_password)
}
 void PeerConf::set_auth_password(const char* value, size_t size) {
  
  auth_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.auth_password)
}
 ::std::string* PeerConf::mutable_auth_password() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.auth_password)
  return auth_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PeerConf::release_auth_password() {
  
  return auth_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerConf::set_allocated_auth_password(::std::string* auth_password) {
  if (auth_password != NULL) {
    
  } else {
    
  }
  auth_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_password);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.auth_password)
}

// optional string description = 2;
void PeerConf::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PeerConf::description() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerConf::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.description)
}
 void PeerConf::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.description)
}
 void PeerConf::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.description)
}
 ::std::string* PeerConf::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PeerConf::release_description() {
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerConf::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.description)
}

// optional uint32 local_as = 3;
void PeerConf::clear_local_as() {
  local_as_ = 0u;
}
 ::google::protobuf::uint32 PeerConf::local_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.local_as)
  return local_as_;
}
 void PeerConf::set_local_as(::google::protobuf::uint32 value) {
  
  local_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.local_as)
}

// optional string neighbor_address = 4;
void PeerConf::clear_neighbor_address() {
  neighbor_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PeerConf::neighbor_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.neighbor_address)
  return neighbor_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerConf::set_neighbor_address(const ::std::string& value) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.neighbor_address)
}
 void PeerConf::set_neighbor_address(const char* value) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.neighbor_address)
}
 void PeerConf::set_neighbor_address(const char* value, size_t size) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.neighbor_address)
}
 ::std::string* PeerConf::mutable_neighbor_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.neighbor_address)
  return neighbor_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PeerConf::release_neighbor_address() {
  
  return neighbor_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerConf::set_allocated_neighbor_address(::std::string* neighbor_address) {
  if (neighbor_address != NULL) {
    
  } else {
    
  }
  neighbor_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neighbor_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.neighbor_address)
}

// optional uint32 peer_as = 5;
void PeerConf::clear_peer_as() {
  peer_as_ = 0u;
}
 ::google::protobuf::uint32 PeerConf::peer_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.peer_as)
  return peer_as_;
}
 void PeerConf::set_peer_as(::google::protobuf::uint32 value) {
  
  peer_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.peer_as)
}

// optional string peer_group = 6;
void PeerConf::clear_peer_group() {
  peer_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PeerConf::peer_group() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.peer_group)
  return peer_group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerConf::set_peer_group(const ::std::string& value) {
  
  peer_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.peer_group)
}
 void PeerConf::set_peer_group(const char* value) {
  
  peer_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.peer_group)
}
 void PeerConf::set_peer_group(const char* value, size_t size) {
  
  peer_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.peer_group)
}
 ::std::string* PeerConf::mutable_peer_group() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.peer_group)
  return peer_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PeerConf::release_peer_group() {
  
  return peer_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerConf::set_allocated_peer_group(::std::string* peer_group) {
  if (peer_group != NULL) {
    
  } else {
    
  }
  peer_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_group);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.peer_group)
}

// optional uint32 peer_type = 7;
void PeerConf::clear_peer_type() {
  peer_type_ = 0u;
}
 ::google::protobuf::uint32 PeerConf::peer_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.peer_type)
  return peer_type_;
}
 void PeerConf::set_peer_type(::google::protobuf::uint32 value) {
  
  peer_type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.peer_type)
}

// optional uint32 remove_private_as = 8;
void PeerConf::clear_remove_private_as() {
  remove_private_as_ = 0u;
}
 ::google::protobuf::uint32 PeerConf::remove_private_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.remove_private_as)
  return remove_private_as_;
}
 void PeerConf::set_remove_private_as(::google::protobuf::uint32 value) {
  
  remove_private_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.remove_private_as)
}

// optional bool route_flap_damping = 9;
void PeerConf::clear_route_flap_damping() {
  route_flap_damping_ = false;
}
 bool PeerConf::route_flap_damping() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.route_flap_damping)
  return route_flap_damping_;
}
 void PeerConf::set_route_flap_damping(bool value) {
  
  route_flap_damping_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.route_flap_damping)
}

// optional uint32 send_community = 10;
void PeerConf::clear_send_community() {
  send_community_ = 0u;
}
 ::google::protobuf::uint32 PeerConf::send_community() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.send_community)
  return send_community_;
}
 void PeerConf::set_send_community(::google::protobuf::uint32 value) {
  
  send_community_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.send_community)
}

// repeated bytes remote_cap = 11;
int PeerConf::remote_cap_size() const {
  return remote_cap_.size();
}
void PeerConf::clear_remote_cap() {
  remote_cap_.Clear();
}
 const ::std::string& PeerConf::remote_cap(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.remote_cap)
  return remote_cap_.Get(index);
}
 ::std::string* PeerConf::mutable_remote_cap(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.remote_cap)
  return remote_cap_.Mutable(index);
}
 void PeerConf::set_remote_cap(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.remote_cap)
  remote_cap_.Mutable(index)->assign(value);
}
 void PeerConf::set_remote_cap(int index, const char* value) {
  remote_cap_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.remote_cap)
}
 void PeerConf::set_remote_cap(int index, const void* value, size_t size) {
  remote_cap_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.remote_cap)
}
 ::std::string* PeerConf::add_remote_cap() {
  return remote_cap_.Add();
}
 void PeerConf::add_remote_cap(const ::std::string& value) {
  remote_cap_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.PeerConf.remote_cap)
}
 void PeerConf::add_remote_cap(const char* value) {
  remote_cap_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.PeerConf.remote_cap)
}
 void PeerConf::add_remote_cap(const void* value, size_t size) {
  remote_cap_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.PeerConf.remote_cap)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PeerConf::remote_cap() const {
  // @@protoc_insertion_point(field_list:gobgpapi.PeerConf.remote_cap)
  return remote_cap_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PeerConf::mutable_remote_cap() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.PeerConf.remote_cap)
  return &remote_cap_;
}

// repeated bytes local_cap = 12;
int PeerConf::local_cap_size() const {
  return local_cap_.size();
}
void PeerConf::clear_local_cap() {
  local_cap_.Clear();
}
 const ::std::string& PeerConf::local_cap(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.local_cap)
  return local_cap_.Get(index);
}
 ::std::string* PeerConf::mutable_local_cap(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.local_cap)
  return local_cap_.Mutable(index);
}
 void PeerConf::set_local_cap(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.local_cap)
  local_cap_.Mutable(index)->assign(value);
}
 void PeerConf::set_local_cap(int index, const char* value) {
  local_cap_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.local_cap)
}
 void PeerConf::set_local_cap(int index, const void* value, size_t size) {
  local_cap_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.local_cap)
}
 ::std::string* PeerConf::add_local_cap() {
  return local_cap_.Add();
}
 void PeerConf::add_local_cap(const ::std::string& value) {
  local_cap_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.PeerConf.local_cap)
}
 void PeerConf::add_local_cap(const char* value) {
  local_cap_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.PeerConf.local_cap)
}
 void PeerConf::add_local_cap(const void* value, size_t size) {
  local_cap_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.PeerConf.local_cap)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PeerConf::local_cap() const {
  // @@protoc_insertion_point(field_list:gobgpapi.PeerConf.local_cap)
  return local_cap_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PeerConf::mutable_local_cap() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.PeerConf.local_cap)
  return &local_cap_;
}

// optional string id = 13;
void PeerConf::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PeerConf::id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerConf.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerConf::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerConf.id)
}
 void PeerConf::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerConf.id)
}
 void PeerConf::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerConf.id)
}
 ::std::string* PeerConf::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerConf.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PeerConf::release_id() {
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerConf::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerConf.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int EbgpMultihop::kEnabledFieldNumber;
const int EbgpMultihop::kMultihopTtlFieldNumber;
#endif  // !_MSC_VER

EbgpMultihop::EbgpMultihop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.EbgpMultihop)
}

void EbgpMultihop::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EbgpMultihop::EbgpMultihop(const EbgpMultihop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.EbgpMultihop)
}

void EbgpMultihop::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  enabled_ = false;
  multihop_ttl_ = 0u;
}

EbgpMultihop::~EbgpMultihop() {
  // @@protoc_insertion_point(destructor:gobgpapi.EbgpMultihop)
  SharedDtor();
}

void EbgpMultihop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EbgpMultihop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EbgpMultihop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EbgpMultihop_descriptor_;
}

const EbgpMultihop& EbgpMultihop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

EbgpMultihop* EbgpMultihop::default_instance_ = NULL;

EbgpMultihop* EbgpMultihop::New(::google::protobuf::Arena* arena) const {
  EbgpMultihop* n = new EbgpMultihop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EbgpMultihop::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EbgpMultihop*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(enabled_, multihop_ttl_);

#undef ZR_HELPER_
#undef ZR_

}

bool EbgpMultihop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.EbgpMultihop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_multihop_ttl;
        break;
      }

      // optional uint32 multihop_ttl = 2;
      case 2: {
        if (tag == 16) {
         parse_multihop_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multihop_ttl_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.EbgpMultihop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.EbgpMultihop)
  return false;
#undef DO_
}

void EbgpMultihop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.EbgpMultihop)
  // optional bool enabled = 1;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional uint32 multihop_ttl = 2;
  if (this->multihop_ttl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->multihop_ttl(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.EbgpMultihop)
}

::google::protobuf::uint8* EbgpMultihop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.EbgpMultihop)
  // optional bool enabled = 1;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional uint32 multihop_ttl = 2;
  if (this->multihop_ttl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->multihop_ttl(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.EbgpMultihop)
  return target;
}

int EbgpMultihop::ByteSize() const {
  int total_size = 0;

  // optional bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // optional uint32 multihop_ttl = 2;
  if (this->multihop_ttl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->multihop_ttl());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EbgpMultihop::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EbgpMultihop* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EbgpMultihop>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EbgpMultihop::MergeFrom(const EbgpMultihop& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
  if (from.multihop_ttl() != 0) {
    set_multihop_ttl(from.multihop_ttl());
  }
}

void EbgpMultihop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EbgpMultihop::CopyFrom(const EbgpMultihop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EbgpMultihop::IsInitialized() const {

  return true;
}

void EbgpMultihop::Swap(EbgpMultihop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EbgpMultihop::InternalSwap(EbgpMultihop* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(multihop_ttl_, other->multihop_ttl_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EbgpMultihop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EbgpMultihop_descriptor_;
  metadata.reflection = EbgpMultihop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EbgpMultihop

// optional bool enabled = 1;
void EbgpMultihop::clear_enabled() {
  enabled_ = false;
}
 bool EbgpMultihop::enabled() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EbgpMultihop.enabled)
  return enabled_;
}
 void EbgpMultihop::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.EbgpMultihop.enabled)
}

// optional uint32 multihop_ttl = 2;
void EbgpMultihop::clear_multihop_ttl() {
  multihop_ttl_ = 0u;
}
 ::google::protobuf::uint32 EbgpMultihop::multihop_ttl() const {
  // @@protoc_insertion_point(field_get:gobgpapi.EbgpMultihop.multihop_ttl)
  return multihop_ttl_;
}
 void EbgpMultihop::set_multihop_ttl(::google::protobuf::uint32 value) {
  
  multihop_ttl_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.EbgpMultihop.multihop_ttl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RouteReflector::kRouteReflectorClientFieldNumber;
const int RouteReflector::kRouteReflectorClusterIdFieldNumber;
#endif  // !_MSC_VER

RouteReflector::RouteReflector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteReflector)
}

void RouteReflector::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RouteReflector::RouteReflector(const RouteReflector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteReflector)
}

void RouteReflector::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  route_reflector_client_ = false;
  route_reflector_cluster_id_ = 0u;
}

RouteReflector::~RouteReflector() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteReflector)
  SharedDtor();
}

void RouteReflector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RouteReflector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteReflector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteReflector_descriptor_;
}

const RouteReflector& RouteReflector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

RouteReflector* RouteReflector::default_instance_ = NULL;

RouteReflector* RouteReflector::New(::google::protobuf::Arena* arena) const {
  RouteReflector* n = new RouteReflector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteReflector::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RouteReflector*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(route_reflector_client_, route_reflector_cluster_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool RouteReflector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.RouteReflector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool route_reflector_client = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &route_reflector_client_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_route_reflector_cluster_id;
        break;
      }

      // optional uint32 route_reflector_cluster_id = 2;
      case 2: {
        if (tag == 16) {
         parse_route_reflector_cluster_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &route_reflector_cluster_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.RouteReflector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.RouteReflector)
  return false;
#undef DO_
}

void RouteReflector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.RouteReflector)
  // optional bool route_reflector_client = 1;
  if (this->route_reflector_client() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->route_reflector_client(), output);
  }

  // optional uint32 route_reflector_cluster_id = 2;
  if (this->route_reflector_cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->route_reflector_cluster_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.RouteReflector)
}

::google::protobuf::uint8* RouteReflector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteReflector)
  // optional bool route_reflector_client = 1;
  if (this->route_reflector_client() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->route_reflector_client(), target);
  }

  // optional uint32 route_reflector_cluster_id = 2;
  if (this->route_reflector_cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->route_reflector_cluster_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteReflector)
  return target;
}

int RouteReflector::ByteSize() const {
  int total_size = 0;

  // optional bool route_reflector_client = 1;
  if (this->route_reflector_client() != 0) {
    total_size += 1 + 1;
  }

  // optional uint32 route_reflector_cluster_id = 2;
  if (this->route_reflector_cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->route_reflector_cluster_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteReflector::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RouteReflector* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteReflector>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouteReflector::MergeFrom(const RouteReflector& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.route_reflector_client() != 0) {
    set_route_reflector_client(from.route_reflector_client());
  }
  if (from.route_reflector_cluster_id() != 0) {
    set_route_reflector_cluster_id(from.route_reflector_cluster_id());
  }
}

void RouteReflector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteReflector::CopyFrom(const RouteReflector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteReflector::IsInitialized() const {

  return true;
}

void RouteReflector::Swap(RouteReflector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteReflector::InternalSwap(RouteReflector* other) {
  std::swap(route_reflector_client_, other->route_reflector_client_);
  std::swap(route_reflector_cluster_id_, other->route_reflector_cluster_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteReflector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouteReflector_descriptor_;
  metadata.reflection = RouteReflector_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteReflector

// optional bool route_reflector_client = 1;
void RouteReflector::clear_route_reflector_client() {
  route_reflector_client_ = false;
}
 bool RouteReflector::route_reflector_client() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteReflector.route_reflector_client)
  return route_reflector_client_;
}
 void RouteReflector::set_route_reflector_client(bool value) {
  
  route_reflector_client_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteReflector.route_reflector_client)
}

// optional uint32 route_reflector_cluster_id = 2;
void RouteReflector::clear_route_reflector_cluster_id() {
  route_reflector_cluster_id_ = 0u;
}
 ::google::protobuf::uint32 RouteReflector::route_reflector_cluster_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteReflector.route_reflector_cluster_id)
  return route_reflector_cluster_id_;
}
 void RouteReflector::set_route_reflector_cluster_id(::google::protobuf::uint32 value) {
  
  route_reflector_cluster_id_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteReflector.route_reflector_cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PeerState::kAuthPasswordFieldNumber;
const int PeerState::kDescriptionFieldNumber;
const int PeerState::kLocalAsFieldNumber;
const int PeerState::kMessagesFieldNumber;
const int PeerState::kNeighborAddressFieldNumber;
const int PeerState::kPeerAsFieldNumber;
const int PeerState::kPeerGroupFieldNumber;
const int PeerState::kPeerTypeFieldNumber;
const int PeerState::kQueuesFieldNumber;
const int PeerState::kRemovePrivateAsFieldNumber;
const int PeerState::kRouteFlapDampingFieldNumber;
const int PeerState::kSendCommunityFieldNumber;
const int PeerState::kSessionStateFieldNumber;
const int PeerState::kSupportedCapabilitiesFieldNumber;
const int PeerState::kBgpStateFieldNumber;
const int PeerState::kAdminStateFieldNumber;
const int PeerState::kReceivedFieldNumber;
const int PeerState::kAcceptedFieldNumber;
const int PeerState::kAdvertisedFieldNumber;
const int PeerState::kOutQFieldNumber;
const int PeerState::kFlopsFieldNumber;
#endif  // !_MSC_VER

PeerState::PeerState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.PeerState)
}

void PeerState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  messages_ = const_cast< ::gobgpapi::Messages*>(&::gobgpapi::Messages::default_instance());
  queues_ = const_cast< ::gobgpapi::Queues*>(&::gobgpapi::Queues::default_instance());
}

PeerState::PeerState(const PeerState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.PeerState)
}

void PeerState::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  auth_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_as_ = 0u;
  messages_ = NULL;
  neighbor_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_as_ = 0u;
  peer_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_type_ = 0u;
  queues_ = NULL;
  remove_private_as_ = 0u;
  route_flap_damping_ = false;
  send_community_ = 0u;
  session_state_ = 0u;
  bgp_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  admin_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  received_ = 0u;
  accepted_ = 0u;
  advertised_ = 0u;
  out_q_ = 0u;
  flops_ = 0u;
}

PeerState::~PeerState() {
  // @@protoc_insertion_point(destructor:gobgpapi.PeerState)
  SharedDtor();
}

void PeerState::SharedDtor() {
  auth_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  neighbor_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bgp_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  admin_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete messages_;
    delete queues_;
  }
}

void PeerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerState_descriptor_;
}

const PeerState& PeerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

PeerState* PeerState::default_instance_ = NULL;

PeerState* PeerState::New(::google::protobuf::Arena* arena) const {
  PeerState* n = new PeerState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerState::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PeerState*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(local_as_, peer_as_);
  auth_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && messages_ != NULL) delete messages_;
  messages_ = NULL;
  neighbor_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_type_ = 0u;
  ZR_(remove_private_as_, send_community_);
  if (GetArenaNoVirtual() == NULL && queues_ != NULL) delete queues_;
  queues_ = NULL;
  session_state_ = 0u;
  bgp_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  admin_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(accepted_, flops_);
  received_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  supported_capabilities_.Clear();
}

bool PeerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.PeerState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string auth_password = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->auth_password().data(), this->auth_password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerState.auth_password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerState.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_local_as;
        break;
      }

      // optional uint32 local_as = 3;
      case 3: {
        if (tag == 24) {
         parse_local_as:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_as_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_messages;
        break;
      }

      // optional .gobgpapi.Messages messages = 4;
      case 4: {
        if (tag == 34) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_neighbor_address;
        break;
      }

      // optional string neighbor_address = 5;
      case 5: {
        if (tag == 42) {
         parse_neighbor_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neighbor_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neighbor_address().data(), this->neighbor_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerState.neighbor_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_peer_as;
        break;
      }

      // optional uint32 peer_as = 6;
      case 6: {
        if (tag == 48) {
         parse_peer_as:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peer_as_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_peer_group;
        break;
      }

      // optional string peer_group = 7;
      case 7: {
        if (tag == 58) {
         parse_peer_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->peer_group().data(), this->peer_group().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerState.peer_group"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_peer_type;
        break;
      }

      // optional uint32 peer_type = 8;
      case 8: {
        if (tag == 64) {
         parse_peer_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peer_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_queues;
        break;
      }

      // optional .gobgpapi.Queues queues = 9;
      case 9: {
        if (tag == 74) {
         parse_queues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queues()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_remove_private_as;
        break;
      }

      // optional uint32 remove_private_as = 10;
      case 10: {
        if (tag == 80) {
         parse_remove_private_as:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remove_private_as_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_route_flap_damping;
        break;
      }

      // optional bool route_flap_damping = 11;
      case 11: {
        if (tag == 88) {
         parse_route_flap_damping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &route_flap_damping_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_send_community;
        break;
      }

      // optional uint32 send_community = 12;
      case 12: {
        if (tag == 96) {
         parse_send_community:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_community_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_session_state;
        break;
      }

      // optional uint32 session_state = 13;
      case 13: {
        if (tag == 104) {
         parse_session_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_state_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_supported_capabilities;
        break;
      }

      // repeated string supported_capabilities = 14;
      case 14: {
        if (tag == 114) {
         parse_supported_capabilities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_supported_capabilities()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->supported_capabilities(this->supported_capabilities_size() - 1).data(),
            this->supported_capabilities(this->supported_capabilities_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerState.supported_capabilities"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_supported_capabilities;
        if (input->ExpectTag(122)) goto parse_bgp_state;
        break;
      }

      // optional string bgp_state = 15;
      case 15: {
        if (tag == 122) {
         parse_bgp_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bgp_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bgp_state().data(), this->bgp_state().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerState.bgp_state"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_admin_state;
        break;
      }

      // optional string admin_state = 16;
      case 16: {
        if (tag == 130) {
         parse_admin_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_admin_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->admin_state().data(), this->admin_state().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PeerState.admin_state"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_received;
        break;
      }

      // optional uint32 received = 17;
      case 17: {
        if (tag == 136) {
         parse_received:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &received_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_accepted;
        break;
      }

      // optional uint32 accepted = 18;
      case 18: {
        if (tag == 144) {
         parse_accepted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accepted_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_advertised;
        break;
      }

      // optional uint32 advertised = 19;
      case 19: {
        if (tag == 152) {
         parse_advertised:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advertised_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_out_q;
        break;
      }

      // optional uint32 out_q = 20;
      case 20: {
        if (tag == 160) {
         parse_out_q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_q_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_flops;
        break;
      }

      // optional uint32 flops = 21;
      case 21: {
        if (tag == 168) {
         parse_flops:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flops_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.PeerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.PeerState)
  return false;
#undef DO_
}

void PeerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.PeerState)
  // optional string auth_password = 1;
  if (this->auth_password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth_password().data(), this->auth_password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.auth_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->auth_password(), output);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional uint32 local_as = 3;
  if (this->local_as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->local_as(), output);
  }

  // optional .gobgpapi.Messages messages = 4;
  if (this->has_messages()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->messages_, output);
  }

  // optional string neighbor_address = 5;
  if (this->neighbor_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neighbor_address().data(), this->neighbor_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.neighbor_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->neighbor_address(), output);
  }

  // optional uint32 peer_as = 6;
  if (this->peer_as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->peer_as(), output);
  }

  // optional string peer_group = 7;
  if (this->peer_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer_group().data(), this->peer_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.peer_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->peer_group(), output);
  }

  // optional uint32 peer_type = 8;
  if (this->peer_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->peer_type(), output);
  }

  // optional .gobgpapi.Queues queues = 9;
  if (this->has_queues()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->queues_, output);
  }

  // optional uint32 remove_private_as = 10;
  if (this->remove_private_as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->remove_private_as(), output);
  }

  // optional bool route_flap_damping = 11;
  if (this->route_flap_damping() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->route_flap_damping(), output);
  }

  // optional uint32 send_community = 12;
  if (this->send_community() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->send_community(), output);
  }

  // optional uint32 session_state = 13;
  if (this->session_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->session_state(), output);
  }

  // repeated string supported_capabilities = 14;
  for (int i = 0; i < this->supported_capabilities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->supported_capabilities(i).data(), this->supported_capabilities(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.supported_capabilities");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->supported_capabilities(i), output);
  }

  // optional string bgp_state = 15;
  if (this->bgp_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bgp_state().data(), this->bgp_state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.bgp_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->bgp_state(), output);
  }

  // optional string admin_state = 16;
  if (this->admin_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->admin_state().data(), this->admin_state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.admin_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->admin_state(), output);
  }

  // optional uint32 received = 17;
  if (this->received() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->received(), output);
  }

  // optional uint32 accepted = 18;
  if (this->accepted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->accepted(), output);
  }

  // optional uint32 advertised = 19;
  if (this->advertised() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->advertised(), output);
  }

  // optional uint32 out_q = 20;
  if (this->out_q() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->out_q(), output);
  }

  // optional uint32 flops = 21;
  if (this->flops() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->flops(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.PeerState)
}

::google::protobuf::uint8* PeerState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.PeerState)
  // optional string auth_password = 1;
  if (this->auth_password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth_password().data(), this->auth_password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.auth_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->auth_password(), target);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional uint32 local_as = 3;
  if (this->local_as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->local_as(), target);
  }

  // optional .gobgpapi.Messages messages = 4;
  if (this->has_messages()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->messages_, target);
  }

  // optional string neighbor_address = 5;
  if (this->neighbor_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neighbor_address().data(), this->neighbor_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.neighbor_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->neighbor_address(), target);
  }

  // optional uint32 peer_as = 6;
  if (this->peer_as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->peer_as(), target);
  }

  // optional string peer_group = 7;
  if (this->peer_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer_group().data(), this->peer_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.peer_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->peer_group(), target);
  }

  // optional uint32 peer_type = 8;
  if (this->peer_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->peer_type(), target);
  }

  // optional .gobgpapi.Queues queues = 9;
  if (this->has_queues()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->queues_, target);
  }

  // optional uint32 remove_private_as = 10;
  if (this->remove_private_as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->remove_private_as(), target);
  }

  // optional bool route_flap_damping = 11;
  if (this->route_flap_damping() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->route_flap_damping(), target);
  }

  // optional uint32 send_community = 12;
  if (this->send_community() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->send_community(), target);
  }

  // optional uint32 session_state = 13;
  if (this->session_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->session_state(), target);
  }

  // repeated string supported_capabilities = 14;
  for (int i = 0; i < this->supported_capabilities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->supported_capabilities(i).data(), this->supported_capabilities(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.supported_capabilities");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->supported_capabilities(i), target);
  }

  // optional string bgp_state = 15;
  if (this->bgp_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bgp_state().data(), this->bgp_state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.bgp_state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->bgp_state(), target);
  }

  // optional string admin_state = 16;
  if (this->admin_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->admin_state().data(), this->admin_state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PeerState.admin_state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->admin_state(), target);
  }

  // optional uint32 received = 17;
  if (this->received() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->received(), target);
  }

  // optional uint32 accepted = 18;
  if (this->accepted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->accepted(), target);
  }

  // optional uint32 advertised = 19;
  if (this->advertised() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->advertised(), target);
  }

  // optional uint32 out_q = 20;
  if (this->out_q() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->out_q(), target);
  }

  // optional uint32 flops = 21;
  if (this->flops() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->flops(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.PeerState)
  return target;
}

int PeerState::ByteSize() const {
  int total_size = 0;

  // optional string auth_password = 1;
  if (this->auth_password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth_password());
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional uint32 local_as = 3;
  if (this->local_as() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->local_as());
  }

  // optional .gobgpapi.Messages messages = 4;
  if (this->has_messages()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->messages_);
  }

  // optional string neighbor_address = 5;
  if (this->neighbor_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neighbor_address());
  }

  // optional uint32 peer_as = 6;
  if (this->peer_as() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peer_as());
  }

  // optional string peer_group = 7;
  if (this->peer_group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_group());
  }

  // optional uint32 peer_type = 8;
  if (this->peer_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peer_type());
  }

  // optional .gobgpapi.Queues queues = 9;
  if (this->has_queues()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->queues_);
  }

  // optional uint32 remove_private_as = 10;
  if (this->remove_private_as() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remove_private_as());
  }

  // optional bool route_flap_damping = 11;
  if (this->route_flap_damping() != 0) {
    total_size += 1 + 1;
  }

  // optional uint32 send_community = 12;
  if (this->send_community() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->send_community());
  }

  // optional uint32 session_state = 13;
  if (this->session_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_state());
  }

  // optional string bgp_state = 15;
  if (this->bgp_state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bgp_state());
  }

  // optional string admin_state = 16;
  if (this->admin_state().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->admin_state());
  }

  // optional uint32 received = 17;
  if (this->received() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->received());
  }

  // optional uint32 accepted = 18;
  if (this->accepted() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accepted());
  }

  // optional uint32 advertised = 19;
  if (this->advertised() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->advertised());
  }

  // optional uint32 out_q = 20;
  if (this->out_q() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->out_q());
  }

  // optional uint32 flops = 21;
  if (this->flops() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flops());
  }

  // repeated string supported_capabilities = 14;
  total_size += 1 * this->supported_capabilities_size();
  for (int i = 0; i < this->supported_capabilities_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->supported_capabilities(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerState::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PeerState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerState>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerState::MergeFrom(const PeerState& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  supported_capabilities_.MergeFrom(from.supported_capabilities_);
  if (from.auth_password().size() > 0) {

    auth_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_password_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.local_as() != 0) {
    set_local_as(from.local_as());
  }
  if (from.has_messages()) {
    mutable_messages()->::gobgpapi::Messages::MergeFrom(from.messages());
  }
  if (from.neighbor_address().size() > 0) {

    neighbor_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neighbor_address_);
  }
  if (from.peer_as() != 0) {
    set_peer_as(from.peer_as());
  }
  if (from.peer_group().size() > 0) {

    peer_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_group_);
  }
  if (from.peer_type() != 0) {
    set_peer_type(from.peer_type());
  }
  if (from.has_queues()) {
    mutable_queues()->::gobgpapi::Queues::MergeFrom(from.queues());
  }
  if (from.remove_private_as() != 0) {
    set_remove_private_as(from.remove_private_as());
  }
  if (from.route_flap_damping() != 0) {
    set_route_flap_damping(from.route_flap_damping());
  }
  if (from.send_community() != 0) {
    set_send_community(from.send_community());
  }
  if (from.session_state() != 0) {
    set_session_state(from.session_state());
  }
  if (from.bgp_state().size() > 0) {

    bgp_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bgp_state_);
  }
  if (from.admin_state().size() > 0) {

    admin_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.admin_state_);
  }
  if (from.received() != 0) {
    set_received(from.received());
  }
  if (from.accepted() != 0) {
    set_accepted(from.accepted());
  }
  if (from.advertised() != 0) {
    set_advertised(from.advertised());
  }
  if (from.out_q() != 0) {
    set_out_q(from.out_q());
  }
  if (from.flops() != 0) {
    set_flops(from.flops());
  }
}

void PeerState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerState::CopyFrom(const PeerState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerState::IsInitialized() const {

  return true;
}

void PeerState::Swap(PeerState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerState::InternalSwap(PeerState* other) {
  auth_password_.Swap(&other->auth_password_);
  description_.Swap(&other->description_);
  std::swap(local_as_, other->local_as_);
  std::swap(messages_, other->messages_);
  neighbor_address_.Swap(&other->neighbor_address_);
  std::swap(peer_as_, other->peer_as_);
  peer_group_.Swap(&other->peer_group_);
  std::swap(peer_type_, other->peer_type_);
  std::swap(queues_, other->queues_);
  std::swap(remove_private_as_, other->remove_private_as_);
  std::swap(route_flap_damping_, other->route_flap_damping_);
  std::swap(send_community_, other->send_community_);
  std::swap(session_state_, other->session_state_);
  supported_capabilities_.UnsafeArenaSwap(&other->supported_capabilities_);
  bgp_state_.Swap(&other->bgp_state_);
  admin_state_.Swap(&other->admin_state_);
  std::swap(received_, other->received_);
  std::swap(accepted_, other->accepted_);
  std::swap(advertised_, other->advertised_);
  std::swap(out_q_, other->out_q_);
  std::swap(flops_, other->flops_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerState_descriptor_;
  metadata.reflection = PeerState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PeerState

// optional string auth_password = 1;
void PeerState::clear_auth_password() {
  auth_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PeerState::auth_password() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.auth_password)
  return auth_password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerState::set_auth_password(const ::std::string& value) {
  
  auth_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.auth_password)
}
 void PeerState::set_auth_password(const char* value) {
  
  auth_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.auth_password)
}
 void PeerState::set_auth_password(const char* value, size_t size) {
  
  auth_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.auth_password)
}
 ::std::string* PeerState::mutable_auth_password() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.auth_password)
  return auth_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PeerState::release_auth_password() {
  
  return auth_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerState::set_allocated_auth_password(::std::string* auth_password) {
  if (auth_password != NULL) {
    
  } else {
    
  }
  auth_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_password);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.auth_password)
}

// optional string description = 2;
void PeerState::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PeerState::description() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerState::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.description)
}
 void PeerState::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.description)
}
 void PeerState::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.description)
}
 ::std::string* PeerState::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PeerState::release_description() {
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerState::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.description)
}

// optional uint32 local_as = 3;
void PeerState::clear_local_as() {
  local_as_ = 0u;
}
 ::google::protobuf::uint32 PeerState::local_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.local_as)
  return local_as_;
}
 void PeerState::set_local_as(::google::protobuf::uint32 value) {
  
  local_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.local_as)
}

// optional .gobgpapi.Messages messages = 4;
bool PeerState::has_messages() const {
  return !_is_default_instance_ && messages_ != NULL;
}
void PeerState::clear_messages() {
  if (GetArenaNoVirtual() == NULL && messages_ != NULL) delete messages_;
  messages_ = NULL;
}
const ::gobgpapi::Messages& PeerState::messages() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.messages)
  return messages_ != NULL ? *messages_ : *default_instance_->messages_;
}
::gobgpapi::Messages* PeerState::mutable_messages() {
  
  if (messages_ == NULL) {
    messages_ = new ::gobgpapi::Messages;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.messages)
  return messages_;
}
::gobgpapi::Messages* PeerState::release_messages() {
  
  ::gobgpapi::Messages* temp = messages_;
  messages_ = NULL;
  return temp;
}
void PeerState::set_allocated_messages(::gobgpapi::Messages* messages) {
  delete messages_;
  messages_ = messages;
  if (messages) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.messages)
}

// optional string neighbor_address = 5;
void PeerState::clear_neighbor_address() {
  neighbor_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PeerState::neighbor_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.neighbor_address)
  return neighbor_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerState::set_neighbor_address(const ::std::string& value) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.neighbor_address)
}
 void PeerState::set_neighbor_address(const char* value) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.neighbor_address)
}
 void PeerState::set_neighbor_address(const char* value, size_t size) {
  
  neighbor_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.neighbor_address)
}
 ::std::string* PeerState::mutable_neighbor_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.neighbor_address)
  return neighbor_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PeerState::release_neighbor_address() {
  
  return neighbor_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerState::set_allocated_neighbor_address(::std::string* neighbor_address) {
  if (neighbor_address != NULL) {
    
  } else {
    
  }
  neighbor_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neighbor_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.neighbor_address)
}

// optional uint32 peer_as = 6;
void PeerState::clear_peer_as() {
  peer_as_ = 0u;
}
 ::google::protobuf::uint32 PeerState::peer_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.peer_as)
  return peer_as_;
}
 void PeerState::set_peer_as(::google::protobuf::uint32 value) {
  
  peer_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.peer_as)
}

// optional string peer_group = 7;
void PeerState::clear_peer_group() {
  peer_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PeerState::peer_group() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.peer_group)
  return peer_group_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerState::set_peer_group(const ::std::string& value) {
  
  peer_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.peer_group)
}
 void PeerState::set_peer_group(const char* value) {
  
  peer_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.peer_group)
}
 void PeerState::set_peer_group(const char* value, size_t size) {
  
  peer_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.peer_group)
}
 ::std::string* PeerState::mutable_peer_group() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.peer_group)
  return peer_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PeerState::release_peer_group() {
  
  return peer_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerState::set_allocated_peer_group(::std::string* peer_group) {
  if (peer_group != NULL) {
    
  } else {
    
  }
  peer_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_group);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.peer_group)
}

// optional uint32 peer_type = 8;
void PeerState::clear_peer_type() {
  peer_type_ = 0u;
}
 ::google::protobuf::uint32 PeerState::peer_type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.peer_type)
  return peer_type_;
}
 void PeerState::set_peer_type(::google::protobuf::uint32 value) {
  
  peer_type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.peer_type)
}

// optional .gobgpapi.Queues queues = 9;
bool PeerState::has_queues() const {
  return !_is_default_instance_ && queues_ != NULL;
}
void PeerState::clear_queues() {
  if (GetArenaNoVirtual() == NULL && queues_ != NULL) delete queues_;
  queues_ = NULL;
}
const ::gobgpapi::Queues& PeerState::queues() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.queues)
  return queues_ != NULL ? *queues_ : *default_instance_->queues_;
}
::gobgpapi::Queues* PeerState::mutable_queues() {
  
  if (queues_ == NULL) {
    queues_ = new ::gobgpapi::Queues;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.queues)
  return queues_;
}
::gobgpapi::Queues* PeerState::release_queues() {
  
  ::gobgpapi::Queues* temp = queues_;
  queues_ = NULL;
  return temp;
}
void PeerState::set_allocated_queues(::gobgpapi::Queues* queues) {
  delete queues_;
  queues_ = queues;
  if (queues) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.queues)
}

// optional uint32 remove_private_as = 10;
void PeerState::clear_remove_private_as() {
  remove_private_as_ = 0u;
}
 ::google::protobuf::uint32 PeerState::remove_private_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.remove_private_as)
  return remove_private_as_;
}
 void PeerState::set_remove_private_as(::google::protobuf::uint32 value) {
  
  remove_private_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.remove_private_as)
}

// optional bool route_flap_damping = 11;
void PeerState::clear_route_flap_damping() {
  route_flap_damping_ = false;
}
 bool PeerState::route_flap_damping() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.route_flap_damping)
  return route_flap_damping_;
}
 void PeerState::set_route_flap_damping(bool value) {
  
  route_flap_damping_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.route_flap_damping)
}

// optional uint32 send_community = 12;
void PeerState::clear_send_community() {
  send_community_ = 0u;
}
 ::google::protobuf::uint32 PeerState::send_community() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.send_community)
  return send_community_;
}
 void PeerState::set_send_community(::google::protobuf::uint32 value) {
  
  send_community_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.send_community)
}

// optional uint32 session_state = 13;
void PeerState::clear_session_state() {
  session_state_ = 0u;
}
 ::google::protobuf::uint32 PeerState::session_state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.session_state)
  return session_state_;
}
 void PeerState::set_session_state(::google::protobuf::uint32 value) {
  
  session_state_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.session_state)
}

// repeated string supported_capabilities = 14;
int PeerState::supported_capabilities_size() const {
  return supported_capabilities_.size();
}
void PeerState::clear_supported_capabilities() {
  supported_capabilities_.Clear();
}
 const ::std::string& PeerState::supported_capabilities(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.supported_capabilities)
  return supported_capabilities_.Get(index);
}
 ::std::string* PeerState::mutable_supported_capabilities(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.supported_capabilities)
  return supported_capabilities_.Mutable(index);
}
 void PeerState::set_supported_capabilities(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.supported_capabilities)
  supported_capabilities_.Mutable(index)->assign(value);
}
 void PeerState::set_supported_capabilities(int index, const char* value) {
  supported_capabilities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.supported_capabilities)
}
 void PeerState::set_supported_capabilities(int index, const char* value, size_t size) {
  supported_capabilities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.supported_capabilities)
}
 ::std::string* PeerState::add_supported_capabilities() {
  return supported_capabilities_.Add();
}
 void PeerState::add_supported_capabilities(const ::std::string& value) {
  supported_capabilities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.PeerState.supported_capabilities)
}
 void PeerState::add_supported_capabilities(const char* value) {
  supported_capabilities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.PeerState.supported_capabilities)
}
 void PeerState::add_supported_capabilities(const char* value, size_t size) {
  supported_capabilities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.PeerState.supported_capabilities)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PeerState::supported_capabilities() const {
  // @@protoc_insertion_point(field_list:gobgpapi.PeerState.supported_capabilities)
  return supported_capabilities_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PeerState::mutable_supported_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.PeerState.supported_capabilities)
  return &supported_capabilities_;
}

// optional string bgp_state = 15;
void PeerState::clear_bgp_state() {
  bgp_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PeerState::bgp_state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.bgp_state)
  return bgp_state_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerState::set_bgp_state(const ::std::string& value) {
  
  bgp_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.bgp_state)
}
 void PeerState::set_bgp_state(const char* value) {
  
  bgp_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.bgp_state)
}
 void PeerState::set_bgp_state(const char* value, size_t size) {
  
  bgp_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.bgp_state)
}
 ::std::string* PeerState::mutable_bgp_state() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.bgp_state)
  return bgp_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PeerState::release_bgp_state() {
  
  return bgp_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerState::set_allocated_bgp_state(::std::string* bgp_state) {
  if (bgp_state != NULL) {
    
  } else {
    
  }
  bgp_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bgp_state);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.bgp_state)
}

// optional string admin_state = 16;
void PeerState::clear_admin_state() {
  admin_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PeerState::admin_state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.admin_state)
  return admin_state_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerState::set_admin_state(const ::std::string& value) {
  
  admin_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.admin_state)
}
 void PeerState::set_admin_state(const char* value) {
  
  admin_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PeerState.admin_state)
}
 void PeerState::set_admin_state(const char* value, size_t size) {
  
  admin_state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PeerState.admin_state)
}
 ::std::string* PeerState::mutable_admin_state() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PeerState.admin_state)
  return admin_state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PeerState::release_admin_state() {
  
  return admin_state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PeerState::set_allocated_admin_state(::std::string* admin_state) {
  if (admin_state != NULL) {
    
  } else {
    
  }
  admin_state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), admin_state);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PeerState.admin_state)
}

// optional uint32 received = 17;
void PeerState::clear_received() {
  received_ = 0u;
}
 ::google::protobuf::uint32 PeerState::received() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.received)
  return received_;
}
 void PeerState::set_received(::google::protobuf::uint32 value) {
  
  received_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.received)
}

// optional uint32 accepted = 18;
void PeerState::clear_accepted() {
  accepted_ = 0u;
}
 ::google::protobuf::uint32 PeerState::accepted() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.accepted)
  return accepted_;
}
 void PeerState::set_accepted(::google::protobuf::uint32 value) {
  
  accepted_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.accepted)
}

// optional uint32 advertised = 19;
void PeerState::clear_advertised() {
  advertised_ = 0u;
}
 ::google::protobuf::uint32 PeerState::advertised() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.advertised)
  return advertised_;
}
 void PeerState::set_advertised(::google::protobuf::uint32 value) {
  
  advertised_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.advertised)
}

// optional uint32 out_q = 20;
void PeerState::clear_out_q() {
  out_q_ = 0u;
}
 ::google::protobuf::uint32 PeerState::out_q() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.out_q)
  return out_q_;
}
 void PeerState::set_out_q(::google::protobuf::uint32 value) {
  
  out_q_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.out_q)
}

// optional uint32 flops = 21;
void PeerState::clear_flops() {
  flops_ = 0u;
}
 ::google::protobuf::uint32 PeerState::flops() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PeerState.flops)
  return flops_;
}
 void PeerState::set_flops(::google::protobuf::uint32 value) {
  
  flops_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PeerState.flops)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Messages::kReceivedFieldNumber;
const int Messages::kSentFieldNumber;
#endif  // !_MSC_VER

Messages::Messages()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Messages)
}

void Messages::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  received_ = const_cast< ::gobgpapi::Message*>(&::gobgpapi::Message::default_instance());
  sent_ = const_cast< ::gobgpapi::Message*>(&::gobgpapi::Message::default_instance());
}

Messages::Messages(const Messages& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Messages)
}

void Messages::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  received_ = NULL;
  sent_ = NULL;
}

Messages::~Messages() {
  // @@protoc_insertion_point(destructor:gobgpapi.Messages)
  SharedDtor();
}

void Messages::SharedDtor() {
  if (this != default_instance_) {
    delete received_;
    delete sent_;
  }
}

void Messages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Messages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Messages_descriptor_;
}

const Messages& Messages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

Messages* Messages::default_instance_ = NULL;

Messages* Messages::New(::google::protobuf::Arena* arena) const {
  Messages* n = new Messages;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Messages::Clear() {
  if (GetArenaNoVirtual() == NULL && received_ != NULL) delete received_;
  received_ = NULL;
  if (GetArenaNoVirtual() == NULL && sent_ != NULL) delete sent_;
  sent_ = NULL;
}

bool Messages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Messages)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.Message received = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_received()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sent;
        break;
      }

      // optional .gobgpapi.Message sent = 2;
      case 2: {
        if (tag == 18) {
         parse_sent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Messages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Messages)
  return false;
#undef DO_
}

void Messages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Messages)
  // optional .gobgpapi.Message received = 1;
  if (this->has_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->received_, output);
  }

  // optional .gobgpapi.Message sent = 2;
  if (this->has_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sent_, output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.Messages)
}

::google::protobuf::uint8* Messages::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Messages)
  // optional .gobgpapi.Message received = 1;
  if (this->has_received()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->received_, target);
  }

  // optional .gobgpapi.Message sent = 2;
  if (this->has_sent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->sent_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Messages)
  return target;
}

int Messages::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.Message received = 1;
  if (this->has_received()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->received_);
  }

  // optional .gobgpapi.Message sent = 2;
  if (this->has_sent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sent_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Messages::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Messages* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Messages>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Messages::MergeFrom(const Messages& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_received()) {
    mutable_received()->::gobgpapi::Message::MergeFrom(from.received());
  }
  if (from.has_sent()) {
    mutable_sent()->::gobgpapi::Message::MergeFrom(from.sent());
  }
}

void Messages::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Messages::CopyFrom(const Messages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Messages::IsInitialized() const {

  return true;
}

void Messages::Swap(Messages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Messages::InternalSwap(Messages* other) {
  std::swap(received_, other->received_);
  std::swap(sent_, other->sent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Messages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Messages_descriptor_;
  metadata.reflection = Messages_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Messages

// optional .gobgpapi.Message received = 1;
bool Messages::has_received() const {
  return !_is_default_instance_ && received_ != NULL;
}
void Messages::clear_received() {
  if (GetArenaNoVirtual() == NULL && received_ != NULL) delete received_;
  received_ = NULL;
}
const ::gobgpapi::Message& Messages::received() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Messages.received)
  return received_ != NULL ? *received_ : *default_instance_->received_;
}
::gobgpapi::Message* Messages::mutable_received() {
  
  if (received_ == NULL) {
    received_ = new ::gobgpapi::Message;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Messages.received)
  return received_;
}
::gobgpapi::Message* Messages::release_received() {
  
  ::gobgpapi::Message* temp = received_;
  received_ = NULL;
  return temp;
}
void Messages::set_allocated_received(::gobgpapi::Message* received) {
  delete received_;
  received_ = received;
  if (received) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Messages.received)
}

// optional .gobgpapi.Message sent = 2;
bool Messages::has_sent() const {
  return !_is_default_instance_ && sent_ != NULL;
}
void Messages::clear_sent() {
  if (GetArenaNoVirtual() == NULL && sent_ != NULL) delete sent_;
  sent_ = NULL;
}
const ::gobgpapi::Message& Messages::sent() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Messages.sent)
  return sent_ != NULL ? *sent_ : *default_instance_->sent_;
}
::gobgpapi::Message* Messages::mutable_sent() {
  
  if (sent_ == NULL) {
    sent_ = new ::gobgpapi::Message;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Messages.sent)
  return sent_;
}
::gobgpapi::Message* Messages::release_sent() {
  
  ::gobgpapi::Message* temp = sent_;
  sent_ = NULL;
  return temp;
}
void Messages::set_allocated_sent(::gobgpapi::Message* sent) {
  delete sent_;
  sent_ = sent;
  if (sent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Messages.sent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Message::kNOTIFICATIONFieldNumber;
const int Message::kUPDATEFieldNumber;
const int Message::kOPENFieldNumber;
const int Message::kKEEPALIVEFieldNumber;
const int Message::kREFRESHFieldNumber;
const int Message::kDISCARDEDFieldNumber;
const int Message::kTOTALFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Message)
}

void Message::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Message)
}

void Message::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  notification_ = GOOGLE_ULONGLONG(0);
  update_ = GOOGLE_ULONGLONG(0);
  open_ = GOOGLE_ULONGLONG(0);
  keepalive_ = GOOGLE_ULONGLONG(0);
  refresh_ = GOOGLE_ULONGLONG(0);
  discarded_ = GOOGLE_ULONGLONG(0);
  total_ = GOOGLE_ULONGLONG(0);
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:gobgpapi.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Message*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(notification_, total_);

#undef ZR_HELPER_
#undef ZR_

}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 NOTIFICATION = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &notification_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UPDATE;
        break;
      }

      // optional uint64 UPDATE = 2;
      case 2: {
        if (tag == 16) {
         parse_UPDATE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_OPEN;
        break;
      }

      // optional uint64 OPEN = 3;
      case 3: {
        if (tag == 24) {
         parse_OPEN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &open_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_KEEPALIVE;
        break;
      }

      // optional uint64 KEEPALIVE = 4;
      case 4: {
        if (tag == 32) {
         parse_KEEPALIVE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keepalive_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_REFRESH;
        break;
      }

      // optional uint64 REFRESH = 5;
      case 5: {
        if (tag == 40) {
         parse_REFRESH:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refresh_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_DISCARDED;
        break;
      }

      // optional uint64 DISCARDED = 6;
      case 6: {
        if (tag == 48) {
         parse_DISCARDED:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &discarded_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_TOTAL;
        break;
      }

      // optional uint64 TOTAL = 7;
      case 7: {
        if (tag == 56) {
         parse_TOTAL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Message)
  // optional uint64 NOTIFICATION = 1;
  if (this->notification() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->notification(), output);
  }

  // optional uint64 UPDATE = 2;
  if (this->update() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->update(), output);
  }

  // optional uint64 OPEN = 3;
  if (this->open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->open(), output);
  }

  // optional uint64 KEEPALIVE = 4;
  if (this->keepalive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->keepalive(), output);
  }

  // optional uint64 REFRESH = 5;
  if (this->refresh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->refresh(), output);
  }

  // optional uint64 DISCARDED = 6;
  if (this->discarded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->discarded(), output);
  }

  // optional uint64 TOTAL = 7;
  if (this->total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->total(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Message)
  // optional uint64 NOTIFICATION = 1;
  if (this->notification() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->notification(), target);
  }

  // optional uint64 UPDATE = 2;
  if (this->update() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->update(), target);
  }

  // optional uint64 OPEN = 3;
  if (this->open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->open(), target);
  }

  // optional uint64 KEEPALIVE = 4;
  if (this->keepalive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->keepalive(), target);
  }

  // optional uint64 REFRESH = 5;
  if (this->refresh() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->refresh(), target);
  }

  // optional uint64 DISCARDED = 6;
  if (this->discarded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->discarded(), target);
  }

  // optional uint64 TOTAL = 7;
  if (this->total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->total(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Message)
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  // optional uint64 NOTIFICATION = 1;
  if (this->notification() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->notification());
  }

  // optional uint64 UPDATE = 2;
  if (this->update() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->update());
  }

  // optional uint64 OPEN = 3;
  if (this->open() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->open());
  }

  // optional uint64 KEEPALIVE = 4;
  if (this->keepalive() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->keepalive());
  }

  // optional uint64 REFRESH = 5;
  if (this->refresh() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->refresh());
  }

  // optional uint64 DISCARDED = 6;
  if (this->discarded() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->discarded());
  }

  // optional uint64 TOTAL = 7;
  if (this->total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Message* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.notification() != 0) {
    set_notification(from.notification());
  }
  if (from.update() != 0) {
    set_update(from.update());
  }
  if (from.open() != 0) {
    set_open(from.open());
  }
  if (from.keepalive() != 0) {
    set_keepalive(from.keepalive());
  }
  if (from.refresh() != 0) {
    set_refresh(from.refresh());
  }
  if (from.discarded() != 0) {
    set_discarded(from.discarded());
  }
  if (from.total() != 0) {
    set_total(from.total());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  std::swap(notification_, other->notification_);
  std::swap(update_, other->update_);
  std::swap(open_, other->open_);
  std::swap(keepalive_, other->keepalive_);
  std::swap(refresh_, other->refresh_);
  std::swap(discarded_, other->discarded_);
  std::swap(total_, other->total_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// optional uint64 NOTIFICATION = 1;
void Message::clear_notification() {
  notification_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Message::notification() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.NOTIFICATION)
  return notification_;
}
 void Message::set_notification(::google::protobuf::uint64 value) {
  
  notification_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.NOTIFICATION)
}

// optional uint64 UPDATE = 2;
void Message::clear_update() {
  update_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Message::update() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.UPDATE)
  return update_;
}
 void Message::set_update(::google::protobuf::uint64 value) {
  
  update_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.UPDATE)
}

// optional uint64 OPEN = 3;
void Message::clear_open() {
  open_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Message::open() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.OPEN)
  return open_;
}
 void Message::set_open(::google::protobuf::uint64 value) {
  
  open_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.OPEN)
}

// optional uint64 KEEPALIVE = 4;
void Message::clear_keepalive() {
  keepalive_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Message::keepalive() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.KEEPALIVE)
  return keepalive_;
}
 void Message::set_keepalive(::google::protobuf::uint64 value) {
  
  keepalive_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.KEEPALIVE)
}

// optional uint64 REFRESH = 5;
void Message::clear_refresh() {
  refresh_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Message::refresh() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.REFRESH)
  return refresh_;
}
 void Message::set_refresh(::google::protobuf::uint64 value) {
  
  refresh_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.REFRESH)
}

// optional uint64 DISCARDED = 6;
void Message::clear_discarded() {
  discarded_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Message::discarded() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.DISCARDED)
  return discarded_;
}
 void Message::set_discarded(::google::protobuf::uint64 value) {
  
  discarded_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.DISCARDED)
}

// optional uint64 TOTAL = 7;
void Message::clear_total() {
  total_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Message::total() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Message.TOTAL)
  return total_;
}
 void Message::set_total(::google::protobuf::uint64 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Message.TOTAL)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Queues::kInputFieldNumber;
const int Queues::kOutputFieldNumber;
#endif  // !_MSC_VER

Queues::Queues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Queues)
}

void Queues::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Queues::Queues(const Queues& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Queues)
}

void Queues::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  input_ = 0u;
  output_ = 0u;
}

Queues::~Queues() {
  // @@protoc_insertion_point(destructor:gobgpapi.Queues)
  SharedDtor();
}

void Queues::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Queues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Queues::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Queues_descriptor_;
}

const Queues& Queues::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

Queues* Queues::default_instance_ = NULL;

Queues* Queues::New(::google::protobuf::Arena* arena) const {
  Queues* n = new Queues;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Queues::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Queues*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(input_, output_);

#undef ZR_HELPER_
#undef ZR_

}

bool Queues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Queues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 input = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_output;
        break;
      }

      // optional uint32 output = 2;
      case 2: {
        if (tag == 16) {
         parse_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Queues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Queues)
  return false;
#undef DO_
}

void Queues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Queues)
  // optional uint32 input = 1;
  if (this->input() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->input(), output);
  }

  // optional uint32 output = 2;
  if (this->output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->output(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.Queues)
}

::google::protobuf::uint8* Queues::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Queues)
  // optional uint32 input = 1;
  if (this->input() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->input(), target);
  }

  // optional uint32 output = 2;
  if (this->output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->output(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Queues)
  return target;
}

int Queues::ByteSize() const {
  int total_size = 0;

  // optional uint32 input = 1;
  if (this->input() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->input());
  }

  // optional uint32 output = 2;
  if (this->output() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->output());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Queues::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Queues* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Queues>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Queues::MergeFrom(const Queues& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.input() != 0) {
    set_input(from.input());
  }
  if (from.output() != 0) {
    set_output(from.output());
  }
}

void Queues::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Queues::CopyFrom(const Queues& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Queues::IsInitialized() const {

  return true;
}

void Queues::Swap(Queues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Queues::InternalSwap(Queues* other) {
  std::swap(input_, other->input_);
  std::swap(output_, other->output_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Queues::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Queues_descriptor_;
  metadata.reflection = Queues_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Queues

// optional uint32 input = 1;
void Queues::clear_input() {
  input_ = 0u;
}
 ::google::protobuf::uint32 Queues::input() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Queues.input)
  return input_;
}
 void Queues::set_input(::google::protobuf::uint32 value) {
  
  input_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Queues.input)
}

// optional uint32 output = 2;
void Queues::clear_output() {
  output_ = 0u;
}
 ::google::protobuf::uint32 Queues::output() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Queues.output)
  return output_;
}
 void Queues::set_output(::google::protobuf::uint32 value) {
  
  output_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Queues.output)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Timers::kConfigFieldNumber;
const int Timers::kStateFieldNumber;
#endif  // !_MSC_VER

Timers::Timers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Timers)
}

void Timers::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  config_ = const_cast< ::gobgpapi::TimersConfig*>(&::gobgpapi::TimersConfig::default_instance());
  state_ = const_cast< ::gobgpapi::TimersState*>(&::gobgpapi::TimersState::default_instance());
}

Timers::Timers(const Timers& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Timers)
}

void Timers::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  config_ = NULL;
  state_ = NULL;
}

Timers::~Timers() {
  // @@protoc_insertion_point(destructor:gobgpapi.Timers)
  SharedDtor();
}

void Timers::SharedDtor() {
  if (this != default_instance_) {
    delete config_;
    delete state_;
  }
}

void Timers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Timers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Timers_descriptor_;
}

const Timers& Timers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

Timers* Timers::default_instance_ = NULL;

Timers* Timers::New(::google::protobuf::Arena* arena) const {
  Timers* n = new Timers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Timers::Clear() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) delete state_;
  state_ = NULL;
}

bool Timers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Timers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.TimersConfig config = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }

      // optional .gobgpapi.TimersState state = 2;
      case 2: {
        if (tag == 18) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Timers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Timers)
  return false;
#undef DO_
}

void Timers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Timers)
  // optional .gobgpapi.TimersConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_, output);
  }

  // optional .gobgpapi.TimersState state = 2;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->state_, output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.Timers)
}

::google::protobuf::uint8* Timers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Timers)
  // optional .gobgpapi.TimersConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->config_, target);
  }

  // optional .gobgpapi.TimersState state = 2;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->state_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Timers)
  return target;
}

int Timers::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.TimersConfig config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  // optional .gobgpapi.TimersState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->state_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Timers::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Timers* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Timers>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Timers::MergeFrom(const Timers& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_config()) {
    mutable_config()->::gobgpapi::TimersConfig::MergeFrom(from.config());
  }
  if (from.has_state()) {
    mutable_state()->::gobgpapi::TimersState::MergeFrom(from.state());
  }
}

void Timers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timers::CopyFrom(const Timers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timers::IsInitialized() const {

  return true;
}

void Timers::Swap(Timers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Timers::InternalSwap(Timers* other) {
  std::swap(config_, other->config_);
  std::swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Timers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Timers_descriptor_;
  metadata.reflection = Timers_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Timers

// optional .gobgpapi.TimersConfig config = 1;
bool Timers::has_config() const {
  return !_is_default_instance_ && config_ != NULL;
}
void Timers::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::gobgpapi::TimersConfig& Timers::config() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Timers.config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
::gobgpapi::TimersConfig* Timers::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::gobgpapi::TimersConfig;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Timers.config)
  return config_;
}
::gobgpapi::TimersConfig* Timers::release_config() {
  
  ::gobgpapi::TimersConfig* temp = config_;
  config_ = NULL;
  return temp;
}
void Timers::set_allocated_config(::gobgpapi::TimersConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Timers.config)
}

// optional .gobgpapi.TimersState state = 2;
bool Timers::has_state() const {
  return !_is_default_instance_ && state_ != NULL;
}
void Timers::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) delete state_;
  state_ = NULL;
}
const ::gobgpapi::TimersState& Timers::state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Timers.state)
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
::gobgpapi::TimersState* Timers::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::gobgpapi::TimersState;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Timers.state)
  return state_;
}
::gobgpapi::TimersState* Timers::release_state() {
  
  ::gobgpapi::TimersState* temp = state_;
  state_ = NULL;
  return temp;
}
void Timers::set_allocated_state(::gobgpapi::TimersState* state) {
  delete state_;
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Timers.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TimersConfig::kConnectRetryFieldNumber;
const int TimersConfig::kHoldTimeFieldNumber;
const int TimersConfig::kKeepaliveIntervalFieldNumber;
const int TimersConfig::kMinimumAdvertisementIntervalFieldNumber;
#endif  // !_MSC_VER

TimersConfig::TimersConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.TimersConfig)
}

void TimersConfig::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TimersConfig::TimersConfig(const TimersConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.TimersConfig)
}

void TimersConfig::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  connect_retry_ = GOOGLE_ULONGLONG(0);
  hold_time_ = GOOGLE_ULONGLONG(0);
  keepalive_interval_ = GOOGLE_ULONGLONG(0);
  minimum_advertisement_interval_ = GOOGLE_ULONGLONG(0);
}

TimersConfig::~TimersConfig() {
  // @@protoc_insertion_point(destructor:gobgpapi.TimersConfig)
  SharedDtor();
}

void TimersConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimersConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimersConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimersConfig_descriptor_;
}

const TimersConfig& TimersConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

TimersConfig* TimersConfig::default_instance_ = NULL;

TimersConfig* TimersConfig::New(::google::protobuf::Arena* arena) const {
  TimersConfig* n = new TimersConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimersConfig::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TimersConfig*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(connect_retry_, minimum_advertisement_interval_);

#undef ZR_HELPER_
#undef ZR_

}

bool TimersConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.TimersConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 connect_retry = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &connect_retry_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hold_time;
        break;
      }

      // optional uint64 hold_time = 2;
      case 2: {
        if (tag == 16) {
         parse_hold_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hold_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_keepalive_interval;
        break;
      }

      // optional uint64 keepalive_interval = 3;
      case 3: {
        if (tag == 24) {
         parse_keepalive_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keepalive_interval_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_minimum_advertisement_interval;
        break;
      }

      // optional uint64 minimum_advertisement_interval = 4;
      case 4: {
        if (tag == 32) {
         parse_minimum_advertisement_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &minimum_advertisement_interval_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.TimersConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.TimersConfig)
  return false;
#undef DO_
}

void TimersConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.TimersConfig)
  // optional uint64 connect_retry = 1;
  if (this->connect_retry() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->connect_retry(), output);
  }

  // optional uint64 hold_time = 2;
  if (this->hold_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hold_time(), output);
  }

  // optional uint64 keepalive_interval = 3;
  if (this->keepalive_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->keepalive_interval(), output);
  }

  // optional uint64 minimum_advertisement_interval = 4;
  if (this->minimum_advertisement_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->minimum_advertisement_interval(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.TimersConfig)
}

::google::protobuf::uint8* TimersConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.TimersConfig)
  // optional uint64 connect_retry = 1;
  if (this->connect_retry() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->connect_retry(), target);
  }

  // optional uint64 hold_time = 2;
  if (this->hold_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hold_time(), target);
  }

  // optional uint64 keepalive_interval = 3;
  if (this->keepalive_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->keepalive_interval(), target);
  }

  // optional uint64 minimum_advertisement_interval = 4;
  if (this->minimum_advertisement_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->minimum_advertisement_interval(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.TimersConfig)
  return target;
}

int TimersConfig::ByteSize() const {
  int total_size = 0;

  // optional uint64 connect_retry = 1;
  if (this->connect_retry() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->connect_retry());
  }

  // optional uint64 hold_time = 2;
  if (this->hold_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->hold_time());
  }

  // optional uint64 keepalive_interval = 3;
  if (this->keepalive_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->keepalive_interval());
  }

  // optional uint64 minimum_advertisement_interval = 4;
  if (this->minimum_advertisement_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->minimum_advertisement_interval());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimersConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TimersConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TimersConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimersConfig::MergeFrom(const TimersConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.connect_retry() != 0) {
    set_connect_retry(from.connect_retry());
  }
  if (from.hold_time() != 0) {
    set_hold_time(from.hold_time());
  }
  if (from.keepalive_interval() != 0) {
    set_keepalive_interval(from.keepalive_interval());
  }
  if (from.minimum_advertisement_interval() != 0) {
    set_minimum_advertisement_interval(from.minimum_advertisement_interval());
  }
}

void TimersConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimersConfig::CopyFrom(const TimersConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimersConfig::IsInitialized() const {

  return true;
}

void TimersConfig::Swap(TimersConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimersConfig::InternalSwap(TimersConfig* other) {
  std::swap(connect_retry_, other->connect_retry_);
  std::swap(hold_time_, other->hold_time_);
  std::swap(keepalive_interval_, other->keepalive_interval_);
  std::swap(minimum_advertisement_interval_, other->minimum_advertisement_interval_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimersConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimersConfig_descriptor_;
  metadata.reflection = TimersConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimersConfig

// optional uint64 connect_retry = 1;
void TimersConfig::clear_connect_retry() {
  connect_retry_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TimersConfig::connect_retry() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersConfig.connect_retry)
  return connect_retry_;
}
 void TimersConfig::set_connect_retry(::google::protobuf::uint64 value) {
  
  connect_retry_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersConfig.connect_retry)
}

// optional uint64 hold_time = 2;
void TimersConfig::clear_hold_time() {
  hold_time_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TimersConfig::hold_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersConfig.hold_time)
  return hold_time_;
}
 void TimersConfig::set_hold_time(::google::protobuf::uint64 value) {
  
  hold_time_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersConfig.hold_time)
}

// optional uint64 keepalive_interval = 3;
void TimersConfig::clear_keepalive_interval() {
  keepalive_interval_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TimersConfig::keepalive_interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersConfig.keepalive_interval)
  return keepalive_interval_;
}
 void TimersConfig::set_keepalive_interval(::google::protobuf::uint64 value) {
  
  keepalive_interval_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersConfig.keepalive_interval)
}

// optional uint64 minimum_advertisement_interval = 4;
void TimersConfig::clear_minimum_advertisement_interval() {
  minimum_advertisement_interval_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TimersConfig::minimum_advertisement_interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersConfig.minimum_advertisement_interval)
  return minimum_advertisement_interval_;
}
 void TimersConfig::set_minimum_advertisement_interval(::google::protobuf::uint64 value) {
  
  minimum_advertisement_interval_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersConfig.minimum_advertisement_interval)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TimersState::kConnectRetryFieldNumber;
const int TimersState::kHoldTimeFieldNumber;
const int TimersState::kKeepaliveIntervalFieldNumber;
const int TimersState::kMinimumAdvertisementIntervalFieldNumber;
const int TimersState::kNegotiatedHoldTimeFieldNumber;
const int TimersState::kUptimeFieldNumber;
const int TimersState::kDowntimeFieldNumber;
#endif  // !_MSC_VER

TimersState::TimersState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.TimersState)
}

void TimersState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TimersState::TimersState(const TimersState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.TimersState)
}

void TimersState::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  connect_retry_ = GOOGLE_ULONGLONG(0);
  hold_time_ = GOOGLE_ULONGLONG(0);
  keepalive_interval_ = GOOGLE_ULONGLONG(0);
  minimum_advertisement_interval_ = GOOGLE_ULONGLONG(0);
  negotiated_hold_time_ = GOOGLE_ULONGLONG(0);
  uptime_ = GOOGLE_ULONGLONG(0);
  downtime_ = GOOGLE_ULONGLONG(0);
}

TimersState::~TimersState() {
  // @@protoc_insertion_point(destructor:gobgpapi.TimersState)
  SharedDtor();
}

void TimersState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimersState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimersState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimersState_descriptor_;
}

const TimersState& TimersState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

TimersState* TimersState::default_instance_ = NULL;

TimersState* TimersState::New(::google::protobuf::Arena* arena) const {
  TimersState* n = new TimersState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimersState::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TimersState*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(connect_retry_, downtime_);

#undef ZR_HELPER_
#undef ZR_

}

bool TimersState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.TimersState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 connect_retry = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &connect_retry_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hold_time;
        break;
      }

      // optional uint64 hold_time = 2;
      case 2: {
        if (tag == 16) {
         parse_hold_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hold_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_keepalive_interval;
        break;
      }

      // optional uint64 keepalive_interval = 3;
      case 3: {
        if (tag == 24) {
         parse_keepalive_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keepalive_interval_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_minimum_advertisement_interval;
        break;
      }

      // optional uint64 minimum_advertisement_interval = 4;
      case 4: {
        if (tag == 32) {
         parse_minimum_advertisement_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &minimum_advertisement_interval_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_negotiated_hold_time;
        break;
      }

      // optional uint64 negotiated_hold_time = 5;
      case 5: {
        if (tag == 40) {
         parse_negotiated_hold_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &negotiated_hold_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_uptime;
        break;
      }

      // optional uint64 uptime = 6;
      case 6: {
        if (tag == 48) {
         parse_uptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uptime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_downtime;
        break;
      }

      // optional uint64 downtime = 7;
      case 7: {
        if (tag == 56) {
         parse_downtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &downtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.TimersState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.TimersState)
  return false;
#undef DO_
}

void TimersState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.TimersState)
  // optional uint64 connect_retry = 1;
  if (this->connect_retry() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->connect_retry(), output);
  }

  // optional uint64 hold_time = 2;
  if (this->hold_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hold_time(), output);
  }

  // optional uint64 keepalive_interval = 3;
  if (this->keepalive_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->keepalive_interval(), output);
  }

  // optional uint64 minimum_advertisement_interval = 4;
  if (this->minimum_advertisement_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->minimum_advertisement_interval(), output);
  }

  // optional uint64 negotiated_hold_time = 5;
  if (this->negotiated_hold_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->negotiated_hold_time(), output);
  }

  // optional uint64 uptime = 6;
  if (this->uptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->uptime(), output);
  }

  // optional uint64 downtime = 7;
  if (this->downtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->downtime(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.TimersState)
}

::google::protobuf::uint8* TimersState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.TimersState)
  // optional uint64 connect_retry = 1;
  if (this->connect_retry() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->connect_retry(), target);
  }

  // optional uint64 hold_time = 2;
  if (this->hold_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hold_time(), target);
  }

  // optional uint64 keepalive_interval = 3;
  if (this->keepalive_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->keepalive_interval(), target);
  }

  // optional uint64 minimum_advertisement_interval = 4;
  if (this->minimum_advertisement_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->minimum_advertisement_interval(), target);
  }

  // optional uint64 negotiated_hold_time = 5;
  if (this->negotiated_hold_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->negotiated_hold_time(), target);
  }

  // optional uint64 uptime = 6;
  if (this->uptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->uptime(), target);
  }

  // optional uint64 downtime = 7;
  if (this->downtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->downtime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.TimersState)
  return target;
}

int TimersState::ByteSize() const {
  int total_size = 0;

  // optional uint64 connect_retry = 1;
  if (this->connect_retry() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->connect_retry());
  }

  // optional uint64 hold_time = 2;
  if (this->hold_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->hold_time());
  }

  // optional uint64 keepalive_interval = 3;
  if (this->keepalive_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->keepalive_interval());
  }

  // optional uint64 minimum_advertisement_interval = 4;
  if (this->minimum_advertisement_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->minimum_advertisement_interval());
  }

  // optional uint64 negotiated_hold_time = 5;
  if (this->negotiated_hold_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->negotiated_hold_time());
  }

  // optional uint64 uptime = 6;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uptime());
  }

  // optional uint64 downtime = 7;
  if (this->downtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->downtime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimersState::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TimersState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TimersState>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimersState::MergeFrom(const TimersState& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.connect_retry() != 0) {
    set_connect_retry(from.connect_retry());
  }
  if (from.hold_time() != 0) {
    set_hold_time(from.hold_time());
  }
  if (from.keepalive_interval() != 0) {
    set_keepalive_interval(from.keepalive_interval());
  }
  if (from.minimum_advertisement_interval() != 0) {
    set_minimum_advertisement_interval(from.minimum_advertisement_interval());
  }
  if (from.negotiated_hold_time() != 0) {
    set_negotiated_hold_time(from.negotiated_hold_time());
  }
  if (from.uptime() != 0) {
    set_uptime(from.uptime());
  }
  if (from.downtime() != 0) {
    set_downtime(from.downtime());
  }
}

void TimersState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimersState::CopyFrom(const TimersState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimersState::IsInitialized() const {

  return true;
}

void TimersState::Swap(TimersState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimersState::InternalSwap(TimersState* other) {
  std::swap(connect_retry_, other->connect_retry_);
  std::swap(hold_time_, other->hold_time_);
  std::swap(keepalive_interval_, other->keepalive_interval_);
  std::swap(minimum_advertisement_interval_, other->minimum_advertisement_interval_);
  std::swap(negotiated_hold_time_, other->negotiated_hold_time_);
  std::swap(uptime_, other->uptime_);
  std::swap(downtime_, other->downtime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimersState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimersState_descriptor_;
  metadata.reflection = TimersState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimersState

// optional uint64 connect_retry = 1;
void TimersState::clear_connect_retry() {
  connect_retry_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TimersState::connect_retry() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.connect_retry)
  return connect_retry_;
}
 void TimersState::set_connect_retry(::google::protobuf::uint64 value) {
  
  connect_retry_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.connect_retry)
}

// optional uint64 hold_time = 2;
void TimersState::clear_hold_time() {
  hold_time_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TimersState::hold_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.hold_time)
  return hold_time_;
}
 void TimersState::set_hold_time(::google::protobuf::uint64 value) {
  
  hold_time_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.hold_time)
}

// optional uint64 keepalive_interval = 3;
void TimersState::clear_keepalive_interval() {
  keepalive_interval_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TimersState::keepalive_interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.keepalive_interval)
  return keepalive_interval_;
}
 void TimersState::set_keepalive_interval(::google::protobuf::uint64 value) {
  
  keepalive_interval_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.keepalive_interval)
}

// optional uint64 minimum_advertisement_interval = 4;
void TimersState::clear_minimum_advertisement_interval() {
  minimum_advertisement_interval_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TimersState::minimum_advertisement_interval() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.minimum_advertisement_interval)
  return minimum_advertisement_interval_;
}
 void TimersState::set_minimum_advertisement_interval(::google::protobuf::uint64 value) {
  
  minimum_advertisement_interval_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.minimum_advertisement_interval)
}

// optional uint64 negotiated_hold_time = 5;
void TimersState::clear_negotiated_hold_time() {
  negotiated_hold_time_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TimersState::negotiated_hold_time() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.negotiated_hold_time)
  return negotiated_hold_time_;
}
 void TimersState::set_negotiated_hold_time(::google::protobuf::uint64 value) {
  
  negotiated_hold_time_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.negotiated_hold_time)
}

// optional uint64 uptime = 6;
void TimersState::clear_uptime() {
  uptime_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TimersState::uptime() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.uptime)
  return uptime_;
}
 void TimersState::set_uptime(::google::protobuf::uint64 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.uptime)
}

// optional uint64 downtime = 7;
void TimersState::clear_downtime() {
  downtime_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TimersState::downtime() const {
  // @@protoc_insertion_point(field_get:gobgpapi.TimersState.downtime)
  return downtime_;
}
 void TimersState::set_downtime(::google::protobuf::uint64 value) {
  
  downtime_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.TimersState.downtime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Transport::kLocalAddressFieldNumber;
const int Transport::kLocalPortFieldNumber;
const int Transport::kMtuDiscoveryFieldNumber;
const int Transport::kPassiveModeFieldNumber;
const int Transport::kRemoteAddressFieldNumber;
const int Transport::kRemotePortFieldNumber;
const int Transport::kTcpMssFieldNumber;
#endif  // !_MSC_VER

Transport::Transport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Transport)
}

void Transport::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Transport::Transport(const Transport& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Transport)
}

void Transport::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  local_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_port_ = 0u;
  mtu_discovery_ = false;
  passive_mode_ = false;
  remote_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_port_ = 0u;
  tcp_mss_ = 0u;
}

Transport::~Transport() {
  // @@protoc_insertion_point(destructor:gobgpapi.Transport)
  SharedDtor();
}

void Transport::SharedDtor() {
  local_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Transport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transport_descriptor_;
}

const Transport& Transport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

Transport* Transport::default_instance_ = NULL;

Transport* Transport::New(::google::protobuf::Arena* arena) const {
  Transport* n = new Transport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Transport*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(local_port_, passive_mode_);
  ZR_(remote_port_, tcp_mss_);
  local_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Transport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Transport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string local_address = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->local_address().data(), this->local_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Transport.local_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_local_port;
        break;
      }

      // optional uint32 local_port = 2;
      case 2: {
        if (tag == 16) {
         parse_local_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mtu_discovery;
        break;
      }

      // optional bool mtu_discovery = 3;
      case 3: {
        if (tag == 24) {
         parse_mtu_discovery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mtu_discovery_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_passive_mode;
        break;
      }

      // optional bool passive_mode = 4;
      case 4: {
        if (tag == 32) {
         parse_passive_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passive_mode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_remote_address;
        break;
      }

      // optional string remote_address = 5;
      case 5: {
        if (tag == 42) {
         parse_remote_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remote_address().data(), this->remote_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Transport.remote_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_remote_port;
        break;
      }

      // optional uint32 remote_port = 6;
      case 6: {
        if (tag == 48) {
         parse_remote_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_tcp_mss;
        break;
      }

      // optional uint32 tcp_mss = 7;
      case 7: {
        if (tag == 56) {
         parse_tcp_mss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcp_mss_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Transport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Transport)
  return false;
#undef DO_
}

void Transport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Transport)
  // optional string local_address = 1;
  if (this->local_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local_address().data(), this->local_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Transport.local_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->local_address(), output);
  }

  // optional uint32 local_port = 2;
  if (this->local_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->local_port(), output);
  }

  // optional bool mtu_discovery = 3;
  if (this->mtu_discovery() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->mtu_discovery(), output);
  }

  // optional bool passive_mode = 4;
  if (this->passive_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->passive_mode(), output);
  }

  // optional string remote_address = 5;
  if (this->remote_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote_address().data(), this->remote_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Transport.remote_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->remote_address(), output);
  }

  // optional uint32 remote_port = 6;
  if (this->remote_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->remote_port(), output);
  }

  // optional uint32 tcp_mss = 7;
  if (this->tcp_mss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tcp_mss(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.Transport)
}

::google::protobuf::uint8* Transport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Transport)
  // optional string local_address = 1;
  if (this->local_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local_address().data(), this->local_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Transport.local_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->local_address(), target);
  }

  // optional uint32 local_port = 2;
  if (this->local_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->local_port(), target);
  }

  // optional bool mtu_discovery = 3;
  if (this->mtu_discovery() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->mtu_discovery(), target);
  }

  // optional bool passive_mode = 4;
  if (this->passive_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->passive_mode(), target);
  }

  // optional string remote_address = 5;
  if (this->remote_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote_address().data(), this->remote_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Transport.remote_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->remote_address(), target);
  }

  // optional uint32 remote_port = 6;
  if (this->remote_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->remote_port(), target);
  }

  // optional uint32 tcp_mss = 7;
  if (this->tcp_mss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tcp_mss(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Transport)
  return target;
}

int Transport::ByteSize() const {
  int total_size = 0;

  // optional string local_address = 1;
  if (this->local_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->local_address());
  }

  // optional uint32 local_port = 2;
  if (this->local_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->local_port());
  }

  // optional bool mtu_discovery = 3;
  if (this->mtu_discovery() != 0) {
    total_size += 1 + 1;
  }

  // optional bool passive_mode = 4;
  if (this->passive_mode() != 0) {
    total_size += 1 + 1;
  }

  // optional string remote_address = 5;
  if (this->remote_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remote_address());
  }

  // optional uint32 remote_port = 6;
  if (this->remote_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remote_port());
  }

  // optional uint32 tcp_mss = 7;
  if (this->tcp_mss() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcp_mss());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Transport* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transport::MergeFrom(const Transport& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.local_address().size() > 0) {

    local_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_address_);
  }
  if (from.local_port() != 0) {
    set_local_port(from.local_port());
  }
  if (from.mtu_discovery() != 0) {
    set_mtu_discovery(from.mtu_discovery());
  }
  if (from.passive_mode() != 0) {
    set_passive_mode(from.passive_mode());
  }
  if (from.remote_address().size() > 0) {

    remote_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_address_);
  }
  if (from.remote_port() != 0) {
    set_remote_port(from.remote_port());
  }
  if (from.tcp_mss() != 0) {
    set_tcp_mss(from.tcp_mss());
  }
}

void Transport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport::CopyFrom(const Transport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport::IsInitialized() const {

  return true;
}

void Transport::Swap(Transport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport::InternalSwap(Transport* other) {
  local_address_.Swap(&other->local_address_);
  std::swap(local_port_, other->local_port_);
  std::swap(mtu_discovery_, other->mtu_discovery_);
  std::swap(passive_mode_, other->passive_mode_);
  remote_address_.Swap(&other->remote_address_);
  std::swap(remote_port_, other->remote_port_);
  std::swap(tcp_mss_, other->tcp_mss_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transport_descriptor_;
  metadata.reflection = Transport_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport

// optional string local_address = 1;
void Transport::clear_local_address() {
  local_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Transport::local_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.local_address)
  return local_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transport::set_local_address(const ::std::string& value) {
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.local_address)
}
 void Transport::set_local_address(const char* value) {
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Transport.local_address)
}
 void Transport::set_local_address(const char* value, size_t size) {
  
  local_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Transport.local_address)
}
 ::std::string* Transport::mutable_local_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Transport.local_address)
  return local_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transport::release_local_address() {
  
  return local_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transport::set_allocated_local_address(::std::string* local_address) {
  if (local_address != NULL) {
    
  } else {
    
  }
  local_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Transport.local_address)
}

// optional uint32 local_port = 2;
void Transport::clear_local_port() {
  local_port_ = 0u;
}
 ::google::protobuf::uint32 Transport::local_port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.local_port)
  return local_port_;
}
 void Transport::set_local_port(::google::protobuf::uint32 value) {
  
  local_port_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.local_port)
}

// optional bool mtu_discovery = 3;
void Transport::clear_mtu_discovery() {
  mtu_discovery_ = false;
}
 bool Transport::mtu_discovery() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.mtu_discovery)
  return mtu_discovery_;
}
 void Transport::set_mtu_discovery(bool value) {
  
  mtu_discovery_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.mtu_discovery)
}

// optional bool passive_mode = 4;
void Transport::clear_passive_mode() {
  passive_mode_ = false;
}
 bool Transport::passive_mode() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.passive_mode)
  return passive_mode_;
}
 void Transport::set_passive_mode(bool value) {
  
  passive_mode_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.passive_mode)
}

// optional string remote_address = 5;
void Transport::clear_remote_address() {
  remote_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Transport::remote_address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.remote_address)
  return remote_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transport::set_remote_address(const ::std::string& value) {
  
  remote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.remote_address)
}
 void Transport::set_remote_address(const char* value) {
  
  remote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Transport.remote_address)
}
 void Transport::set_remote_address(const char* value, size_t size) {
  
  remote_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Transport.remote_address)
}
 ::std::string* Transport::mutable_remote_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Transport.remote_address)
  return remote_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transport::release_remote_address() {
  
  return remote_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transport::set_allocated_remote_address(::std::string* remote_address) {
  if (remote_address != NULL) {
    
  } else {
    
  }
  remote_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Transport.remote_address)
}

// optional uint32 remote_port = 6;
void Transport::clear_remote_port() {
  remote_port_ = 0u;
}
 ::google::protobuf::uint32 Transport::remote_port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.remote_port)
  return remote_port_;
}
 void Transport::set_remote_port(::google::protobuf::uint32 value) {
  
  remote_port_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.remote_port)
}

// optional uint32 tcp_mss = 7;
void Transport::clear_tcp_mss() {
  tcp_mss_ = 0u;
}
 ::google::protobuf::uint32 Transport::tcp_mss() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Transport.tcp_mss)
  return tcp_mss_;
}
 void Transport::set_tcp_mss(::google::protobuf::uint32 value) {
  
  tcp_mss_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Transport.tcp_mss)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RouteServer::kRouteServerClientFieldNumber;
#endif  // !_MSC_VER

RouteServer::RouteServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RouteServer)
}

void RouteServer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RouteServer::RouteServer(const RouteServer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RouteServer)
}

void RouteServer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  route_server_client_ = false;
}

RouteServer::~RouteServer() {
  // @@protoc_insertion_point(destructor:gobgpapi.RouteServer)
  SharedDtor();
}

void RouteServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RouteServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteServer_descriptor_;
}

const RouteServer& RouteServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

RouteServer* RouteServer::default_instance_ = NULL;

RouteServer* RouteServer::New(::google::protobuf::Arena* arena) const {
  RouteServer* n = new RouteServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteServer::Clear() {
  route_server_client_ = false;
}

bool RouteServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.RouteServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool route_server_client = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &route_server_client_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.RouteServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.RouteServer)
  return false;
#undef DO_
}

void RouteServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.RouteServer)
  // optional bool route_server_client = 1;
  if (this->route_server_client() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->route_server_client(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.RouteServer)
}

::google::protobuf::uint8* RouteServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RouteServer)
  // optional bool route_server_client = 1;
  if (this->route_server_client() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->route_server_client(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RouteServer)
  return target;
}

int RouteServer::ByteSize() const {
  int total_size = 0;

  // optional bool route_server_client = 1;
  if (this->route_server_client() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteServer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RouteServer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteServer>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouteServer::MergeFrom(const RouteServer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.route_server_client() != 0) {
    set_route_server_client(from.route_server_client());
  }
}

void RouteServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteServer::CopyFrom(const RouteServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteServer::IsInitialized() const {

  return true;
}

void RouteServer::Swap(RouteServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteServer::InternalSwap(RouteServer* other) {
  std::swap(route_server_client_, other->route_server_client_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouteServer_descriptor_;
  metadata.reflection = RouteServer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteServer

// optional bool route_server_client = 1;
void RouteServer::clear_route_server_client() {
  route_server_client_ = false;
}
 bool RouteServer::route_server_client() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RouteServer.route_server_client)
  return route_server_client_;
}
 void RouteServer::set_route_server_client(bool value) {
  
  route_server_client_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RouteServer.route_server_client)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Prefix::kIpPrefixFieldNumber;
const int Prefix::kMaskLengthMinFieldNumber;
const int Prefix::kMaskLengthMaxFieldNumber;
#endif  // !_MSC_VER

Prefix::Prefix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Prefix)
}

void Prefix::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Prefix::Prefix(const Prefix& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Prefix)
}

void Prefix::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_length_min_ = 0u;
  mask_length_max_ = 0u;
}

Prefix::~Prefix() {
  // @@protoc_insertion_point(destructor:gobgpapi.Prefix)
  SharedDtor();
}

void Prefix::SharedDtor() {
  ip_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Prefix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Prefix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Prefix_descriptor_;
}

const Prefix& Prefix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

Prefix* Prefix::default_instance_ = NULL;

Prefix* Prefix::New(::google::protobuf::Arena* arena) const {
  Prefix* n = new Prefix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Prefix::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Prefix*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mask_length_min_, mask_length_max_);
  ip_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Prefix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Prefix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip_prefix = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_prefix().data(), this->ip_prefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Prefix.ip_prefix"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mask_length_min;
        break;
      }

      // optional uint32 mask_length_min = 2;
      case 2: {
        if (tag == 16) {
         parse_mask_length_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mask_length_min_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mask_length_max;
        break;
      }

      // optional uint32 mask_length_max = 3;
      case 3: {
        if (tag == 24) {
         parse_mask_length_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mask_length_max_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Prefix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Prefix)
  return false;
#undef DO_
}

void Prefix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Prefix)
  // optional string ip_prefix = 1;
  if (this->ip_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_prefix().data(), this->ip_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Prefix.ip_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip_prefix(), output);
  }

  // optional uint32 mask_length_min = 2;
  if (this->mask_length_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mask_length_min(), output);
  }

  // optional uint32 mask_length_max = 3;
  if (this->mask_length_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mask_length_max(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.Prefix)
}

::google::protobuf::uint8* Prefix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Prefix)
  // optional string ip_prefix = 1;
  if (this->ip_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_prefix().data(), this->ip_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Prefix.ip_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip_prefix(), target);
  }

  // optional uint32 mask_length_min = 2;
  if (this->mask_length_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mask_length_min(), target);
  }

  // optional uint32 mask_length_max = 3;
  if (this->mask_length_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mask_length_max(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Prefix)
  return target;
}

int Prefix::ByteSize() const {
  int total_size = 0;

  // optional string ip_prefix = 1;
  if (this->ip_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_prefix());
  }

  // optional uint32 mask_length_min = 2;
  if (this->mask_length_min() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mask_length_min());
  }

  // optional uint32 mask_length_max = 3;
  if (this->mask_length_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mask_length_max());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Prefix::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Prefix* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Prefix>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Prefix::MergeFrom(const Prefix& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.ip_prefix().size() > 0) {

    ip_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_prefix_);
  }
  if (from.mask_length_min() != 0) {
    set_mask_length_min(from.mask_length_min());
  }
  if (from.mask_length_max() != 0) {
    set_mask_length_max(from.mask_length_max());
  }
}

void Prefix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prefix::CopyFrom(const Prefix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prefix::IsInitialized() const {

  return true;
}

void Prefix::Swap(Prefix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Prefix::InternalSwap(Prefix* other) {
  ip_prefix_.Swap(&other->ip_prefix_);
  std::swap(mask_length_min_, other->mask_length_min_);
  std::swap(mask_length_max_, other->mask_length_max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Prefix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Prefix_descriptor_;
  metadata.reflection = Prefix_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Prefix

// optional string ip_prefix = 1;
void Prefix::clear_ip_prefix() {
  ip_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Prefix::ip_prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Prefix.ip_prefix)
  return ip_prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Prefix::set_ip_prefix(const ::std::string& value) {
  
  ip_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Prefix.ip_prefix)
}
 void Prefix::set_ip_prefix(const char* value) {
  
  ip_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Prefix.ip_prefix)
}
 void Prefix::set_ip_prefix(const char* value, size_t size) {
  
  ip_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Prefix.ip_prefix)
}
 ::std::string* Prefix::mutable_ip_prefix() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Prefix.ip_prefix)
  return ip_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Prefix::release_ip_prefix() {
  
  return ip_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Prefix::set_allocated_ip_prefix(::std::string* ip_prefix) {
  if (ip_prefix != NULL) {
    
  } else {
    
  }
  ip_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Prefix.ip_prefix)
}

// optional uint32 mask_length_min = 2;
void Prefix::clear_mask_length_min() {
  mask_length_min_ = 0u;
}
 ::google::protobuf::uint32 Prefix::mask_length_min() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Prefix.mask_length_min)
  return mask_length_min_;
}
 void Prefix::set_mask_length_min(::google::protobuf::uint32 value) {
  
  mask_length_min_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Prefix.mask_length_min)
}

// optional uint32 mask_length_max = 3;
void Prefix::clear_mask_length_max() {
  mask_length_max_ = 0u;
}
 ::google::protobuf::uint32 Prefix::mask_length_max() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Prefix.mask_length_max)
  return mask_length_max_;
}
 void Prefix::set_mask_length_max(::google::protobuf::uint32 value) {
  
  mask_length_max_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Prefix.mask_length_max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DefinedSet::kTypeFieldNumber;
const int DefinedSet::kNameFieldNumber;
const int DefinedSet::kListFieldNumber;
const int DefinedSet::kPrefixesFieldNumber;
#endif  // !_MSC_VER

DefinedSet::DefinedSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.DefinedSet)
}

void DefinedSet::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DefinedSet::DefinedSet(const DefinedSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.DefinedSet)
}

void DefinedSet::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DefinedSet::~DefinedSet() {
  // @@protoc_insertion_point(destructor:gobgpapi.DefinedSet)
  SharedDtor();
}

void DefinedSet::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DefinedSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DefinedSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DefinedSet_descriptor_;
}

const DefinedSet& DefinedSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

DefinedSet* DefinedSet::default_instance_ = NULL;

DefinedSet* DefinedSet::New(::google::protobuf::Arena* arena) const {
  DefinedSet* n = new DefinedSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DefinedSet::Clear() {
  type_ = 0;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  list_.Clear();
  prefixes_.Clear();
}

bool DefinedSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.DefinedSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.DefinedType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gobgpapi::DefinedType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.DefinedSet.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list;
        break;
      }

      // repeated string list = 3;
      case 3: {
        if (tag == 26) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->list(this->list_size() - 1).data(),
            this->list(this->list_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.DefinedSet.list"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list;
        if (input->ExpectTag(34)) goto parse_prefixes;
        break;
      }

      // repeated .gobgpapi.Prefix prefixes = 4;
      case 4: {
        if (tag == 34) {
         parse_prefixes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_prefixes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_prefixes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_prefixes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.DefinedSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.DefinedSet)
  return false;
#undef DO_
}

void DefinedSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.DefinedSet)
  // optional .gobgpapi.DefinedType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DefinedSet.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated string list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list(i).data(), this->list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DefinedSet.list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->list(i), output);
  }

  // repeated .gobgpapi.Prefix prefixes = 4;
  for (unsigned int i = 0, n = this->prefixes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->prefixes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.DefinedSet)
}

::google::protobuf::uint8* DefinedSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.DefinedSet)
  // optional .gobgpapi.DefinedType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DefinedSet.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated string list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list(i).data(), this->list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.DefinedSet.list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->list(i), target);
  }

  // repeated .gobgpapi.Prefix prefixes = 4;
  for (unsigned int i = 0, n = this->prefixes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->prefixes(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.DefinedSet)
  return target;
}

int DefinedSet::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.DefinedType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated string list = 3;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->list(i));
  }

  // repeated .gobgpapi.Prefix prefixes = 4;
  total_size += 1 * this->prefixes_size();
  for (int i = 0; i < this->prefixes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prefixes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DefinedSet::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DefinedSet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DefinedSet>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DefinedSet::MergeFrom(const DefinedSet& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  list_.MergeFrom(from.list_);
  prefixes_.MergeFrom(from.prefixes_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DefinedSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefinedSet::CopyFrom(const DefinedSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefinedSet::IsInitialized() const {

  return true;
}

void DefinedSet::Swap(DefinedSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DefinedSet::InternalSwap(DefinedSet* other) {
  std::swap(type_, other->type_);
  name_.Swap(&other->name_);
  list_.UnsafeArenaSwap(&other->list_);
  prefixes_.UnsafeArenaSwap(&other->prefixes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DefinedSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DefinedSet_descriptor_;
  metadata.reflection = DefinedSet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DefinedSet

// optional .gobgpapi.DefinedType type = 1;
void DefinedSet::clear_type() {
  type_ = 0;
}
 ::gobgpapi::DefinedType DefinedSet::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DefinedSet.type)
  return static_cast< ::gobgpapi::DefinedType >(type_);
}
 void DefinedSet::set_type(::gobgpapi::DefinedType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.DefinedSet.type)
}

// optional string name = 2;
void DefinedSet::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DefinedSet::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.DefinedSet.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DefinedSet::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.DefinedSet.name)
}
 void DefinedSet::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.DefinedSet.name)
}
 void DefinedSet::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DefinedSet.name)
}
 ::std::string* DefinedSet::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.DefinedSet.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DefinedSet::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DefinedSet::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.DefinedSet.name)
}

// repeated string list = 3;
int DefinedSet::list_size() const {
  return list_.size();
}
void DefinedSet::clear_list() {
  list_.Clear();
}
 const ::std::string& DefinedSet::list(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.DefinedSet.list)
  return list_.Get(index);
}
 ::std::string* DefinedSet::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DefinedSet.list)
  return list_.Mutable(index);
}
 void DefinedSet::set_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.DefinedSet.list)
  list_.Mutable(index)->assign(value);
}
 void DefinedSet::set_list(int index, const char* value) {
  list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.DefinedSet.list)
}
 void DefinedSet::set_list(int index, const char* value, size_t size) {
  list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.DefinedSet.list)
}
 ::std::string* DefinedSet::add_list() {
  return list_.Add();
}
 void DefinedSet::add_list(const ::std::string& value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.DefinedSet.list)
}
 void DefinedSet::add_list(const char* value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.DefinedSet.list)
}
 void DefinedSet::add_list(const char* value, size_t size) {
  list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.DefinedSet.list)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DefinedSet::list() const {
  // @@protoc_insertion_point(field_list:gobgpapi.DefinedSet.list)
  return list_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DefinedSet::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.DefinedSet.list)
  return &list_;
}

// repeated .gobgpapi.Prefix prefixes = 4;
int DefinedSet::prefixes_size() const {
  return prefixes_.size();
}
void DefinedSet::clear_prefixes() {
  prefixes_.Clear();
}
const ::gobgpapi::Prefix& DefinedSet::prefixes(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.DefinedSet.prefixes)
  return prefixes_.Get(index);
}
::gobgpapi::Prefix* DefinedSet::mutable_prefixes(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.DefinedSet.prefixes)
  return prefixes_.Mutable(index);
}
::gobgpapi::Prefix* DefinedSet::add_prefixes() {
  // @@protoc_insertion_point(field_add:gobgpapi.DefinedSet.prefixes)
  return prefixes_.Add();
}
::google::protobuf::RepeatedPtrField< ::gobgpapi::Prefix >*
DefinedSet::mutable_prefixes() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.DefinedSet.prefixes)
  return &prefixes_;
}
const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Prefix >&
DefinedSet::prefixes() const {
  // @@protoc_insertion_point(field_list:gobgpapi.DefinedSet.prefixes)
  return prefixes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MatchSet::kTypeFieldNumber;
const int MatchSet::kNameFieldNumber;
#endif  // !_MSC_VER

MatchSet::MatchSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MatchSet)
}

void MatchSet::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MatchSet::MatchSet(const MatchSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MatchSet)
}

void MatchSet::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MatchSet::~MatchSet() {
  // @@protoc_insertion_point(destructor:gobgpapi.MatchSet)
  SharedDtor();
}

void MatchSet::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MatchSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSet_descriptor_;
}

const MatchSet& MatchSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

MatchSet* MatchSet::default_instance_ = NULL;

MatchSet* MatchSet::New(::google::protobuf::Arena* arena) const {
  MatchSet* n = new MatchSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatchSet::Clear() {
  type_ = 0;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MatchSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.MatchSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.MatchType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gobgpapi::MatchType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.MatchSet.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.MatchSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.MatchSet)
  return false;
#undef DO_
}

void MatchSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.MatchSet)
  // optional .gobgpapi.MatchType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.MatchSet.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.MatchSet)
}

::google::protobuf::uint8* MatchSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MatchSet)
  // optional .gobgpapi.MatchType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.MatchSet.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MatchSet)
  return target;
}

int MatchSet::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.MatchType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSet::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MatchSet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchSet>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchSet::MergeFrom(const MatchSet& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void MatchSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSet::CopyFrom(const MatchSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSet::IsInitialized() const {

  return true;
}

void MatchSet::Swap(MatchSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchSet::InternalSwap(MatchSet* other) {
  std::swap(type_, other->type_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatchSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchSet_descriptor_;
  metadata.reflection = MatchSet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatchSet

// optional .gobgpapi.MatchType type = 1;
void MatchSet::clear_type() {
  type_ = 0;
}
 ::gobgpapi::MatchType MatchSet::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MatchSet.type)
  return static_cast< ::gobgpapi::MatchType >(type_);
}
 void MatchSet::set_type(::gobgpapi::MatchType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MatchSet.type)
}

// optional string name = 2;
void MatchSet::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MatchSet::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MatchSet.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MatchSet::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.MatchSet.name)
}
 void MatchSet::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.MatchSet.name)
}
 void MatchSet::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.MatchSet.name)
}
 ::std::string* MatchSet::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.MatchSet.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MatchSet::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MatchSet::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.MatchSet.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AsPathLength::kTypeFieldNumber;
const int AsPathLength::kLengthFieldNumber;
#endif  // !_MSC_VER

AsPathLength::AsPathLength()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AsPathLength)
}

void AsPathLength::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AsPathLength::AsPathLength(const AsPathLength& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AsPathLength)
}

void AsPathLength::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  length_ = 0u;
}

AsPathLength::~AsPathLength() {
  // @@protoc_insertion_point(destructor:gobgpapi.AsPathLength)
  SharedDtor();
}

void AsPathLength::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AsPathLength::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AsPathLength::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AsPathLength_descriptor_;
}

const AsPathLength& AsPathLength::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

AsPathLength* AsPathLength::default_instance_ = NULL;

AsPathLength* AsPathLength::New(::google::protobuf::Arena* arena) const {
  AsPathLength* n = new AsPathLength;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AsPathLength::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AsPathLength*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, length_);

#undef ZR_HELPER_
#undef ZR_

}

bool AsPathLength::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AsPathLength)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.AsPathLengthType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gobgpapi::AsPathLengthType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional uint32 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AsPathLength)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AsPathLength)
  return false;
#undef DO_
}

void AsPathLength::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AsPathLength)
  // optional .gobgpapi.AsPathLengthType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 length = 2;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.AsPathLength)
}

::google::protobuf::uint8* AsPathLength::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AsPathLength)
  // optional .gobgpapi.AsPathLengthType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 length = 2;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AsPathLength)
  return target;
}

int AsPathLength::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.AsPathLengthType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint32 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AsPathLength::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AsPathLength* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AsPathLength>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AsPathLength::MergeFrom(const AsPathLength& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void AsPathLength::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsPathLength::CopyFrom(const AsPathLength& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsPathLength::IsInitialized() const {

  return true;
}

void AsPathLength::Swap(AsPathLength* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AsPathLength::InternalSwap(AsPathLength* other) {
  std::swap(type_, other->type_);
  std::swap(length_, other->length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AsPathLength::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AsPathLength_descriptor_;
  metadata.reflection = AsPathLength_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AsPathLength

// optional .gobgpapi.AsPathLengthType type = 1;
void AsPathLength::clear_type() {
  type_ = 0;
}
 ::gobgpapi::AsPathLengthType AsPathLength::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPathLength.type)
  return static_cast< ::gobgpapi::AsPathLengthType >(type_);
}
 void AsPathLength::set_type(::gobgpapi::AsPathLengthType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AsPathLength.type)
}

// optional uint32 length = 2;
void AsPathLength::clear_length() {
  length_ = 0u;
}
 ::google::protobuf::uint32 AsPathLength::length() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPathLength.length)
  return length_;
}
 void AsPathLength::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AsPathLength.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Conditions::kPrefixSetFieldNumber;
const int Conditions::kNeighborSetFieldNumber;
const int Conditions::kAsPathLengthFieldNumber;
const int Conditions::kAsPathSetFieldNumber;
const int Conditions::kCommunitySetFieldNumber;
const int Conditions::kExtCommunitySetFieldNumber;
const int Conditions::kRpkiResultFieldNumber;
#endif  // !_MSC_VER

Conditions::Conditions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Conditions)
}

void Conditions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  prefix_set_ = const_cast< ::gobgpapi::MatchSet*>(&::gobgpapi::MatchSet::default_instance());
  neighbor_set_ = const_cast< ::gobgpapi::MatchSet*>(&::gobgpapi::MatchSet::default_instance());
  as_path_length_ = const_cast< ::gobgpapi::AsPathLength*>(&::gobgpapi::AsPathLength::default_instance());
  as_path_set_ = const_cast< ::gobgpapi::MatchSet*>(&::gobgpapi::MatchSet::default_instance());
  community_set_ = const_cast< ::gobgpapi::MatchSet*>(&::gobgpapi::MatchSet::default_instance());
  ext_community_set_ = const_cast< ::gobgpapi::MatchSet*>(&::gobgpapi::MatchSet::default_instance());
}

Conditions::Conditions(const Conditions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Conditions)
}

void Conditions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  prefix_set_ = NULL;
  neighbor_set_ = NULL;
  as_path_length_ = NULL;
  as_path_set_ = NULL;
  community_set_ = NULL;
  ext_community_set_ = NULL;
  rpki_result_ = 0;
}

Conditions::~Conditions() {
  // @@protoc_insertion_point(destructor:gobgpapi.Conditions)
  SharedDtor();
}

void Conditions::SharedDtor() {
  if (this != default_instance_) {
    delete prefix_set_;
    delete neighbor_set_;
    delete as_path_length_;
    delete as_path_set_;
    delete community_set_;
    delete ext_community_set_;
  }
}

void Conditions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Conditions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Conditions_descriptor_;
}

const Conditions& Conditions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

Conditions* Conditions::default_instance_ = NULL;

Conditions* Conditions::New(::google::protobuf::Arena* arena) const {
  Conditions* n = new Conditions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Conditions::Clear() {
  if (GetArenaNoVirtual() == NULL && prefix_set_ != NULL) delete prefix_set_;
  prefix_set_ = NULL;
  if (GetArenaNoVirtual() == NULL && neighbor_set_ != NULL) delete neighbor_set_;
  neighbor_set_ = NULL;
  if (GetArenaNoVirtual() == NULL && as_path_length_ != NULL) delete as_path_length_;
  as_path_length_ = NULL;
  if (GetArenaNoVirtual() == NULL && as_path_set_ != NULL) delete as_path_set_;
  as_path_set_ = NULL;
  if (GetArenaNoVirtual() == NULL && community_set_ != NULL) delete community_set_;
  community_set_ = NULL;
  if (GetArenaNoVirtual() == NULL && ext_community_set_ != NULL) delete ext_community_set_;
  ext_community_set_ = NULL;
  rpki_result_ = 0;
}

bool Conditions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Conditions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.MatchSet prefix_set = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prefix_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_neighbor_set;
        break;
      }

      // optional .gobgpapi.MatchSet neighbor_set = 2;
      case 2: {
        if (tag == 18) {
         parse_neighbor_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_neighbor_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_as_path_length;
        break;
      }

      // optional .gobgpapi.AsPathLength as_path_length = 3;
      case 3: {
        if (tag == 26) {
         parse_as_path_length:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_as_path_length()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_as_path_set;
        break;
      }

      // optional .gobgpapi.MatchSet as_path_set = 4;
      case 4: {
        if (tag == 34) {
         parse_as_path_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_as_path_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_community_set;
        break;
      }

      // optional .gobgpapi.MatchSet community_set = 5;
      case 5: {
        if (tag == 42) {
         parse_community_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_community_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ext_community_set;
        break;
      }

      // optional .gobgpapi.MatchSet ext_community_set = 6;
      case 6: {
        if (tag == 50) {
         parse_ext_community_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext_community_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rpki_result;
        break;
      }

      // optional int32 rpki_result = 7;
      case 7: {
        if (tag == 56) {
         parse_rpki_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpki_result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Conditions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Conditions)
  return false;
#undef DO_
}

void Conditions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Conditions)
  // optional .gobgpapi.MatchSet prefix_set = 1;
  if (this->has_prefix_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->prefix_set_, output);
  }

  // optional .gobgpapi.MatchSet neighbor_set = 2;
  if (this->has_neighbor_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->neighbor_set_, output);
  }

  // optional .gobgpapi.AsPathLength as_path_length = 3;
  if (this->has_as_path_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->as_path_length_, output);
  }

  // optional .gobgpapi.MatchSet as_path_set = 4;
  if (this->has_as_path_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->as_path_set_, output);
  }

  // optional .gobgpapi.MatchSet community_set = 5;
  if (this->has_community_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->community_set_, output);
  }

  // optional .gobgpapi.MatchSet ext_community_set = 6;
  if (this->has_ext_community_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ext_community_set_, output);
  }

  // optional int32 rpki_result = 7;
  if (this->rpki_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rpki_result(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.Conditions)
}

::google::protobuf::uint8* Conditions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Conditions)
  // optional .gobgpapi.MatchSet prefix_set = 1;
  if (this->has_prefix_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->prefix_set_, target);
  }

  // optional .gobgpapi.MatchSet neighbor_set = 2;
  if (this->has_neighbor_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->neighbor_set_, target);
  }

  // optional .gobgpapi.AsPathLength as_path_length = 3;
  if (this->has_as_path_length()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->as_path_length_, target);
  }

  // optional .gobgpapi.MatchSet as_path_set = 4;
  if (this->has_as_path_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->as_path_set_, target);
  }

  // optional .gobgpapi.MatchSet community_set = 5;
  if (this->has_community_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->community_set_, target);
  }

  // optional .gobgpapi.MatchSet ext_community_set = 6;
  if (this->has_ext_community_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->ext_community_set_, target);
  }

  // optional int32 rpki_result = 7;
  if (this->rpki_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rpki_result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Conditions)
  return target;
}

int Conditions::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.MatchSet prefix_set = 1;
  if (this->has_prefix_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->prefix_set_);
  }

  // optional .gobgpapi.MatchSet neighbor_set = 2;
  if (this->has_neighbor_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->neighbor_set_);
  }

  // optional .gobgpapi.AsPathLength as_path_length = 3;
  if (this->has_as_path_length()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->as_path_length_);
  }

  // optional .gobgpapi.MatchSet as_path_set = 4;
  if (this->has_as_path_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->as_path_set_);
  }

  // optional .gobgpapi.MatchSet community_set = 5;
  if (this->has_community_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->community_set_);
  }

  // optional .gobgpapi.MatchSet ext_community_set = 6;
  if (this->has_ext_community_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ext_community_set_);
  }

  // optional int32 rpki_result = 7;
  if (this->rpki_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rpki_result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Conditions::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Conditions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Conditions>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Conditions::MergeFrom(const Conditions& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_prefix_set()) {
    mutable_prefix_set()->::gobgpapi::MatchSet::MergeFrom(from.prefix_set());
  }
  if (from.has_neighbor_set()) {
    mutable_neighbor_set()->::gobgpapi::MatchSet::MergeFrom(from.neighbor_set());
  }
  if (from.has_as_path_length()) {
    mutable_as_path_length()->::gobgpapi::AsPathLength::MergeFrom(from.as_path_length());
  }
  if (from.has_as_path_set()) {
    mutable_as_path_set()->::gobgpapi::MatchSet::MergeFrom(from.as_path_set());
  }
  if (from.has_community_set()) {
    mutable_community_set()->::gobgpapi::MatchSet::MergeFrom(from.community_set());
  }
  if (from.has_ext_community_set()) {
    mutable_ext_community_set()->::gobgpapi::MatchSet::MergeFrom(from.ext_community_set());
  }
  if (from.rpki_result() != 0) {
    set_rpki_result(from.rpki_result());
  }
}

void Conditions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conditions::CopyFrom(const Conditions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conditions::IsInitialized() const {

  return true;
}

void Conditions::Swap(Conditions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Conditions::InternalSwap(Conditions* other) {
  std::swap(prefix_set_, other->prefix_set_);
  std::swap(neighbor_set_, other->neighbor_set_);
  std::swap(as_path_length_, other->as_path_length_);
  std::swap(as_path_set_, other->as_path_set_);
  std::swap(community_set_, other->community_set_);
  std::swap(ext_community_set_, other->ext_community_set_);
  std::swap(rpki_result_, other->rpki_result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Conditions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Conditions_descriptor_;
  metadata.reflection = Conditions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Conditions

// optional .gobgpapi.MatchSet prefix_set = 1;
bool Conditions::has_prefix_set() const {
  return !_is_default_instance_ && prefix_set_ != NULL;
}
void Conditions::clear_prefix_set() {
  if (GetArenaNoVirtual() == NULL && prefix_set_ != NULL) delete prefix_set_;
  prefix_set_ = NULL;
}
const ::gobgpapi::MatchSet& Conditions::prefix_set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.prefix_set)
  return prefix_set_ != NULL ? *prefix_set_ : *default_instance_->prefix_set_;
}
::gobgpapi::MatchSet* Conditions::mutable_prefix_set() {
  
  if (prefix_set_ == NULL) {
    prefix_set_ = new ::gobgpapi::MatchSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.prefix_set)
  return prefix_set_;
}
::gobgpapi::MatchSet* Conditions::release_prefix_set() {
  
  ::gobgpapi::MatchSet* temp = prefix_set_;
  prefix_set_ = NULL;
  return temp;
}
void Conditions::set_allocated_prefix_set(::gobgpapi::MatchSet* prefix_set) {
  delete prefix_set_;
  prefix_set_ = prefix_set;
  if (prefix_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.prefix_set)
}

// optional .gobgpapi.MatchSet neighbor_set = 2;
bool Conditions::has_neighbor_set() const {
  return !_is_default_instance_ && neighbor_set_ != NULL;
}
void Conditions::clear_neighbor_set() {
  if (GetArenaNoVirtual() == NULL && neighbor_set_ != NULL) delete neighbor_set_;
  neighbor_set_ = NULL;
}
const ::gobgpapi::MatchSet& Conditions::neighbor_set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.neighbor_set)
  return neighbor_set_ != NULL ? *neighbor_set_ : *default_instance_->neighbor_set_;
}
::gobgpapi::MatchSet* Conditions::mutable_neighbor_set() {
  
  if (neighbor_set_ == NULL) {
    neighbor_set_ = new ::gobgpapi::MatchSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.neighbor_set)
  return neighbor_set_;
}
::gobgpapi::MatchSet* Conditions::release_neighbor_set() {
  
  ::gobgpapi::MatchSet* temp = neighbor_set_;
  neighbor_set_ = NULL;
  return temp;
}
void Conditions::set_allocated_neighbor_set(::gobgpapi::MatchSet* neighbor_set) {
  delete neighbor_set_;
  neighbor_set_ = neighbor_set;
  if (neighbor_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.neighbor_set)
}

// optional .gobgpapi.AsPathLength as_path_length = 3;
bool Conditions::has_as_path_length() const {
  return !_is_default_instance_ && as_path_length_ != NULL;
}
void Conditions::clear_as_path_length() {
  if (GetArenaNoVirtual() == NULL && as_path_length_ != NULL) delete as_path_length_;
  as_path_length_ = NULL;
}
const ::gobgpapi::AsPathLength& Conditions::as_path_length() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.as_path_length)
  return as_path_length_ != NULL ? *as_path_length_ : *default_instance_->as_path_length_;
}
::gobgpapi::AsPathLength* Conditions::mutable_as_path_length() {
  
  if (as_path_length_ == NULL) {
    as_path_length_ = new ::gobgpapi::AsPathLength;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.as_path_length)
  return as_path_length_;
}
::gobgpapi::AsPathLength* Conditions::release_as_path_length() {
  
  ::gobgpapi::AsPathLength* temp = as_path_length_;
  as_path_length_ = NULL;
  return temp;
}
void Conditions::set_allocated_as_path_length(::gobgpapi::AsPathLength* as_path_length) {
  delete as_path_length_;
  as_path_length_ = as_path_length;
  if (as_path_length) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.as_path_length)
}

// optional .gobgpapi.MatchSet as_path_set = 4;
bool Conditions::has_as_path_set() const {
  return !_is_default_instance_ && as_path_set_ != NULL;
}
void Conditions::clear_as_path_set() {
  if (GetArenaNoVirtual() == NULL && as_path_set_ != NULL) delete as_path_set_;
  as_path_set_ = NULL;
}
const ::gobgpapi::MatchSet& Conditions::as_path_set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.as_path_set)
  return as_path_set_ != NULL ? *as_path_set_ : *default_instance_->as_path_set_;
}
::gobgpapi::MatchSet* Conditions::mutable_as_path_set() {
  
  if (as_path_set_ == NULL) {
    as_path_set_ = new ::gobgpapi::MatchSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.as_path_set)
  return as_path_set_;
}
::gobgpapi::MatchSet* Conditions::release_as_path_set() {
  
  ::gobgpapi::MatchSet* temp = as_path_set_;
  as_path_set_ = NULL;
  return temp;
}
void Conditions::set_allocated_as_path_set(::gobgpapi::MatchSet* as_path_set) {
  delete as_path_set_;
  as_path_set_ = as_path_set;
  if (as_path_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.as_path_set)
}

// optional .gobgpapi.MatchSet community_set = 5;
bool Conditions::has_community_set() const {
  return !_is_default_instance_ && community_set_ != NULL;
}
void Conditions::clear_community_set() {
  if (GetArenaNoVirtual() == NULL && community_set_ != NULL) delete community_set_;
  community_set_ = NULL;
}
const ::gobgpapi::MatchSet& Conditions::community_set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.community_set)
  return community_set_ != NULL ? *community_set_ : *default_instance_->community_set_;
}
::gobgpapi::MatchSet* Conditions::mutable_community_set() {
  
  if (community_set_ == NULL) {
    community_set_ = new ::gobgpapi::MatchSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.community_set)
  return community_set_;
}
::gobgpapi::MatchSet* Conditions::release_community_set() {
  
  ::gobgpapi::MatchSet* temp = community_set_;
  community_set_ = NULL;
  return temp;
}
void Conditions::set_allocated_community_set(::gobgpapi::MatchSet* community_set) {
  delete community_set_;
  community_set_ = community_set;
  if (community_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.community_set)
}

// optional .gobgpapi.MatchSet ext_community_set = 6;
bool Conditions::has_ext_community_set() const {
  return !_is_default_instance_ && ext_community_set_ != NULL;
}
void Conditions::clear_ext_community_set() {
  if (GetArenaNoVirtual() == NULL && ext_community_set_ != NULL) delete ext_community_set_;
  ext_community_set_ = NULL;
}
const ::gobgpapi::MatchSet& Conditions::ext_community_set() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.ext_community_set)
  return ext_community_set_ != NULL ? *ext_community_set_ : *default_instance_->ext_community_set_;
}
::gobgpapi::MatchSet* Conditions::mutable_ext_community_set() {
  
  if (ext_community_set_ == NULL) {
    ext_community_set_ = new ::gobgpapi::MatchSet;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Conditions.ext_community_set)
  return ext_community_set_;
}
::gobgpapi::MatchSet* Conditions::release_ext_community_set() {
  
  ::gobgpapi::MatchSet* temp = ext_community_set_;
  ext_community_set_ = NULL;
  return temp;
}
void Conditions::set_allocated_ext_community_set(::gobgpapi::MatchSet* ext_community_set) {
  delete ext_community_set_;
  ext_community_set_ = ext_community_set;
  if (ext_community_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Conditions.ext_community_set)
}

// optional int32 rpki_result = 7;
void Conditions::clear_rpki_result() {
  rpki_result_ = 0;
}
 ::google::protobuf::int32 Conditions::rpki_result() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Conditions.rpki_result)
  return rpki_result_;
}
 void Conditions::set_rpki_result(::google::protobuf::int32 value) {
  
  rpki_result_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Conditions.rpki_result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CommunityAction::kTypeFieldNumber;
const int CommunityAction::kCommunitiesFieldNumber;
#endif  // !_MSC_VER

CommunityAction::CommunityAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.CommunityAction)
}

void CommunityAction::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CommunityAction::CommunityAction(const CommunityAction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.CommunityAction)
}

void CommunityAction::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
}

CommunityAction::~CommunityAction() {
  // @@protoc_insertion_point(destructor:gobgpapi.CommunityAction)
  SharedDtor();
}

void CommunityAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommunityAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommunityAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommunityAction_descriptor_;
}

const CommunityAction& CommunityAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

CommunityAction* CommunityAction::default_instance_ = NULL;

CommunityAction* CommunityAction::New(::google::protobuf::Arena* arena) const {
  CommunityAction* n = new CommunityAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommunityAction::Clear() {
  type_ = 0;
  communities_.Clear();
}

bool CommunityAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.CommunityAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.CommunityActionType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gobgpapi::CommunityActionType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_communities;
        break;
      }

      // repeated string communities = 2;
      case 2: {
        if (tag == 18) {
         parse_communities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_communities()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->communities(this->communities_size() - 1).data(),
            this->communities(this->communities_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.CommunityAction.communities"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_communities;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.CommunityAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.CommunityAction)
  return false;
#undef DO_
}

void CommunityAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.CommunityAction)
  // optional .gobgpapi.CommunityActionType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated string communities = 2;
  for (int i = 0; i < this->communities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->communities(i).data(), this->communities(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.CommunityAction.communities");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->communities(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.CommunityAction)
}

::google::protobuf::uint8* CommunityAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.CommunityAction)
  // optional .gobgpapi.CommunityActionType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated string communities = 2;
  for (int i = 0; i < this->communities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->communities(i).data(), this->communities(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.CommunityAction.communities");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->communities(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.CommunityAction)
  return target;
}

int CommunityAction::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.CommunityActionType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // repeated string communities = 2;
  total_size += 1 * this->communities_size();
  for (int i = 0; i < this->communities_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->communities(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommunityAction::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CommunityAction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommunityAction>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommunityAction::MergeFrom(const CommunityAction& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  communities_.MergeFrom(from.communities_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void CommunityAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommunityAction::CopyFrom(const CommunityAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunityAction::IsInitialized() const {

  return true;
}

void CommunityAction::Swap(CommunityAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommunityAction::InternalSwap(CommunityAction* other) {
  std::swap(type_, other->type_);
  communities_.UnsafeArenaSwap(&other->communities_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommunityAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommunityAction_descriptor_;
  metadata.reflection = CommunityAction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommunityAction

// optional .gobgpapi.CommunityActionType type = 1;
void CommunityAction::clear_type() {
  type_ = 0;
}
 ::gobgpapi::CommunityActionType CommunityAction::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.CommunityAction.type)
  return static_cast< ::gobgpapi::CommunityActionType >(type_);
}
 void CommunityAction::set_type(::gobgpapi::CommunityActionType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.CommunityAction.type)
}

// repeated string communities = 2;
int CommunityAction::communities_size() const {
  return communities_.size();
}
void CommunityAction::clear_communities() {
  communities_.Clear();
}
 const ::std::string& CommunityAction::communities(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.CommunityAction.communities)
  return communities_.Get(index);
}
 ::std::string* CommunityAction::mutable_communities(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.CommunityAction.communities)
  return communities_.Mutable(index);
}
 void CommunityAction::set_communities(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.CommunityAction.communities)
  communities_.Mutable(index)->assign(value);
}
 void CommunityAction::set_communities(int index, const char* value) {
  communities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.CommunityAction.communities)
}
 void CommunityAction::set_communities(int index, const char* value, size_t size) {
  communities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.CommunityAction.communities)
}
 ::std::string* CommunityAction::add_communities() {
  return communities_.Add();
}
 void CommunityAction::add_communities(const ::std::string& value) {
  communities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.CommunityAction.communities)
}
 void CommunityAction::add_communities(const char* value) {
  communities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.CommunityAction.communities)
}
 void CommunityAction::add_communities(const char* value, size_t size) {
  communities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.CommunityAction.communities)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommunityAction::communities() const {
  // @@protoc_insertion_point(field_list:gobgpapi.CommunityAction.communities)
  return communities_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CommunityAction::mutable_communities() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.CommunityAction.communities)
  return &communities_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MedAction::kTypeFieldNumber;
const int MedAction::kValueFieldNumber;
#endif  // !_MSC_VER

MedAction::MedAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MedAction)
}

void MedAction::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MedAction::MedAction(const MedAction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MedAction)
}

void MedAction::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  value_ = GOOGLE_LONGLONG(0);
}

MedAction::~MedAction() {
  // @@protoc_insertion_point(destructor:gobgpapi.MedAction)
  SharedDtor();
}

void MedAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MedAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MedAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MedAction_descriptor_;
}

const MedAction& MedAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

MedAction* MedAction::default_instance_ = NULL;

MedAction* MedAction::New(::google::protobuf::Arena* arena) const {
  MedAction* n = new MedAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MedAction::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MedAction*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(value_, type_);

#undef ZR_HELPER_
#undef ZR_

}

bool MedAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.MedAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.MedActionType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gobgpapi::MedActionType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.MedAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.MedAction)
  return false;
#undef DO_
}

void MedAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.MedAction)
  // optional .gobgpapi.MedActionType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.MedAction)
}

::google::protobuf::uint8* MedAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MedAction)
  // optional .gobgpapi.MedActionType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int64 value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MedAction)
  return target;
}

int MedAction::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.MedActionType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional int64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MedAction::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MedAction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MedAction>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MedAction::MergeFrom(const MedAction& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void MedAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedAction::CopyFrom(const MedAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedAction::IsInitialized() const {

  return true;
}

void MedAction::Swap(MedAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MedAction::InternalSwap(MedAction* other) {
  std::swap(type_, other->type_);
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MedAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MedAction_descriptor_;
  metadata.reflection = MedAction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MedAction

// optional .gobgpapi.MedActionType type = 1;
void MedAction::clear_type() {
  type_ = 0;
}
 ::gobgpapi::MedActionType MedAction::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MedAction.type)
  return static_cast< ::gobgpapi::MedActionType >(type_);
}
 void MedAction::set_type(::gobgpapi::MedActionType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MedAction.type)
}

// optional int64 value = 2;
void MedAction::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MedAction::value() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MedAction.value)
  return value_;
}
 void MedAction::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.MedAction.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AsPrependAction::kAsnFieldNumber;
const int AsPrependAction::kRepeatFieldNumber;
const int AsPrependAction::kUseLeftMostFieldNumber;
#endif  // !_MSC_VER

AsPrependAction::AsPrependAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.AsPrependAction)
}

void AsPrependAction::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AsPrependAction::AsPrependAction(const AsPrependAction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.AsPrependAction)
}

void AsPrependAction::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  asn_ = 0u;
  repeat_ = 0u;
  use_left_most_ = false;
}

AsPrependAction::~AsPrependAction() {
  // @@protoc_insertion_point(destructor:gobgpapi.AsPrependAction)
  SharedDtor();
}

void AsPrependAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AsPrependAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AsPrependAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AsPrependAction_descriptor_;
}

const AsPrependAction& AsPrependAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

AsPrependAction* AsPrependAction::default_instance_ = NULL;

AsPrependAction* AsPrependAction::New(::google::protobuf::Arena* arena) const {
  AsPrependAction* n = new AsPrependAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AsPrependAction::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AsPrependAction*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(asn_, use_left_most_);

#undef ZR_HELPER_
#undef ZR_

}

bool AsPrependAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.AsPrependAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 asn = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &asn_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_repeat;
        break;
      }

      // optional uint32 repeat = 2;
      case 2: {
        if (tag == 16) {
         parse_repeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeat_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_use_left_most;
        break;
      }

      // optional bool use_left_most = 3;
      case 3: {
        if (tag == 24) {
         parse_use_left_most:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_left_most_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.AsPrependAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.AsPrependAction)
  return false;
#undef DO_
}

void AsPrependAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.AsPrependAction)
  // optional uint32 asn = 1;
  if (this->asn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->asn(), output);
  }

  // optional uint32 repeat = 2;
  if (this->repeat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->repeat(), output);
  }

  // optional bool use_left_most = 3;
  if (this->use_left_most() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_left_most(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.AsPrependAction)
}

::google::protobuf::uint8* AsPrependAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.AsPrependAction)
  // optional uint32 asn = 1;
  if (this->asn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->asn(), target);
  }

  // optional uint32 repeat = 2;
  if (this->repeat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->repeat(), target);
  }

  // optional bool use_left_most = 3;
  if (this->use_left_most() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_left_most(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.AsPrependAction)
  return target;
}

int AsPrependAction::ByteSize() const {
  int total_size = 0;

  // optional uint32 asn = 1;
  if (this->asn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->asn());
  }

  // optional uint32 repeat = 2;
  if (this->repeat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->repeat());
  }

  // optional bool use_left_most = 3;
  if (this->use_left_most() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AsPrependAction::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AsPrependAction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AsPrependAction>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AsPrependAction::MergeFrom(const AsPrependAction& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.asn() != 0) {
    set_asn(from.asn());
  }
  if (from.repeat() != 0) {
    set_repeat(from.repeat());
  }
  if (from.use_left_most() != 0) {
    set_use_left_most(from.use_left_most());
  }
}

void AsPrependAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsPrependAction::CopyFrom(const AsPrependAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsPrependAction::IsInitialized() const {

  return true;
}

void AsPrependAction::Swap(AsPrependAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AsPrependAction::InternalSwap(AsPrependAction* other) {
  std::swap(asn_, other->asn_);
  std::swap(repeat_, other->repeat_);
  std::swap(use_left_most_, other->use_left_most_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AsPrependAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AsPrependAction_descriptor_;
  metadata.reflection = AsPrependAction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AsPrependAction

// optional uint32 asn = 1;
void AsPrependAction::clear_asn() {
  asn_ = 0u;
}
 ::google::protobuf::uint32 AsPrependAction::asn() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPrependAction.asn)
  return asn_;
}
 void AsPrependAction::set_asn(::google::protobuf::uint32 value) {
  
  asn_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AsPrependAction.asn)
}

// optional uint32 repeat = 2;
void AsPrependAction::clear_repeat() {
  repeat_ = 0u;
}
 ::google::protobuf::uint32 AsPrependAction::repeat() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPrependAction.repeat)
  return repeat_;
}
 void AsPrependAction::set_repeat(::google::protobuf::uint32 value) {
  
  repeat_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AsPrependAction.repeat)
}

// optional bool use_left_most = 3;
void AsPrependAction::clear_use_left_most() {
  use_left_most_ = false;
}
 bool AsPrependAction::use_left_most() const {
  // @@protoc_insertion_point(field_get:gobgpapi.AsPrependAction.use_left_most)
  return use_left_most_;
}
 void AsPrependAction::set_use_left_most(bool value) {
  
  use_left_most_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.AsPrependAction.use_left_most)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Actions::kRouteActionFieldNumber;
const int Actions::kCommunityFieldNumber;
const int Actions::kMedFieldNumber;
const int Actions::kAsPrependFieldNumber;
const int Actions::kExtCommunityFieldNumber;
#endif  // !_MSC_VER

Actions::Actions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Actions)
}

void Actions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  community_ = const_cast< ::gobgpapi::CommunityAction*>(&::gobgpapi::CommunityAction::default_instance());
  med_ = const_cast< ::gobgpapi::MedAction*>(&::gobgpapi::MedAction::default_instance());
  as_prepend_ = const_cast< ::gobgpapi::AsPrependAction*>(&::gobgpapi::AsPrependAction::default_instance());
  ext_community_ = const_cast< ::gobgpapi::CommunityAction*>(&::gobgpapi::CommunityAction::default_instance());
}

Actions::Actions(const Actions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Actions)
}

void Actions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  route_action_ = 0;
  community_ = NULL;
  med_ = NULL;
  as_prepend_ = NULL;
  ext_community_ = NULL;
}

Actions::~Actions() {
  // @@protoc_insertion_point(destructor:gobgpapi.Actions)
  SharedDtor();
}

void Actions::SharedDtor() {
  if (this != default_instance_) {
    delete community_;
    delete med_;
    delete as_prepend_;
    delete ext_community_;
  }
}

void Actions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Actions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Actions_descriptor_;
}

const Actions& Actions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

Actions* Actions::default_instance_ = NULL;

Actions* Actions::New(::google::protobuf::Arena* arena) const {
  Actions* n = new Actions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Actions::Clear() {
  route_action_ = 0;
  if (GetArenaNoVirtual() == NULL && community_ != NULL) delete community_;
  community_ = NULL;
  if (GetArenaNoVirtual() == NULL && med_ != NULL) delete med_;
  med_ = NULL;
  if (GetArenaNoVirtual() == NULL && as_prepend_ != NULL) delete as_prepend_;
  as_prepend_ = NULL;
  if (GetArenaNoVirtual() == NULL && ext_community_ != NULL) delete ext_community_;
  ext_community_ = NULL;
}

bool Actions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Actions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.RouteAction route_action = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_route_action(static_cast< ::gobgpapi::RouteAction >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_community;
        break;
      }

      // optional .gobgpapi.CommunityAction community = 2;
      case 2: {
        if (tag == 18) {
         parse_community:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_community()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_med;
        break;
      }

      // optional .gobgpapi.MedAction med = 3;
      case 3: {
        if (tag == 26) {
         parse_med:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_med()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_as_prepend;
        break;
      }

      // optional .gobgpapi.AsPrependAction as_prepend = 4;
      case 4: {
        if (tag == 34) {
         parse_as_prepend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_as_prepend()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ext_community;
        break;
      }

      // optional .gobgpapi.CommunityAction ext_community = 5;
      case 5: {
        if (tag == 42) {
         parse_ext_community:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext_community()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Actions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Actions)
  return false;
#undef DO_
}

void Actions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Actions)
  // optional .gobgpapi.RouteAction route_action = 1;
  if (this->route_action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->route_action(), output);
  }

  // optional .gobgpapi.CommunityAction community = 2;
  if (this->has_community()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->community_, output);
  }

  // optional .gobgpapi.MedAction med = 3;
  if (this->has_med()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->med_, output);
  }

  // optional .gobgpapi.AsPrependAction as_prepend = 4;
  if (this->has_as_prepend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->as_prepend_, output);
  }

  // optional .gobgpapi.CommunityAction ext_community = 5;
  if (this->has_ext_community()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->ext_community_, output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.Actions)
}

::google::protobuf::uint8* Actions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Actions)
  // optional .gobgpapi.RouteAction route_action = 1;
  if (this->route_action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->route_action(), target);
  }

  // optional .gobgpapi.CommunityAction community = 2;
  if (this->has_community()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->community_, target);
  }

  // optional .gobgpapi.MedAction med = 3;
  if (this->has_med()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->med_, target);
  }

  // optional .gobgpapi.AsPrependAction as_prepend = 4;
  if (this->has_as_prepend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->as_prepend_, target);
  }

  // optional .gobgpapi.CommunityAction ext_community = 5;
  if (this->has_ext_community()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->ext_community_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Actions)
  return target;
}

int Actions::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.RouteAction route_action = 1;
  if (this->route_action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->route_action());
  }

  // optional .gobgpapi.CommunityAction community = 2;
  if (this->has_community()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->community_);
  }

  // optional .gobgpapi.MedAction med = 3;
  if (this->has_med()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->med_);
  }

  // optional .gobgpapi.AsPrependAction as_prepend = 4;
  if (this->has_as_prepend()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->as_prepend_);
  }

  // optional .gobgpapi.CommunityAction ext_community = 5;
  if (this->has_ext_community()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ext_community_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Actions::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Actions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Actions>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Actions::MergeFrom(const Actions& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.route_action() != 0) {
    set_route_action(from.route_action());
  }
  if (from.has_community()) {
    mutable_community()->::gobgpapi::CommunityAction::MergeFrom(from.community());
  }
  if (from.has_med()) {
    mutable_med()->::gobgpapi::MedAction::MergeFrom(from.med());
  }
  if (from.has_as_prepend()) {
    mutable_as_prepend()->::gobgpapi::AsPrependAction::MergeFrom(from.as_prepend());
  }
  if (from.has_ext_community()) {
    mutable_ext_community()->::gobgpapi::CommunityAction::MergeFrom(from.ext_community());
  }
}

void Actions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Actions::CopyFrom(const Actions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Actions::IsInitialized() const {

  return true;
}

void Actions::Swap(Actions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Actions::InternalSwap(Actions* other) {
  std::swap(route_action_, other->route_action_);
  std::swap(community_, other->community_);
  std::swap(med_, other->med_);
  std::swap(as_prepend_, other->as_prepend_);
  std::swap(ext_community_, other->ext_community_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Actions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Actions_descriptor_;
  metadata.reflection = Actions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Actions

// optional .gobgpapi.RouteAction route_action = 1;
void Actions::clear_route_action() {
  route_action_ = 0;
}
 ::gobgpapi::RouteAction Actions::route_action() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.route_action)
  return static_cast< ::gobgpapi::RouteAction >(route_action_);
}
 void Actions::set_route_action(::gobgpapi::RouteAction value) {
  
  route_action_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Actions.route_action)
}

// optional .gobgpapi.CommunityAction community = 2;
bool Actions::has_community() const {
  return !_is_default_instance_ && community_ != NULL;
}
void Actions::clear_community() {
  if (GetArenaNoVirtual() == NULL && community_ != NULL) delete community_;
  community_ = NULL;
}
const ::gobgpapi::CommunityAction& Actions::community() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.community)
  return community_ != NULL ? *community_ : *default_instance_->community_;
}
::gobgpapi::CommunityAction* Actions::mutable_community() {
  
  if (community_ == NULL) {
    community_ = new ::gobgpapi::CommunityAction;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.community)
  return community_;
}
::gobgpapi::CommunityAction* Actions::release_community() {
  
  ::gobgpapi::CommunityAction* temp = community_;
  community_ = NULL;
  return temp;
}
void Actions::set_allocated_community(::gobgpapi::CommunityAction* community) {
  delete community_;
  community_ = community;
  if (community) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.community)
}

// optional .gobgpapi.MedAction med = 3;
bool Actions::has_med() const {
  return !_is_default_instance_ && med_ != NULL;
}
void Actions::clear_med() {
  if (GetArenaNoVirtual() == NULL && med_ != NULL) delete med_;
  med_ = NULL;
}
const ::gobgpapi::MedAction& Actions::med() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.med)
  return med_ != NULL ? *med_ : *default_instance_->med_;
}
::gobgpapi::MedAction* Actions::mutable_med() {
  
  if (med_ == NULL) {
    med_ = new ::gobgpapi::MedAction;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.med)
  return med_;
}
::gobgpapi::MedAction* Actions::release_med() {
  
  ::gobgpapi::MedAction* temp = med_;
  med_ = NULL;
  return temp;
}
void Actions::set_allocated_med(::gobgpapi::MedAction* med) {
  delete med_;
  med_ = med;
  if (med) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.med)
}

// optional .gobgpapi.AsPrependAction as_prepend = 4;
bool Actions::has_as_prepend() const {
  return !_is_default_instance_ && as_prepend_ != NULL;
}
void Actions::clear_as_prepend() {
  if (GetArenaNoVirtual() == NULL && as_prepend_ != NULL) delete as_prepend_;
  as_prepend_ = NULL;
}
const ::gobgpapi::AsPrependAction& Actions::as_prepend() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.as_prepend)
  return as_prepend_ != NULL ? *as_prepend_ : *default_instance_->as_prepend_;
}
::gobgpapi::AsPrependAction* Actions::mutable_as_prepend() {
  
  if (as_prepend_ == NULL) {
    as_prepend_ = new ::gobgpapi::AsPrependAction;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.as_prepend)
  return as_prepend_;
}
::gobgpapi::AsPrependAction* Actions::release_as_prepend() {
  
  ::gobgpapi::AsPrependAction* temp = as_prepend_;
  as_prepend_ = NULL;
  return temp;
}
void Actions::set_allocated_as_prepend(::gobgpapi::AsPrependAction* as_prepend) {
  delete as_prepend_;
  as_prepend_ = as_prepend;
  if (as_prepend) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.as_prepend)
}

// optional .gobgpapi.CommunityAction ext_community = 5;
bool Actions::has_ext_community() const {
  return !_is_default_instance_ && ext_community_ != NULL;
}
void Actions::clear_ext_community() {
  if (GetArenaNoVirtual() == NULL && ext_community_ != NULL) delete ext_community_;
  ext_community_ = NULL;
}
const ::gobgpapi::CommunityAction& Actions::ext_community() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Actions.ext_community)
  return ext_community_ != NULL ? *ext_community_ : *default_instance_->ext_community_;
}
::gobgpapi::CommunityAction* Actions::mutable_ext_community() {
  
  if (ext_community_ == NULL) {
    ext_community_ = new ::gobgpapi::CommunityAction;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Actions.ext_community)
  return ext_community_;
}
::gobgpapi::CommunityAction* Actions::release_ext_community() {
  
  ::gobgpapi::CommunityAction* temp = ext_community_;
  ext_community_ = NULL;
  return temp;
}
void Actions::set_allocated_ext_community(::gobgpapi::CommunityAction* ext_community) {
  delete ext_community_;
  ext_community_ = ext_community;
  if (ext_community) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Actions.ext_community)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Statement::kNameFieldNumber;
const int Statement::kConditionsFieldNumber;
const int Statement::kActionsFieldNumber;
#endif  // !_MSC_VER

Statement::Statement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Statement)
}

void Statement::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  conditions_ = const_cast< ::gobgpapi::Conditions*>(&::gobgpapi::Conditions::default_instance());
  actions_ = const_cast< ::gobgpapi::Actions*>(&::gobgpapi::Actions::default_instance());
}

Statement::Statement(const Statement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Statement)
}

void Statement::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conditions_ = NULL;
  actions_ = NULL;
}

Statement::~Statement() {
  // @@protoc_insertion_point(destructor:gobgpapi.Statement)
  SharedDtor();
}

void Statement::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete conditions_;
    delete actions_;
  }
}

void Statement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Statement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Statement_descriptor_;
}

const Statement& Statement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

Statement* Statement::default_instance_ = NULL;

Statement* Statement::New(::google::protobuf::Arena* arena) const {
  Statement* n = new Statement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Statement::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && conditions_ != NULL) delete conditions_;
  conditions_ = NULL;
  if (GetArenaNoVirtual() == NULL && actions_ != NULL) delete actions_;
  actions_ = NULL;
}

bool Statement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Statement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Statement.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_conditions;
        break;
      }

      // optional .gobgpapi.Conditions conditions = 2;
      case 2: {
        if (tag == 18) {
         parse_conditions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conditions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_actions;
        break;
      }

      // optional .gobgpapi.Actions actions = 3;
      case 3: {
        if (tag == 26) {
         parse_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Statement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Statement)
  return false;
#undef DO_
}

void Statement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Statement)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Statement.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .gobgpapi.Conditions conditions = 2;
  if (this->has_conditions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->conditions_, output);
  }

  // optional .gobgpapi.Actions actions = 3;
  if (this->has_actions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->actions_, output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.Statement)
}

::google::protobuf::uint8* Statement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Statement)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Statement.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .gobgpapi.Conditions conditions = 2;
  if (this->has_conditions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->conditions_, target);
  }

  // optional .gobgpapi.Actions actions = 3;
  if (this->has_actions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->actions_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Statement)
  return target;
}

int Statement::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .gobgpapi.Conditions conditions = 2;
  if (this->has_conditions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->conditions_);
  }

  // optional .gobgpapi.Actions actions = 3;
  if (this->has_actions()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->actions_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Statement::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Statement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Statement>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Statement::MergeFrom(const Statement& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_conditions()) {
    mutable_conditions()->::gobgpapi::Conditions::MergeFrom(from.conditions());
  }
  if (from.has_actions()) {
    mutable_actions()->::gobgpapi::Actions::MergeFrom(from.actions());
  }
}

void Statement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Statement::CopyFrom(const Statement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statement::IsInitialized() const {

  return true;
}

void Statement::Swap(Statement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Statement::InternalSwap(Statement* other) {
  name_.Swap(&other->name_);
  std::swap(conditions_, other->conditions_);
  std::swap(actions_, other->actions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Statement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Statement_descriptor_;
  metadata.reflection = Statement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Statement

// optional string name = 1;
void Statement::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Statement::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Statement.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Statement::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Statement.name)
}
 void Statement::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Statement.name)
}
 void Statement::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Statement.name)
}
 ::std::string* Statement::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Statement.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Statement::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Statement::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Statement.name)
}

// optional .gobgpapi.Conditions conditions = 2;
bool Statement::has_conditions() const {
  return !_is_default_instance_ && conditions_ != NULL;
}
void Statement::clear_conditions() {
  if (GetArenaNoVirtual() == NULL && conditions_ != NULL) delete conditions_;
  conditions_ = NULL;
}
const ::gobgpapi::Conditions& Statement::conditions() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Statement.conditions)
  return conditions_ != NULL ? *conditions_ : *default_instance_->conditions_;
}
::gobgpapi::Conditions* Statement::mutable_conditions() {
  
  if (conditions_ == NULL) {
    conditions_ = new ::gobgpapi::Conditions;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Statement.conditions)
  return conditions_;
}
::gobgpapi::Conditions* Statement::release_conditions() {
  
  ::gobgpapi::Conditions* temp = conditions_;
  conditions_ = NULL;
  return temp;
}
void Statement::set_allocated_conditions(::gobgpapi::Conditions* conditions) {
  delete conditions_;
  conditions_ = conditions;
  if (conditions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Statement.conditions)
}

// optional .gobgpapi.Actions actions = 3;
bool Statement::has_actions() const {
  return !_is_default_instance_ && actions_ != NULL;
}
void Statement::clear_actions() {
  if (GetArenaNoVirtual() == NULL && actions_ != NULL) delete actions_;
  actions_ = NULL;
}
const ::gobgpapi::Actions& Statement::actions() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Statement.actions)
  return actions_ != NULL ? *actions_ : *default_instance_->actions_;
}
::gobgpapi::Actions* Statement::mutable_actions() {
  
  if (actions_ == NULL) {
    actions_ = new ::gobgpapi::Actions;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.Statement.actions)
  return actions_;
}
::gobgpapi::Actions* Statement::release_actions() {
  
  ::gobgpapi::Actions* temp = actions_;
  actions_ = NULL;
  return temp;
}
void Statement::set_allocated_actions(::gobgpapi::Actions* actions) {
  delete actions_;
  actions_ = actions;
  if (actions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Statement.actions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Policy::kNameFieldNumber;
const int Policy::kStatementsFieldNumber;
#endif  // !_MSC_VER

Policy::Policy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Policy)
}

void Policy::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Policy::Policy(const Policy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Policy)
}

void Policy::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Policy::~Policy() {
  // @@protoc_insertion_point(destructor:gobgpapi.Policy)
  SharedDtor();
}

void Policy::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Policy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Policy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Policy_descriptor_;
}

const Policy& Policy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

Policy* Policy::default_instance_ = NULL;

Policy* Policy::New(::google::protobuf::Arena* arena) const {
  Policy* n = new Policy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Policy::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statements_.Clear();
}

bool Policy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Policy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Policy.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_statements;
        break;
      }

      // repeated .gobgpapi.Statement statements = 2;
      case 2: {
        if (tag == 18) {
         parse_statements:
          DO_(input->IncrementRecursionDepth());
         parse_loop_statements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_statements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_statements;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Policy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Policy)
  return false;
#undef DO_
}

void Policy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Policy)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Policy.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .gobgpapi.Statement statements = 2;
  for (unsigned int i = 0, n = this->statements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->statements(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.Policy)
}

::google::protobuf::uint8* Policy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Policy)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Policy.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .gobgpapi.Statement statements = 2;
  for (unsigned int i = 0, n = this->statements_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->statements(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Policy)
  return target;
}

int Policy::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated .gobgpapi.Statement statements = 2;
  total_size += 1 * this->statements_size();
  for (int i = 0; i < this->statements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statements(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Policy::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Policy* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Policy>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Policy::MergeFrom(const Policy& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  statements_.MergeFrom(from.statements_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Policy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Policy::CopyFrom(const Policy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Policy::IsInitialized() const {

  return true;
}

void Policy::Swap(Policy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Policy::InternalSwap(Policy* other) {
  name_.Swap(&other->name_);
  statements_.UnsafeArenaSwap(&other->statements_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Policy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Policy_descriptor_;
  metadata.reflection = Policy_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Policy

// optional string name = 1;
void Policy::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Policy::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Policy.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Policy::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Policy.name)
}
 void Policy::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Policy.name)
}
 void Policy::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Policy.name)
}
 ::std::string* Policy::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Policy.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Policy::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Policy::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Policy.name)
}

// repeated .gobgpapi.Statement statements = 2;
int Policy::statements_size() const {
  return statements_.size();
}
void Policy::clear_statements() {
  statements_.Clear();
}
const ::gobgpapi::Statement& Policy::statements(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Policy.statements)
  return statements_.Get(index);
}
::gobgpapi::Statement* Policy::mutable_statements(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Policy.statements)
  return statements_.Mutable(index);
}
::gobgpapi::Statement* Policy::add_statements() {
  // @@protoc_insertion_point(field_add:gobgpapi.Policy.statements)
  return statements_.Add();
}
::google::protobuf::RepeatedPtrField< ::gobgpapi::Statement >*
Policy::mutable_statements() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Policy.statements)
  return &statements_;
}
const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Statement >&
Policy::statements() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Policy.statements)
  return statements_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PolicyAssignment::kTypeFieldNumber;
const int PolicyAssignment::kResourceFieldNumber;
const int PolicyAssignment::kNameFieldNumber;
const int PolicyAssignment::kPoliciesFieldNumber;
const int PolicyAssignment::kDefaultFieldNumber;
#endif  // !_MSC_VER

PolicyAssignment::PolicyAssignment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.PolicyAssignment)
}

void PolicyAssignment::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PolicyAssignment::PolicyAssignment(const PolicyAssignment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.PolicyAssignment)
}

void PolicyAssignment::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  resource_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default__ = 0;
}

PolicyAssignment::~PolicyAssignment() {
  // @@protoc_insertion_point(destructor:gobgpapi.PolicyAssignment)
  SharedDtor();
}

void PolicyAssignment::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PolicyAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PolicyAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PolicyAssignment_descriptor_;
}

const PolicyAssignment& PolicyAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

PolicyAssignment* PolicyAssignment::default_instance_ = NULL;

PolicyAssignment* PolicyAssignment::New(::google::protobuf::Arena* arena) const {
  PolicyAssignment* n = new PolicyAssignment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PolicyAssignment::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PolicyAssignment*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, resource_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default__ = 0;

#undef ZR_HELPER_
#undef ZR_

  policies_.Clear();
}

bool PolicyAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.PolicyAssignment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.PolicyType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::gobgpapi::PolicyType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_resource;
        break;
      }

      // optional .gobgpapi.Resource resource = 2;
      case 2: {
        if (tag == 16) {
         parse_resource:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_resource(static_cast< ::gobgpapi::Resource >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.PolicyAssignment.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_policies;
        break;
      }

      // repeated .gobgpapi.Policy policies = 4;
      case 4: {
        if (tag == 34) {
         parse_policies:
          DO_(input->IncrementRecursionDepth());
         parse_loop_policies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_policies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_policies;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_default;
        break;
      }

      // optional .gobgpapi.RouteAction default = 5;
      case 5: {
        if (tag == 40) {
         parse_default:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_default_(static_cast< ::gobgpapi::RouteAction >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.PolicyAssignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.PolicyAssignment)
  return false;
#undef DO_
}

void PolicyAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.PolicyAssignment)
  // optional .gobgpapi.PolicyType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .gobgpapi.Resource resource = 2;
  if (this->resource() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->resource(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PolicyAssignment.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated .gobgpapi.Policy policies = 4;
  for (unsigned int i = 0, n = this->policies_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->policies(i), output);
  }

  // optional .gobgpapi.RouteAction default = 5;
  if (this->default_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->default_(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.PolicyAssignment)
}

::google::protobuf::uint8* PolicyAssignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.PolicyAssignment)
  // optional .gobgpapi.PolicyType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .gobgpapi.Resource resource = 2;
  if (this->resource() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->resource(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.PolicyAssignment.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .gobgpapi.Policy policies = 4;
  for (unsigned int i = 0, n = this->policies_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->policies(i), target);
  }

  // optional .gobgpapi.RouteAction default = 5;
  if (this->default_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->default_(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.PolicyAssignment)
  return target;
}

int PolicyAssignment::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.PolicyType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .gobgpapi.Resource resource = 2;
  if (this->resource() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->resource());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .gobgpapi.RouteAction default = 5;
  if (this->default_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->default_());
  }

  // repeated .gobgpapi.Policy policies = 4;
  total_size += 1 * this->policies_size();
  for (int i = 0; i < this->policies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->policies(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolicyAssignment::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PolicyAssignment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PolicyAssignment>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PolicyAssignment::MergeFrom(const PolicyAssignment& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  policies_.MergeFrom(from.policies_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.resource() != 0) {
    set_resource(from.resource());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.default_() != 0) {
    set_default_(from.default_());
  }
}

void PolicyAssignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolicyAssignment::CopyFrom(const PolicyAssignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyAssignment::IsInitialized() const {

  return true;
}

void PolicyAssignment::Swap(PolicyAssignment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolicyAssignment::InternalSwap(PolicyAssignment* other) {
  std::swap(type_, other->type_);
  std::swap(resource_, other->resource_);
  name_.Swap(&other->name_);
  policies_.UnsafeArenaSwap(&other->policies_);
  std::swap(default__, other->default__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PolicyAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PolicyAssignment_descriptor_;
  metadata.reflection = PolicyAssignment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PolicyAssignment

// optional .gobgpapi.PolicyType type = 1;
void PolicyAssignment::clear_type() {
  type_ = 0;
}
 ::gobgpapi::PolicyType PolicyAssignment::type() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PolicyAssignment.type)
  return static_cast< ::gobgpapi::PolicyType >(type_);
}
 void PolicyAssignment::set_type(::gobgpapi::PolicyType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PolicyAssignment.type)
}

// optional .gobgpapi.Resource resource = 2;
void PolicyAssignment::clear_resource() {
  resource_ = 0;
}
 ::gobgpapi::Resource PolicyAssignment::resource() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PolicyAssignment.resource)
  return static_cast< ::gobgpapi::Resource >(resource_);
}
 void PolicyAssignment::set_resource(::gobgpapi::Resource value) {
  
  resource_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PolicyAssignment.resource)
}

// optional string name = 3;
void PolicyAssignment::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PolicyAssignment::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PolicyAssignment.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PolicyAssignment::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.PolicyAssignment.name)
}
 void PolicyAssignment::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.PolicyAssignment.name)
}
 void PolicyAssignment::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.PolicyAssignment.name)
}
 ::std::string* PolicyAssignment::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.PolicyAssignment.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PolicyAssignment::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PolicyAssignment::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.PolicyAssignment.name)
}

// repeated .gobgpapi.Policy policies = 4;
int PolicyAssignment::policies_size() const {
  return policies_.size();
}
void PolicyAssignment::clear_policies() {
  policies_.Clear();
}
const ::gobgpapi::Policy& PolicyAssignment::policies(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.PolicyAssignment.policies)
  return policies_.Get(index);
}
::gobgpapi::Policy* PolicyAssignment::mutable_policies(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.PolicyAssignment.policies)
  return policies_.Mutable(index);
}
::gobgpapi::Policy* PolicyAssignment::add_policies() {
  // @@protoc_insertion_point(field_add:gobgpapi.PolicyAssignment.policies)
  return policies_.Add();
}
::google::protobuf::RepeatedPtrField< ::gobgpapi::Policy >*
PolicyAssignment::mutable_policies() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.PolicyAssignment.policies)
  return &policies_;
}
const ::google::protobuf::RepeatedPtrField< ::gobgpapi::Policy >&
PolicyAssignment::policies() const {
  // @@protoc_insertion_point(field_list:gobgpapi.PolicyAssignment.policies)
  return policies_;
}

// optional .gobgpapi.RouteAction default = 5;
void PolicyAssignment::clear_default_() {
  default__ = 0;
}
 ::gobgpapi::RouteAction PolicyAssignment::default_() const {
  // @@protoc_insertion_point(field_get:gobgpapi.PolicyAssignment.default)
  return static_cast< ::gobgpapi::RouteAction >(default__);
}
 void PolicyAssignment::set_default_(::gobgpapi::RouteAction value) {
  
  default__ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.PolicyAssignment.default)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MrtMessage::kDataFieldNumber;
#endif  // !_MSC_VER

MrtMessage::MrtMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.MrtMessage)
}

void MrtMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MrtMessage::MrtMessage(const MrtMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.MrtMessage)
}

void MrtMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MrtMessage::~MrtMessage() {
  // @@protoc_insertion_point(destructor:gobgpapi.MrtMessage)
  SharedDtor();
}

void MrtMessage::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MrtMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MrtMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MrtMessage_descriptor_;
}

const MrtMessage& MrtMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

MrtMessage* MrtMessage::default_instance_ = NULL;

MrtMessage* MrtMessage::New(::google::protobuf::Arena* arena) const {
  MrtMessage* n = new MrtMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MrtMessage::Clear() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MrtMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.MrtMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.MrtMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.MrtMessage)
  return false;
#undef DO_
}

void MrtMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.MrtMessage)
  // optional bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.MrtMessage)
}

::google::protobuf::uint8* MrtMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.MrtMessage)
  // optional bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.MrtMessage)
  return target;
}

int MrtMessage::ByteSize() const {
  int total_size = 0;

  // optional bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MrtMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MrtMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MrtMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MrtMessage::MergeFrom(const MrtMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void MrtMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MrtMessage::CopyFrom(const MrtMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MrtMessage::IsInitialized() const {

  return true;
}

void MrtMessage::Swap(MrtMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MrtMessage::InternalSwap(MrtMessage* other) {
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MrtMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MrtMessage_descriptor_;
  metadata.reflection = MrtMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MrtMessage

// optional bytes data = 1;
void MrtMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MrtMessage::data() const {
  // @@protoc_insertion_point(field_get:gobgpapi.MrtMessage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MrtMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.MrtMessage.data)
}
 void MrtMessage::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.MrtMessage.data)
}
 void MrtMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.MrtMessage.data)
}
 ::std::string* MrtMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.MrtMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MrtMessage::release_data() {
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MrtMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.MrtMessage.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RPKIConf::kAddressFieldNumber;
const int RPKIConf::kRemotePortFieldNumber;
#endif  // !_MSC_VER

RPKIConf::RPKIConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RPKIConf)
}

void RPKIConf::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RPKIConf::RPKIConf(const RPKIConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RPKIConf)
}

void RPKIConf::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RPKIConf::~RPKIConf() {
  // @@protoc_insertion_point(destructor:gobgpapi.RPKIConf)
  SharedDtor();
}

void RPKIConf::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RPKIConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPKIConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPKIConf_descriptor_;
}

const RPKIConf& RPKIConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

RPKIConf* RPKIConf::default_instance_ = NULL;

RPKIConf* RPKIConf::New(::google::protobuf::Arena* arena) const {
  RPKIConf* n = new RPKIConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPKIConf::Clear() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RPKIConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.RPKIConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.RPKIConf.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_remote_port;
        break;
      }

      // optional string remote_port = 2;
      case 2: {
        if (tag == 18) {
         parse_remote_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_port()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remote_port().data(), this->remote_port().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.RPKIConf.remote_port"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.RPKIConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.RPKIConf)
  return false;
#undef DO_
}

void RPKIConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.RPKIConf)
  // optional string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.RPKIConf.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // optional string remote_port = 2;
  if (this->remote_port().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote_port().data(), this->remote_port().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.RPKIConf.remote_port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->remote_port(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.RPKIConf)
}

::google::protobuf::uint8* RPKIConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RPKIConf)
  // optional string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.RPKIConf.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // optional string remote_port = 2;
  if (this->remote_port().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote_port().data(), this->remote_port().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.RPKIConf.remote_port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->remote_port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RPKIConf)
  return target;
}

int RPKIConf::ByteSize() const {
  int total_size = 0;

  // optional string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // optional string remote_port = 2;
  if (this->remote_port().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remote_port());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPKIConf::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RPKIConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RPKIConf>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RPKIConf::MergeFrom(const RPKIConf& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.remote_port().size() > 0) {

    remote_port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_port_);
  }
}

void RPKIConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPKIConf::CopyFrom(const RPKIConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPKIConf::IsInitialized() const {

  return true;
}

void RPKIConf::Swap(RPKIConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPKIConf::InternalSwap(RPKIConf* other) {
  address_.Swap(&other->address_);
  remote_port_.Swap(&other->remote_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPKIConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RPKIConf_descriptor_;
  metadata.reflection = RPKIConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RPKIConf

// optional string address = 1;
void RPKIConf::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RPKIConf::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIConf.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RPKIConf::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIConf.address)
}
 void RPKIConf::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.RPKIConf.address)
}
 void RPKIConf::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.RPKIConf.address)
}
 ::std::string* RPKIConf::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.RPKIConf.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RPKIConf::release_address() {
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RPKIConf::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RPKIConf.address)
}

// optional string remote_port = 2;
void RPKIConf::clear_remote_port() {
  remote_port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RPKIConf::remote_port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIConf.remote_port)
  return remote_port_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RPKIConf::set_remote_port(const ::std::string& value) {
  
  remote_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIConf.remote_port)
}
 void RPKIConf::set_remote_port(const char* value) {
  
  remote_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.RPKIConf.remote_port)
}
 void RPKIConf::set_remote_port(const char* value, size_t size) {
  
  remote_port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.RPKIConf.remote_port)
}
 ::std::string* RPKIConf::mutable_remote_port() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.RPKIConf.remote_port)
  return remote_port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RPKIConf::release_remote_port() {
  
  return remote_port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RPKIConf::set_allocated_remote_port(::std::string* remote_port) {
  if (remote_port != NULL) {
    
  } else {
    
  }
  remote_port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_port);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RPKIConf.remote_port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RPKIState::kUptimeFieldNumber;
const int RPKIState::kDowntimeFieldNumber;
const int RPKIState::kUpFieldNumber;
const int RPKIState::kRecordIpv4FieldNumber;
const int RPKIState::kRecordIpv6FieldNumber;
const int RPKIState::kPrefixIpv4FieldNumber;
const int RPKIState::kPrefixIpv6FieldNumber;
const int RPKIState::kSerialFieldNumber;
const int RPKIState::kReceivedIpv4FieldNumber;
const int RPKIState::kReceivedIpv6FieldNumber;
const int RPKIState::kSerialNotifyFieldNumber;
const int RPKIState::kCacheResetFieldNumber;
const int RPKIState::kCacheResponseFieldNumber;
const int RPKIState::kEndOfDataFieldNumber;
const int RPKIState::kErrorFieldNumber;
const int RPKIState::kSerialQueryFieldNumber;
const int RPKIState::kResetQueryFieldNumber;
#endif  // !_MSC_VER

RPKIState::RPKIState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RPKIState)
}

void RPKIState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RPKIState::RPKIState(const RPKIState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RPKIState)
}

void RPKIState::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  uptime_ = GOOGLE_LONGLONG(0);
  downtime_ = GOOGLE_LONGLONG(0);
  up_ = false;
  record_ipv4_ = 0u;
  record_ipv6_ = 0u;
  prefix_ipv4_ = 0u;
  prefix_ipv6_ = 0u;
  serial_ = 0u;
  received_ipv4_ = GOOGLE_LONGLONG(0);
  received_ipv6_ = GOOGLE_LONGLONG(0);
  serial_notify_ = GOOGLE_LONGLONG(0);
  cache_reset_ = GOOGLE_LONGLONG(0);
  cache_response_ = GOOGLE_LONGLONG(0);
  end_of_data_ = GOOGLE_LONGLONG(0);
  error_ = GOOGLE_LONGLONG(0);
  serial_query_ = GOOGLE_LONGLONG(0);
  reset_query_ = GOOGLE_LONGLONG(0);
}

RPKIState::~RPKIState() {
  // @@protoc_insertion_point(destructor:gobgpapi.RPKIState)
  SharedDtor();
}

void RPKIState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RPKIState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPKIState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPKIState_descriptor_;
}

const RPKIState& RPKIState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

RPKIState* RPKIState::default_instance_ = NULL;

RPKIState* RPKIState::New(::google::protobuf::Arena* arena) const {
  RPKIState* n = new RPKIState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPKIState::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RPKIState*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uptime_, serial_);
  ZR_(received_ipv4_, serial_query_);
  reset_query_ = GOOGLE_LONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

}

bool RPKIState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.RPKIState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uptime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uptime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_downtime;
        break;
      }

      // optional int64 downtime = 2;
      case 2: {
        if (tag == 16) {
         parse_downtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &downtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_up;
        break;
      }

      // optional bool up = 3;
      case 3: {
        if (tag == 24) {
         parse_up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &up_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_record_ipv4;
        break;
      }

      // optional uint32 record_ipv4 = 4;
      case 4: {
        if (tag == 32) {
         parse_record_ipv4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &record_ipv4_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_record_ipv6;
        break;
      }

      // optional uint32 record_ipv6 = 5;
      case 5: {
        if (tag == 40) {
         parse_record_ipv6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &record_ipv6_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_prefix_ipv4;
        break;
      }

      // optional uint32 prefix_ipv4 = 6;
      case 6: {
        if (tag == 48) {
         parse_prefix_ipv4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefix_ipv4_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_prefix_ipv6;
        break;
      }

      // optional uint32 prefix_ipv6 = 7;
      case 7: {
        if (tag == 56) {
         parse_prefix_ipv6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefix_ipv6_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_serial;
        break;
      }

      // optional uint32 serial = 8;
      case 8: {
        if (tag == 64) {
         parse_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_received_ipv4;
        break;
      }

      // optional int64 received_ipv4 = 9;
      case 9: {
        if (tag == 72) {
         parse_received_ipv4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &received_ipv4_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_received_ipv6;
        break;
      }

      // optional int64 received_ipv6 = 10;
      case 10: {
        if (tag == 80) {
         parse_received_ipv6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &received_ipv6_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_serial_notify;
        break;
      }

      // optional int64 serial_notify = 11;
      case 11: {
        if (tag == 88) {
         parse_serial_notify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serial_notify_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_cache_reset;
        break;
      }

      // optional int64 cache_reset = 12;
      case 12: {
        if (tag == 96) {
         parse_cache_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cache_reset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_cache_response;
        break;
      }

      // optional int64 cache_response = 13;
      case 13: {
        if (tag == 104) {
         parse_cache_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cache_response_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_end_of_data;
        break;
      }

      // optional int64 end_of_data = 14;
      case 14: {
        if (tag == 112) {
         parse_end_of_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_of_data_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_error;
        break;
      }

      // optional int64 error = 15;
      case 15: {
        if (tag == 120) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_serial_query;
        break;
      }

      // optional int64 serial_query = 16;
      case 16: {
        if (tag == 128) {
         parse_serial_query:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serial_query_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_reset_query;
        break;
      }

      // optional int64 reset_query = 17;
      case 17: {
        if (tag == 136) {
         parse_reset_query:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reset_query_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.RPKIState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.RPKIState)
  return false;
#undef DO_
}

void RPKIState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.RPKIState)
  // optional int64 uptime = 1;
  if (this->uptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uptime(), output);
  }

  // optional int64 downtime = 2;
  if (this->downtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->downtime(), output);
  }

  // optional bool up = 3;
  if (this->up() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->up(), output);
  }

  // optional uint32 record_ipv4 = 4;
  if (this->record_ipv4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->record_ipv4(), output);
  }

  // optional uint32 record_ipv6 = 5;
  if (this->record_ipv6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->record_ipv6(), output);
  }

  // optional uint32 prefix_ipv4 = 6;
  if (this->prefix_ipv4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->prefix_ipv4(), output);
  }

  // optional uint32 prefix_ipv6 = 7;
  if (this->prefix_ipv6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->prefix_ipv6(), output);
  }

  // optional uint32 serial = 8;
  if (this->serial() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->serial(), output);
  }

  // optional int64 received_ipv4 = 9;
  if (this->received_ipv4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->received_ipv4(), output);
  }

  // optional int64 received_ipv6 = 10;
  if (this->received_ipv6() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->received_ipv6(), output);
  }

  // optional int64 serial_notify = 11;
  if (this->serial_notify() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->serial_notify(), output);
  }

  // optional int64 cache_reset = 12;
  if (this->cache_reset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->cache_reset(), output);
  }

  // optional int64 cache_response = 13;
  if (this->cache_response() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->cache_response(), output);
  }

  // optional int64 end_of_data = 14;
  if (this->end_of_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->end_of_data(), output);
  }

  // optional int64 error = 15;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->error(), output);
  }

  // optional int64 serial_query = 16;
  if (this->serial_query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->serial_query(), output);
  }

  // optional int64 reset_query = 17;
  if (this->reset_query() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->reset_query(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.RPKIState)
}

::google::protobuf::uint8* RPKIState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RPKIState)
  // optional int64 uptime = 1;
  if (this->uptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uptime(), target);
  }

  // optional int64 downtime = 2;
  if (this->downtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->downtime(), target);
  }

  // optional bool up = 3;
  if (this->up() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->up(), target);
  }

  // optional uint32 record_ipv4 = 4;
  if (this->record_ipv4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->record_ipv4(), target);
  }

  // optional uint32 record_ipv6 = 5;
  if (this->record_ipv6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->record_ipv6(), target);
  }

  // optional uint32 prefix_ipv4 = 6;
  if (this->prefix_ipv4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->prefix_ipv4(), target);
  }

  // optional uint32 prefix_ipv6 = 7;
  if (this->prefix_ipv6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->prefix_ipv6(), target);
  }

  // optional uint32 serial = 8;
  if (this->serial() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->serial(), target);
  }

  // optional int64 received_ipv4 = 9;
  if (this->received_ipv4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->received_ipv4(), target);
  }

  // optional int64 received_ipv6 = 10;
  if (this->received_ipv6() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->received_ipv6(), target);
  }

  // optional int64 serial_notify = 11;
  if (this->serial_notify() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->serial_notify(), target);
  }

  // optional int64 cache_reset = 12;
  if (this->cache_reset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->cache_reset(), target);
  }

  // optional int64 cache_response = 13;
  if (this->cache_response() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->cache_response(), target);
  }

  // optional int64 end_of_data = 14;
  if (this->end_of_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->end_of_data(), target);
  }

  // optional int64 error = 15;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->error(), target);
  }

  // optional int64 serial_query = 16;
  if (this->serial_query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->serial_query(), target);
  }

  // optional int64 reset_query = 17;
  if (this->reset_query() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->reset_query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RPKIState)
  return target;
}

int RPKIState::ByteSize() const {
  int total_size = 0;

  // optional int64 uptime = 1;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uptime());
  }

  // optional int64 downtime = 2;
  if (this->downtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->downtime());
  }

  // optional bool up = 3;
  if (this->up() != 0) {
    total_size += 1 + 1;
  }

  // optional uint32 record_ipv4 = 4;
  if (this->record_ipv4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->record_ipv4());
  }

  // optional uint32 record_ipv6 = 5;
  if (this->record_ipv6() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->record_ipv6());
  }

  // optional uint32 prefix_ipv4 = 6;
  if (this->prefix_ipv4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prefix_ipv4());
  }

  // optional uint32 prefix_ipv6 = 7;
  if (this->prefix_ipv6() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prefix_ipv6());
  }

  // optional uint32 serial = 8;
  if (this->serial() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serial());
  }

  // optional int64 received_ipv4 = 9;
  if (this->received_ipv4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->received_ipv4());
  }

  // optional int64 received_ipv6 = 10;
  if (this->received_ipv6() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->received_ipv6());
  }

  // optional int64 serial_notify = 11;
  if (this->serial_notify() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->serial_notify());
  }

  // optional int64 cache_reset = 12;
  if (this->cache_reset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cache_reset());
  }

  // optional int64 cache_response = 13;
  if (this->cache_response() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cache_response());
  }

  // optional int64 end_of_data = 14;
  if (this->end_of_data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end_of_data());
  }

  // optional int64 error = 15;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->error());
  }

  // optional int64 serial_query = 16;
  if (this->serial_query() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->serial_query());
  }

  // optional int64 reset_query = 17;
  if (this->reset_query() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->reset_query());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPKIState::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RPKIState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RPKIState>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RPKIState::MergeFrom(const RPKIState& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.uptime() != 0) {
    set_uptime(from.uptime());
  }
  if (from.downtime() != 0) {
    set_downtime(from.downtime());
  }
  if (from.up() != 0) {
    set_up(from.up());
  }
  if (from.record_ipv4() != 0) {
    set_record_ipv4(from.record_ipv4());
  }
  if (from.record_ipv6() != 0) {
    set_record_ipv6(from.record_ipv6());
  }
  if (from.prefix_ipv4() != 0) {
    set_prefix_ipv4(from.prefix_ipv4());
  }
  if (from.prefix_ipv6() != 0) {
    set_prefix_ipv6(from.prefix_ipv6());
  }
  if (from.serial() != 0) {
    set_serial(from.serial());
  }
  if (from.received_ipv4() != 0) {
    set_received_ipv4(from.received_ipv4());
  }
  if (from.received_ipv6() != 0) {
    set_received_ipv6(from.received_ipv6());
  }
  if (from.serial_notify() != 0) {
    set_serial_notify(from.serial_notify());
  }
  if (from.cache_reset() != 0) {
    set_cache_reset(from.cache_reset());
  }
  if (from.cache_response() != 0) {
    set_cache_response(from.cache_response());
  }
  if (from.end_of_data() != 0) {
    set_end_of_data(from.end_of_data());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
  if (from.serial_query() != 0) {
    set_serial_query(from.serial_query());
  }
  if (from.reset_query() != 0) {
    set_reset_query(from.reset_query());
  }
}

void RPKIState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPKIState::CopyFrom(const RPKIState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPKIState::IsInitialized() const {

  return true;
}

void RPKIState::Swap(RPKIState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPKIState::InternalSwap(RPKIState* other) {
  std::swap(uptime_, other->uptime_);
  std::swap(downtime_, other->downtime_);
  std::swap(up_, other->up_);
  std::swap(record_ipv4_, other->record_ipv4_);
  std::swap(record_ipv6_, other->record_ipv6_);
  std::swap(prefix_ipv4_, other->prefix_ipv4_);
  std::swap(prefix_ipv6_, other->prefix_ipv6_);
  std::swap(serial_, other->serial_);
  std::swap(received_ipv4_, other->received_ipv4_);
  std::swap(received_ipv6_, other->received_ipv6_);
  std::swap(serial_notify_, other->serial_notify_);
  std::swap(cache_reset_, other->cache_reset_);
  std::swap(cache_response_, other->cache_response_);
  std::swap(end_of_data_, other->end_of_data_);
  std::swap(error_, other->error_);
  std::swap(serial_query_, other->serial_query_);
  std::swap(reset_query_, other->reset_query_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPKIState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RPKIState_descriptor_;
  metadata.reflection = RPKIState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RPKIState

// optional int64 uptime = 1;
void RPKIState::clear_uptime() {
  uptime_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RPKIState::uptime() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.uptime)
  return uptime_;
}
 void RPKIState::set_uptime(::google::protobuf::int64 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.uptime)
}

// optional int64 downtime = 2;
void RPKIState::clear_downtime() {
  downtime_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RPKIState::downtime() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.downtime)
  return downtime_;
}
 void RPKIState::set_downtime(::google::protobuf::int64 value) {
  
  downtime_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.downtime)
}

// optional bool up = 3;
void RPKIState::clear_up() {
  up_ = false;
}
 bool RPKIState::up() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.up)
  return up_;
}
 void RPKIState::set_up(bool value) {
  
  up_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.up)
}

// optional uint32 record_ipv4 = 4;
void RPKIState::clear_record_ipv4() {
  record_ipv4_ = 0u;
}
 ::google::protobuf::uint32 RPKIState::record_ipv4() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.record_ipv4)
  return record_ipv4_;
}
 void RPKIState::set_record_ipv4(::google::protobuf::uint32 value) {
  
  record_ipv4_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.record_ipv4)
}

// optional uint32 record_ipv6 = 5;
void RPKIState::clear_record_ipv6() {
  record_ipv6_ = 0u;
}
 ::google::protobuf::uint32 RPKIState::record_ipv6() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.record_ipv6)
  return record_ipv6_;
}
 void RPKIState::set_record_ipv6(::google::protobuf::uint32 value) {
  
  record_ipv6_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.record_ipv6)
}

// optional uint32 prefix_ipv4 = 6;
void RPKIState::clear_prefix_ipv4() {
  prefix_ipv4_ = 0u;
}
 ::google::protobuf::uint32 RPKIState::prefix_ipv4() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.prefix_ipv4)
  return prefix_ipv4_;
}
 void RPKIState::set_prefix_ipv4(::google::protobuf::uint32 value) {
  
  prefix_ipv4_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.prefix_ipv4)
}

// optional uint32 prefix_ipv6 = 7;
void RPKIState::clear_prefix_ipv6() {
  prefix_ipv6_ = 0u;
}
 ::google::protobuf::uint32 RPKIState::prefix_ipv6() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.prefix_ipv6)
  return prefix_ipv6_;
}
 void RPKIState::set_prefix_ipv6(::google::protobuf::uint32 value) {
  
  prefix_ipv6_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.prefix_ipv6)
}

// optional uint32 serial = 8;
void RPKIState::clear_serial() {
  serial_ = 0u;
}
 ::google::protobuf::uint32 RPKIState::serial() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.serial)
  return serial_;
}
 void RPKIState::set_serial(::google::protobuf::uint32 value) {
  
  serial_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.serial)
}

// optional int64 received_ipv4 = 9;
void RPKIState::clear_received_ipv4() {
  received_ipv4_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RPKIState::received_ipv4() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.received_ipv4)
  return received_ipv4_;
}
 void RPKIState::set_received_ipv4(::google::protobuf::int64 value) {
  
  received_ipv4_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.received_ipv4)
}

// optional int64 received_ipv6 = 10;
void RPKIState::clear_received_ipv6() {
  received_ipv6_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RPKIState::received_ipv6() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.received_ipv6)
  return received_ipv6_;
}
 void RPKIState::set_received_ipv6(::google::protobuf::int64 value) {
  
  received_ipv6_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.received_ipv6)
}

// optional int64 serial_notify = 11;
void RPKIState::clear_serial_notify() {
  serial_notify_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RPKIState::serial_notify() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.serial_notify)
  return serial_notify_;
}
 void RPKIState::set_serial_notify(::google::protobuf::int64 value) {
  
  serial_notify_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.serial_notify)
}

// optional int64 cache_reset = 12;
void RPKIState::clear_cache_reset() {
  cache_reset_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RPKIState::cache_reset() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.cache_reset)
  return cache_reset_;
}
 void RPKIState::set_cache_reset(::google::protobuf::int64 value) {
  
  cache_reset_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.cache_reset)
}

// optional int64 cache_response = 13;
void RPKIState::clear_cache_response() {
  cache_response_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RPKIState::cache_response() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.cache_response)
  return cache_response_;
}
 void RPKIState::set_cache_response(::google::protobuf::int64 value) {
  
  cache_response_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.cache_response)
}

// optional int64 end_of_data = 14;
void RPKIState::clear_end_of_data() {
  end_of_data_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RPKIState::end_of_data() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.end_of_data)
  return end_of_data_;
}
 void RPKIState::set_end_of_data(::google::protobuf::int64 value) {
  
  end_of_data_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.end_of_data)
}

// optional int64 error = 15;
void RPKIState::clear_error() {
  error_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RPKIState::error() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.error)
  return error_;
}
 void RPKIState::set_error(::google::protobuf::int64 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.error)
}

// optional int64 serial_query = 16;
void RPKIState::clear_serial_query() {
  serial_query_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RPKIState::serial_query() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.serial_query)
  return serial_query_;
}
 void RPKIState::set_serial_query(::google::protobuf::int64 value) {
  
  serial_query_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.serial_query)
}

// optional int64 reset_query = 17;
void RPKIState::clear_reset_query() {
  reset_query_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RPKIState::reset_query() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKIState.reset_query)
  return reset_query_;
}
 void RPKIState::set_reset_query(::google::protobuf::int64 value) {
  
  reset_query_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.RPKIState.reset_query)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RPKI::kConfFieldNumber;
const int RPKI::kStateFieldNumber;
#endif  // !_MSC_VER

RPKI::RPKI()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.RPKI)
}

void RPKI::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  conf_ = const_cast< ::gobgpapi::RPKIConf*>(&::gobgpapi::RPKIConf::default_instance());
  state_ = const_cast< ::gobgpapi::RPKIState*>(&::gobgpapi::RPKIState::default_instance());
}

RPKI::RPKI(const RPKI& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.RPKI)
}

void RPKI::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  conf_ = NULL;
  state_ = NULL;
}

RPKI::~RPKI() {
  // @@protoc_insertion_point(destructor:gobgpapi.RPKI)
  SharedDtor();
}

void RPKI::SharedDtor() {
  if (this != default_instance_) {
    delete conf_;
    delete state_;
  }
}

void RPKI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPKI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPKI_descriptor_;
}

const RPKI& RPKI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

RPKI* RPKI::default_instance_ = NULL;

RPKI* RPKI::New(::google::protobuf::Arena* arena) const {
  RPKI* n = new RPKI;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPKI::Clear() {
  if (GetArenaNoVirtual() == NULL && conf_ != NULL) delete conf_;
  conf_ = NULL;
  if (GetArenaNoVirtual() == NULL && state_ != NULL) delete state_;
  state_ = NULL;
}

bool RPKI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.RPKI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.RPKIConf conf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }

      // optional .gobgpapi.RPKIState state = 2;
      case 2: {
        if (tag == 18) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.RPKI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.RPKI)
  return false;
#undef DO_
}

void RPKI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.RPKI)
  // optional .gobgpapi.RPKIConf conf = 1;
  if (this->has_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->conf_, output);
  }

  // optional .gobgpapi.RPKIState state = 2;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->state_, output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.RPKI)
}

::google::protobuf::uint8* RPKI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.RPKI)
  // optional .gobgpapi.RPKIConf conf = 1;
  if (this->has_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->conf_, target);
  }

  // optional .gobgpapi.RPKIState state = 2;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->state_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.RPKI)
  return target;
}

int RPKI::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.RPKIConf conf = 1;
  if (this->has_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->conf_);
  }

  // optional .gobgpapi.RPKIState state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->state_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPKI::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RPKI* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RPKI>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RPKI::MergeFrom(const RPKI& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_conf()) {
    mutable_conf()->::gobgpapi::RPKIConf::MergeFrom(from.conf());
  }
  if (from.has_state()) {
    mutable_state()->::gobgpapi::RPKIState::MergeFrom(from.state());
  }
}

void RPKI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPKI::CopyFrom(const RPKI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPKI::IsInitialized() const {

  return true;
}

void RPKI::Swap(RPKI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPKI::InternalSwap(RPKI* other) {
  std::swap(conf_, other->conf_);
  std::swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPKI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RPKI_descriptor_;
  metadata.reflection = RPKI_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RPKI

// optional .gobgpapi.RPKIConf conf = 1;
bool RPKI::has_conf() const {
  return !_is_default_instance_ && conf_ != NULL;
}
void RPKI::clear_conf() {
  if (GetArenaNoVirtual() == NULL && conf_ != NULL) delete conf_;
  conf_ = NULL;
}
const ::gobgpapi::RPKIConf& RPKI::conf() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKI.conf)
  return conf_ != NULL ? *conf_ : *default_instance_->conf_;
}
::gobgpapi::RPKIConf* RPKI::mutable_conf() {
  
  if (conf_ == NULL) {
    conf_ = new ::gobgpapi::RPKIConf;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.RPKI.conf)
  return conf_;
}
::gobgpapi::RPKIConf* RPKI::release_conf() {
  
  ::gobgpapi::RPKIConf* temp = conf_;
  conf_ = NULL;
  return temp;
}
void RPKI::set_allocated_conf(::gobgpapi::RPKIConf* conf) {
  delete conf_;
  conf_ = conf;
  if (conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RPKI.conf)
}

// optional .gobgpapi.RPKIState state = 2;
bool RPKI::has_state() const {
  return !_is_default_instance_ && state_ != NULL;
}
void RPKI::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) delete state_;
  state_ = NULL;
}
const ::gobgpapi::RPKIState& RPKI::state() const {
  // @@protoc_insertion_point(field_get:gobgpapi.RPKI.state)
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
::gobgpapi::RPKIState* RPKI::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::gobgpapi::RPKIState;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.RPKI.state)
  return state_;
}
::gobgpapi::RPKIState* RPKI::release_state() {
  
  ::gobgpapi::RPKIState* temp = state_;
  state_ = NULL;
  return temp;
}
void RPKI::set_allocated_state(::gobgpapi::RPKIState* state) {
  delete state_;
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.RPKI.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ROA::kAsFieldNumber;
const int ROA::kPrefixlenFieldNumber;
const int ROA::kMaxlenFieldNumber;
const int ROA::kPrefixFieldNumber;
const int ROA::kConfFieldNumber;
#endif  // !_MSC_VER

ROA::ROA()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ROA)
}

void ROA::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  conf_ = const_cast< ::gobgpapi::RPKIConf*>(&::gobgpapi::RPKIConf::default_instance());
}

ROA::ROA(const ROA& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ROA)
}

void ROA::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  as_ = 0u;
  prefixlen_ = 0u;
  maxlen_ = 0u;
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conf_ = NULL;
}

ROA::~ROA() {
  // @@protoc_insertion_point(destructor:gobgpapi.ROA)
  SharedDtor();
}

void ROA::SharedDtor() {
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete conf_;
  }
}

void ROA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROA_descriptor_;
}

const ROA& ROA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

ROA* ROA::default_instance_ = NULL;

ROA* ROA::New(::google::protobuf::Arena* arena) const {
  ROA* n = new ROA;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ROA::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ROA*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(as_, prefixlen_);
  maxlen_ = 0u;
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && conf_ != NULL) delete conf_;
  conf_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool ROA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ROA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 as = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &as_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prefixlen;
        break;
      }

      // optional uint32 prefixlen = 2;
      case 2: {
        if (tag == 16) {
         parse_prefixlen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefixlen_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxlen;
        break;
      }

      // optional uint32 maxlen = 3;
      case 3: {
        if (tag == 24) {
         parse_maxlen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlen_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_prefix;
        break;
      }

      // optional string prefix = 4;
      case 4: {
        if (tag == 34) {
         parse_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.ROA.prefix"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_conf;
        break;
      }

      // optional .gobgpapi.RPKIConf conf = 5;
      case 5: {
        if (tag == 42) {
         parse_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ROA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ROA)
  return false;
#undef DO_
}

void ROA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ROA)
  // optional uint32 as = 1;
  if (this->as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->as(), output);
  }

  // optional uint32 prefixlen = 2;
  if (this->prefixlen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prefixlen(), output);
  }

  // optional uint32 maxlen = 3;
  if (this->maxlen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxlen(), output);
  }

  // optional string prefix = 4;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ROA.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->prefix(), output);
  }

  // optional .gobgpapi.RPKIConf conf = 5;
  if (this->has_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->conf_, output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.ROA)
}

::google::protobuf::uint8* ROA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ROA)
  // optional uint32 as = 1;
  if (this->as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->as(), target);
  }

  // optional uint32 prefixlen = 2;
  if (this->prefixlen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prefixlen(), target);
  }

  // optional uint32 maxlen = 3;
  if (this->maxlen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxlen(), target);
  }

  // optional string prefix = 4;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ROA.prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->prefix(), target);
  }

  // optional .gobgpapi.RPKIConf conf = 5;
  if (this->has_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->conf_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ROA)
  return target;
}

int ROA::ByteSize() const {
  int total_size = 0;

  // optional uint32 as = 1;
  if (this->as() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->as());
  }

  // optional uint32 prefixlen = 2;
  if (this->prefixlen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prefixlen());
  }

  // optional uint32 maxlen = 3;
  if (this->maxlen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxlen());
  }

  // optional string prefix = 4;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefix());
  }

  // optional .gobgpapi.RPKIConf conf = 5;
  if (this->has_conf()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->conf_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROA::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ROA* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ROA>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ROA::MergeFrom(const ROA& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.as() != 0) {
    set_as(from.as());
  }
  if (from.prefixlen() != 0) {
    set_prefixlen(from.prefixlen());
  }
  if (from.maxlen() != 0) {
    set_maxlen(from.maxlen());
  }
  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.has_conf()) {
    mutable_conf()->::gobgpapi::RPKIConf::MergeFrom(from.conf());
  }
}

void ROA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROA::CopyFrom(const ROA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROA::IsInitialized() const {

  return true;
}

void ROA::Swap(ROA* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ROA::InternalSwap(ROA* other) {
  std::swap(as_, other->as_);
  std::swap(prefixlen_, other->prefixlen_);
  std::swap(maxlen_, other->maxlen_);
  prefix_.Swap(&other->prefix_);
  std::swap(conf_, other->conf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ROA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ROA_descriptor_;
  metadata.reflection = ROA_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ROA

// optional uint32 as = 1;
void ROA::clear_as() {
  as_ = 0u;
}
 ::google::protobuf::uint32 ROA::as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROA.as)
  return as_;
}
 void ROA::set_as(::google::protobuf::uint32 value) {
  
  as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ROA.as)
}

// optional uint32 prefixlen = 2;
void ROA::clear_prefixlen() {
  prefixlen_ = 0u;
}
 ::google::protobuf::uint32 ROA::prefixlen() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROA.prefixlen)
  return prefixlen_;
}
 void ROA::set_prefixlen(::google::protobuf::uint32 value) {
  
  prefixlen_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ROA.prefixlen)
}

// optional uint32 maxlen = 3;
void ROA::clear_maxlen() {
  maxlen_ = 0u;
}
 ::google::protobuf::uint32 ROA::maxlen() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROA.maxlen)
  return maxlen_;
}
 void ROA::set_maxlen(::google::protobuf::uint32 value) {
  
  maxlen_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ROA.maxlen)
}

// optional string prefix = 4;
void ROA::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ROA::prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROA.prefix)
  return prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ROA::set_prefix(const ::std::string& value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ROA.prefix)
}
 void ROA::set_prefix(const char* value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ROA.prefix)
}
 void ROA::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ROA.prefix)
}
 ::std::string* ROA::mutable_prefix() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ROA.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ROA::release_prefix() {
  
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ROA::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ROA.prefix)
}

// optional .gobgpapi.RPKIConf conf = 5;
bool ROA::has_conf() const {
  return !_is_default_instance_ && conf_ != NULL;
}
void ROA::clear_conf() {
  if (GetArenaNoVirtual() == NULL && conf_ != NULL) delete conf_;
  conf_ = NULL;
}
const ::gobgpapi::RPKIConf& ROA::conf() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROA.conf)
  return conf_ != NULL ? *conf_ : *default_instance_->conf_;
}
::gobgpapi::RPKIConf* ROA::mutable_conf() {
  
  if (conf_ == NULL) {
    conf_ = new ::gobgpapi::RPKIConf;
  }
  // @@protoc_insertion_point(field_mutable:gobgpapi.ROA.conf)
  return conf_;
}
::gobgpapi::RPKIConf* ROA::release_conf() {
  
  ::gobgpapi::RPKIConf* temp = conf_;
  conf_ = NULL;
  return temp;
}
void ROA::set_allocated_conf(::gobgpapi::RPKIConf* conf) {
  delete conf_;
  conf_ = conf;
  if (conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ROA.conf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ROAResult_ValidationReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROAResult_ValidationReason_descriptor_;
}
bool ROAResult_ValidationReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ROAResult_ValidationReason ROAResult::UPDATE;
const ROAResult_ValidationReason ROAResult::WITHDRAW;
const ROAResult_ValidationReason ROAResult::PEER_DOWN;
const ROAResult_ValidationReason ROAResult::REVALIDATE;
const ROAResult_ValidationReason ROAResult::ValidationReason_MIN;
const ROAResult_ValidationReason ROAResult::ValidationReason_MAX;
const int ROAResult::ValidationReason_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ROAResult_ValidationResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROAResult_ValidationResult_descriptor_;
}
bool ROAResult_ValidationResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ROAResult_ValidationResult ROAResult::NONE;
const ROAResult_ValidationResult ROAResult::NOT_FOUND;
const ROAResult_ValidationResult ROAResult::VALID;
const ROAResult_ValidationResult ROAResult::INVALID;
const ROAResult_ValidationResult ROAResult::ValidationResult_MIN;
const ROAResult_ValidationResult ROAResult::ValidationResult_MAX;
const int ROAResult::ValidationResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ROAResult::kReasonFieldNumber;
const int ROAResult::kAddressFieldNumber;
const int ROAResult::kTimestampFieldNumber;
const int ROAResult::kAspathAttrFieldNumber;
const int ROAResult::kOriginAsFieldNumber;
const int ROAResult::kPrefixFieldNumber;
const int ROAResult::kOldResultFieldNumber;
const int ROAResult::kNewResultFieldNumber;
const int ROAResult::kRoasFieldNumber;
#endif  // !_MSC_VER

ROAResult::ROAResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.ROAResult)
}

void ROAResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ROAResult::ROAResult(const ROAResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.ROAResult)
}

void ROAResult::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  reason_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
  aspath_attr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_as_ = 0u;
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  old_result_ = 0;
  new_result_ = 0;
}

ROAResult::~ROAResult() {
  // @@protoc_insertion_point(destructor:gobgpapi.ROAResult)
  SharedDtor();
}

void ROAResult::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aspath_attr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ROAResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROAResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROAResult_descriptor_;
}

const ROAResult& ROAResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

ROAResult* ROAResult::default_instance_ = NULL;

ROAResult* ROAResult::New(::google::protobuf::Arena* arena) const {
  ROAResult* n = new ROAResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ROAResult::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ROAResult*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_, origin_as_);
  ZR_(old_result_, new_result_);
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aspath_attr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  roas_.Clear();
}

bool ROAResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.ROAResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gobgpapi.ROAResult.ValidationReason reason = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::gobgpapi::ROAResult_ValidationReason >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // optional string address = 2;
      case 2: {
        if (tag == 18) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.ROAResult.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_aspath_attr;
        break;
      }

      // optional bytes aspath_attr = 4;
      case 4: {
        if (tag == 34) {
         parse_aspath_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_aspath_attr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_origin_as;
        break;
      }

      // optional uint32 origin_as = 5;
      case 5: {
        if (tag == 40) {
         parse_origin_as:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_as_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_prefix;
        break;
      }

      // optional string prefix = 6;
      case 6: {
        if (tag == 50) {
         parse_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.ROAResult.prefix"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_old_result;
        break;
      }

      // optional .gobgpapi.ROAResult.ValidationResult old_result = 7;
      case 7: {
        if (tag == 56) {
         parse_old_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_old_result(static_cast< ::gobgpapi::ROAResult_ValidationResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_new_result;
        break;
      }

      // optional .gobgpapi.ROAResult.ValidationResult new_result = 8;
      case 8: {
        if (tag == 64) {
         parse_new_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_new_result(static_cast< ::gobgpapi::ROAResult_ValidationResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_roas;
        break;
      }

      // repeated .gobgpapi.ROA roas = 9;
      case 9: {
        if (tag == 74) {
         parse_roas:
          DO_(input->IncrementRecursionDepth());
         parse_loop_roas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_roas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_roas;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.ROAResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.ROAResult)
  return false;
#undef DO_
}

void ROAResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.ROAResult)
  // optional .gobgpapi.ROAResult.ValidationReason reason = 1;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }

  // optional string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ROAResult.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // optional int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // optional bytes aspath_attr = 4;
  if (this->aspath_attr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->aspath_attr(), output);
  }

  // optional uint32 origin_as = 5;
  if (this->origin_as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->origin_as(), output);
  }

  // optional string prefix = 6;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ROAResult.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->prefix(), output);
  }

  // optional .gobgpapi.ROAResult.ValidationResult old_result = 7;
  if (this->old_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->old_result(), output);
  }

  // optional .gobgpapi.ROAResult.ValidationResult new_result = 8;
  if (this->new_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->new_result(), output);
  }

  // repeated .gobgpapi.ROA roas = 9;
  for (unsigned int i = 0, n = this->roas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->roas(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.ROAResult)
}

::google::protobuf::uint8* ROAResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.ROAResult)
  // optional .gobgpapi.ROAResult.ValidationReason reason = 1;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason(), target);
  }

  // optional string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ROAResult.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // optional int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // optional bytes aspath_attr = 4;
  if (this->aspath_attr().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->aspath_attr(), target);
  }

  // optional uint32 origin_as = 5;
  if (this->origin_as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->origin_as(), target);
  }

  // optional string prefix = 6;
  if (this->prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.ROAResult.prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->prefix(), target);
  }

  // optional .gobgpapi.ROAResult.ValidationResult old_result = 7;
  if (this->old_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->old_result(), target);
  }

  // optional .gobgpapi.ROAResult.ValidationResult new_result = 8;
  if (this->new_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->new_result(), target);
  }

  // repeated .gobgpapi.ROA roas = 9;
  for (unsigned int i = 0, n = this->roas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->roas(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.ROAResult)
  return target;
}

int ROAResult::ByteSize() const {
  int total_size = 0;

  // optional .gobgpapi.ROAResult.ValidationReason reason = 1;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  // optional string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // optional int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional bytes aspath_attr = 4;
  if (this->aspath_attr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->aspath_attr());
  }

  // optional uint32 origin_as = 5;
  if (this->origin_as() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->origin_as());
  }

  // optional string prefix = 6;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefix());
  }

  // optional .gobgpapi.ROAResult.ValidationResult old_result = 7;
  if (this->old_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->old_result());
  }

  // optional .gobgpapi.ROAResult.ValidationResult new_result = 8;
  if (this->new_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->new_result());
  }

  // repeated .gobgpapi.ROA roas = 9;
  total_size += 1 * this->roas_size();
  for (int i = 0; i < this->roas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roas(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROAResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ROAResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ROAResult>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ROAResult::MergeFrom(const ROAResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  roas_.MergeFrom(from.roas_);
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.aspath_attr().size() > 0) {

    aspath_attr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aspath_attr_);
  }
  if (from.origin_as() != 0) {
    set_origin_as(from.origin_as());
  }
  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.old_result() != 0) {
    set_old_result(from.old_result());
  }
  if (from.new_result() != 0) {
    set_new_result(from.new_result());
  }
}

void ROAResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROAResult::CopyFrom(const ROAResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROAResult::IsInitialized() const {

  return true;
}

void ROAResult::Swap(ROAResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ROAResult::InternalSwap(ROAResult* other) {
  std::swap(reason_, other->reason_);
  address_.Swap(&other->address_);
  std::swap(timestamp_, other->timestamp_);
  aspath_attr_.Swap(&other->aspath_attr_);
  std::swap(origin_as_, other->origin_as_);
  prefix_.Swap(&other->prefix_);
  std::swap(old_result_, other->old_result_);
  std::swap(new_result_, other->new_result_);
  roas_.UnsafeArenaSwap(&other->roas_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ROAResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ROAResult_descriptor_;
  metadata.reflection = ROAResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ROAResult

// optional .gobgpapi.ROAResult.ValidationReason reason = 1;
void ROAResult::clear_reason() {
  reason_ = 0;
}
 ::gobgpapi::ROAResult_ValidationReason ROAResult::reason() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROAResult.reason)
  return static_cast< ::gobgpapi::ROAResult_ValidationReason >(reason_);
}
 void ROAResult::set_reason(::gobgpapi::ROAResult_ValidationReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ROAResult.reason)
}

// optional string address = 2;
void ROAResult::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ROAResult::address() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROAResult.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ROAResult::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ROAResult.address)
}
 void ROAResult::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ROAResult.address)
}
 void ROAResult::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ROAResult.address)
}
 ::std::string* ROAResult::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ROAResult.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ROAResult::release_address() {
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ROAResult::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ROAResult.address)
}

// optional int64 timestamp = 3;
void ROAResult::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ROAResult::timestamp() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROAResult.timestamp)
  return timestamp_;
}
 void ROAResult::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ROAResult.timestamp)
}

// optional bytes aspath_attr = 4;
void ROAResult::clear_aspath_attr() {
  aspath_attr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ROAResult::aspath_attr() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROAResult.aspath_attr)
  return aspath_attr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ROAResult::set_aspath_attr(const ::std::string& value) {
  
  aspath_attr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ROAResult.aspath_attr)
}
 void ROAResult::set_aspath_attr(const char* value) {
  
  aspath_attr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ROAResult.aspath_attr)
}
 void ROAResult::set_aspath_attr(const void* value, size_t size) {
  
  aspath_attr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ROAResult.aspath_attr)
}
 ::std::string* ROAResult::mutable_aspath_attr() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ROAResult.aspath_attr)
  return aspath_attr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ROAResult::release_aspath_attr() {
  
  return aspath_attr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ROAResult::set_allocated_aspath_attr(::std::string* aspath_attr) {
  if (aspath_attr != NULL) {
    
  } else {
    
  }
  aspath_attr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aspath_attr);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ROAResult.aspath_attr)
}

// optional uint32 origin_as = 5;
void ROAResult::clear_origin_as() {
  origin_as_ = 0u;
}
 ::google::protobuf::uint32 ROAResult::origin_as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROAResult.origin_as)
  return origin_as_;
}
 void ROAResult::set_origin_as(::google::protobuf::uint32 value) {
  
  origin_as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ROAResult.origin_as)
}

// optional string prefix = 6;
void ROAResult::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ROAResult::prefix() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROAResult.prefix)
  return prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ROAResult::set_prefix(const ::std::string& value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.ROAResult.prefix)
}
 void ROAResult::set_prefix(const char* value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.ROAResult.prefix)
}
 void ROAResult::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.ROAResult.prefix)
}
 ::std::string* ROAResult::mutable_prefix() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.ROAResult.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ROAResult::release_prefix() {
  
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ROAResult::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.ROAResult.prefix)
}

// optional .gobgpapi.ROAResult.ValidationResult old_result = 7;
void ROAResult::clear_old_result() {
  old_result_ = 0;
}
 ::gobgpapi::ROAResult_ValidationResult ROAResult::old_result() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROAResult.old_result)
  return static_cast< ::gobgpapi::ROAResult_ValidationResult >(old_result_);
}
 void ROAResult::set_old_result(::gobgpapi::ROAResult_ValidationResult value) {
  
  old_result_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ROAResult.old_result)
}

// optional .gobgpapi.ROAResult.ValidationResult new_result = 8;
void ROAResult::clear_new_result() {
  new_result_ = 0;
}
 ::gobgpapi::ROAResult_ValidationResult ROAResult::new_result() const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROAResult.new_result)
  return static_cast< ::gobgpapi::ROAResult_ValidationResult >(new_result_);
}
 void ROAResult::set_new_result(::gobgpapi::ROAResult_ValidationResult value) {
  
  new_result_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.ROAResult.new_result)
}

// repeated .gobgpapi.ROA roas = 9;
int ROAResult::roas_size() const {
  return roas_.size();
}
void ROAResult::clear_roas() {
  roas_.Clear();
}
const ::gobgpapi::ROA& ROAResult::roas(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.ROAResult.roas)
  return roas_.Get(index);
}
::gobgpapi::ROA* ROAResult::mutable_roas(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.ROAResult.roas)
  return roas_.Mutable(index);
}
::gobgpapi::ROA* ROAResult::add_roas() {
  // @@protoc_insertion_point(field_add:gobgpapi.ROAResult.roas)
  return roas_.Add();
}
::google::protobuf::RepeatedPtrField< ::gobgpapi::ROA >*
ROAResult::mutable_roas() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.ROAResult.roas)
  return &roas_;
}
const ::google::protobuf::RepeatedPtrField< ::gobgpapi::ROA >&
ROAResult::roas() const {
  // @@protoc_insertion_point(field_list:gobgpapi.ROAResult.roas)
  return roas_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Vrf::kNameFieldNumber;
const int Vrf::kRdFieldNumber;
const int Vrf::kImportRtFieldNumber;
const int Vrf::kExportRtFieldNumber;
#endif  // !_MSC_VER

Vrf::Vrf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Vrf)
}

void Vrf::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Vrf::Vrf(const Vrf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Vrf)
}

void Vrf::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Vrf::~Vrf() {
  // @@protoc_insertion_point(destructor:gobgpapi.Vrf)
  SharedDtor();
}

void Vrf::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Vrf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vrf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vrf_descriptor_;
}

const Vrf& Vrf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

Vrf* Vrf::default_instance_ = NULL;

Vrf* Vrf::New(::google::protobuf::Arena* arena) const {
  Vrf* n = new Vrf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vrf::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  import_rt_.Clear();
  export_rt_.Clear();
}

bool Vrf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Vrf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Vrf.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rd;
        break;
      }

      // optional bytes rd = 2;
      case 2: {
        if (tag == 18) {
         parse_rd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_import_rt;
        break;
      }

      // repeated bytes import_rt = 3;
      case 3: {
        if (tag == 26) {
         parse_import_rt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_import_rt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_import_rt;
        if (input->ExpectTag(34)) goto parse_export_rt;
        break;
      }

      // repeated bytes export_rt = 4;
      case 4: {
        if (tag == 34) {
         parse_export_rt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_export_rt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_export_rt;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Vrf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Vrf)
  return false;
#undef DO_
}

void Vrf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Vrf)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Vrf.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes rd = 2;
  if (this->rd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->rd(), output);
  }

  // repeated bytes import_rt = 3;
  for (int i = 0; i < this->import_rt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->import_rt(i), output);
  }

  // repeated bytes export_rt = 4;
  for (int i = 0; i < this->export_rt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->export_rt(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.Vrf)
}

::google::protobuf::uint8* Vrf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Vrf)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Vrf.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes rd = 2;
  if (this->rd().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->rd(), target);
  }

  // repeated bytes import_rt = 3;
  for (int i = 0; i < this->import_rt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->import_rt(i), target);
  }

  // repeated bytes export_rt = 4;
  for (int i = 0; i < this->export_rt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->export_rt(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Vrf)
  return target;
}

int Vrf::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional bytes rd = 2;
  if (this->rd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->rd());
  }

  // repeated bytes import_rt = 3;
  total_size += 1 * this->import_rt_size();
  for (int i = 0; i < this->import_rt_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->import_rt(i));
  }

  // repeated bytes export_rt = 4;
  total_size += 1 * this->export_rt_size();
  for (int i = 0; i < this->export_rt_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->export_rt(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vrf::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vrf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Vrf>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vrf::MergeFrom(const Vrf& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  import_rt_.MergeFrom(from.import_rt_);
  export_rt_.MergeFrom(from.export_rt_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.rd().size() > 0) {

    rd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rd_);
  }
}

void Vrf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vrf::CopyFrom(const Vrf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vrf::IsInitialized() const {

  return true;
}

void Vrf::Swap(Vrf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vrf::InternalSwap(Vrf* other) {
  name_.Swap(&other->name_);
  rd_.Swap(&other->rd_);
  import_rt_.UnsafeArenaSwap(&other->import_rt_);
  export_rt_.UnsafeArenaSwap(&other->export_rt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vrf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vrf_descriptor_;
  metadata.reflection = Vrf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vrf

// optional string name = 1;
void Vrf::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Vrf::name() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Vrf.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Vrf::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Vrf.name)
}
 void Vrf::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Vrf.name)
}
 void Vrf::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Vrf.name)
}
 ::std::string* Vrf::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Vrf.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Vrf::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Vrf::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Vrf.name)
}

// optional bytes rd = 2;
void Vrf::clear_rd() {
  rd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Vrf::rd() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Vrf.rd)
  return rd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Vrf::set_rd(const ::std::string& value) {
  
  rd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Vrf.rd)
}
 void Vrf::set_rd(const char* value) {
  
  rd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Vrf.rd)
}
 void Vrf::set_rd(const void* value, size_t size) {
  
  rd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Vrf.rd)
}
 ::std::string* Vrf::mutable_rd() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Vrf.rd)
  return rd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Vrf::release_rd() {
  
  return rd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Vrf::set_allocated_rd(::std::string* rd) {
  if (rd != NULL) {
    
  } else {
    
  }
  rd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rd);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Vrf.rd)
}

// repeated bytes import_rt = 3;
int Vrf::import_rt_size() const {
  return import_rt_.size();
}
void Vrf::clear_import_rt() {
  import_rt_.Clear();
}
 const ::std::string& Vrf::import_rt(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Vrf.import_rt)
  return import_rt_.Get(index);
}
 ::std::string* Vrf::mutable_import_rt(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Vrf.import_rt)
  return import_rt_.Mutable(index);
}
 void Vrf::set_import_rt(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Vrf.import_rt)
  import_rt_.Mutable(index)->assign(value);
}
 void Vrf::set_import_rt(int index, const char* value) {
  import_rt_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.Vrf.import_rt)
}
 void Vrf::set_import_rt(int index, const void* value, size_t size) {
  import_rt_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Vrf.import_rt)
}
 ::std::string* Vrf::add_import_rt() {
  return import_rt_.Add();
}
 void Vrf::add_import_rt(const ::std::string& value) {
  import_rt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Vrf.import_rt)
}
 void Vrf::add_import_rt(const char* value) {
  import_rt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.Vrf.import_rt)
}
 void Vrf::add_import_rt(const void* value, size_t size) {
  import_rt_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.Vrf.import_rt)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Vrf::import_rt() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Vrf.import_rt)
  return import_rt_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Vrf::mutable_import_rt() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Vrf.import_rt)
  return &import_rt_;
}

// repeated bytes export_rt = 4;
int Vrf::export_rt_size() const {
  return export_rt_.size();
}
void Vrf::clear_export_rt() {
  export_rt_.Clear();
}
 const ::std::string& Vrf::export_rt(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Vrf.export_rt)
  return export_rt_.Get(index);
}
 ::std::string* Vrf::mutable_export_rt(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Vrf.export_rt)
  return export_rt_.Mutable(index);
}
 void Vrf::set_export_rt(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Vrf.export_rt)
  export_rt_.Mutable(index)->assign(value);
}
 void Vrf::set_export_rt(int index, const char* value) {
  export_rt_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.Vrf.export_rt)
}
 void Vrf::set_export_rt(int index, const void* value, size_t size) {
  export_rt_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Vrf.export_rt)
}
 ::std::string* Vrf::add_export_rt() {
  return export_rt_.Add();
}
 void Vrf::add_export_rt(const ::std::string& value) {
  export_rt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Vrf.export_rt)
}
 void Vrf::add_export_rt(const char* value) {
  export_rt_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.Vrf.export_rt)
}
 void Vrf::add_export_rt(const void* value, size_t size) {
  export_rt_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.Vrf.export_rt)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Vrf::export_rt() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Vrf.export_rt)
  return export_rt_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Vrf::mutable_export_rt() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Vrf.export_rt)
  return &export_rt_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Global::kAsFieldNumber;
const int Global::kRouterIdFieldNumber;
const int Global::kListenPortFieldNumber;
const int Global::kListenAddressesFieldNumber;
const int Global::kFamiliesFieldNumber;
const int Global::kMplsLabelMinFieldNumber;
const int Global::kMplsLabelMaxFieldNumber;
const int Global::kCollectorFieldNumber;
#endif  // !_MSC_VER

Global::Global()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gobgpapi.Global)
}

void Global::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Global::Global(const Global& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gobgpapi.Global)
}

void Global::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  as_ = 0u;
  router_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  listen_port_ = 0;
  mpls_label_min_ = 0u;
  mpls_label_max_ = 0u;
  collector_ = false;
}

Global::~Global() {
  // @@protoc_insertion_point(destructor:gobgpapi.Global)
  SharedDtor();
}

void Global::SharedDtor() {
  router_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Global::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Global::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Global_descriptor_;
}

const Global& Global::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gobgp_5fapi_5fclient_2eproto();
  return *default_instance_;
}

Global* Global::default_instance_ = NULL;

Global* Global::New(::google::protobuf::Arena* arena) const {
  Global* n = new Global;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Global::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Global*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(as_, listen_port_);
  ZR_(mpls_label_min_, collector_);
  router_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  listen_addresses_.Clear();
  families_.Clear();
}

bool Global::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gobgpapi.Global)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 as = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &as_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_router_id;
        break;
      }

      // optional string router_id = 2;
      case 2: {
        if (tag == 18) {
         parse_router_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_router_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->router_id().data(), this->router_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Global.router_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_listen_port;
        break;
      }

      // optional int32 listen_port = 3;
      case 3: {
        if (tag == 24) {
         parse_listen_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listen_port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_listen_addresses;
        break;
      }

      // repeated string listen_addresses = 4;
      case 4: {
        if (tag == 34) {
         parse_listen_addresses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_listen_addresses()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->listen_addresses(this->listen_addresses_size() - 1).data(),
            this->listen_addresses(this->listen_addresses_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gobgpapi.Global.listen_addresses"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_listen_addresses;
        if (input->ExpectTag(42)) goto parse_families;
        break;
      }

      // repeated uint32 families = 5;
      case 5: {
        if (tag == 42) {
         parse_families:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_families())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42, input, this->mutable_families())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mpls_label_min;
        break;
      }

      // optional uint32 mpls_label_min = 6;
      case 6: {
        if (tag == 48) {
         parse_mpls_label_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpls_label_min_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mpls_label_max;
        break;
      }

      // optional uint32 mpls_label_max = 7;
      case 7: {
        if (tag == 56) {
         parse_mpls_label_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpls_label_max_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_collector;
        break;
      }

      // optional bool collector = 8;
      case 8: {
        if (tag == 64) {
         parse_collector:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collector_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gobgpapi.Global)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gobgpapi.Global)
  return false;
#undef DO_
}

void Global::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gobgpapi.Global)
  // optional uint32 as = 1;
  if (this->as() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->as(), output);
  }

  // optional string router_id = 2;
  if (this->router_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->router_id().data(), this->router_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Global.router_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->router_id(), output);
  }

  // optional int32 listen_port = 3;
  if (this->listen_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->listen_port(), output);
  }

  // repeated string listen_addresses = 4;
  for (int i = 0; i < this->listen_addresses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->listen_addresses(i).data(), this->listen_addresses(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Global.listen_addresses");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->listen_addresses(i), output);
  }

  // repeated uint32 families = 5;
  if (this->families_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_families_cached_byte_size_);
  }
  for (int i = 0; i < this->families_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->families(i), output);
  }

  // optional uint32 mpls_label_min = 6;
  if (this->mpls_label_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mpls_label_min(), output);
  }

  // optional uint32 mpls_label_max = 7;
  if (this->mpls_label_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mpls_label_max(), output);
  }

  // optional bool collector = 8;
  if (this->collector() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->collector(), output);
  }

  // @@protoc_insertion_point(serialize_end:gobgpapi.Global)
}

::google::protobuf::uint8* Global::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gobgpapi.Global)
  // optional uint32 as = 1;
  if (this->as() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->as(), target);
  }

  // optional string router_id = 2;
  if (this->router_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->router_id().data(), this->router_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Global.router_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->router_id(), target);
  }

  // optional int32 listen_port = 3;
  if (this->listen_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->listen_port(), target);
  }

  // repeated string listen_addresses = 4;
  for (int i = 0; i < this->listen_addresses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->listen_addresses(i).data(), this->listen_addresses(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gobgpapi.Global.listen_addresses");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->listen_addresses(i), target);
  }

  // repeated uint32 families = 5;
  if (this->families_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _families_cached_byte_size_, target);
  }
  for (int i = 0; i < this->families_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->families(i), target);
  }

  // optional uint32 mpls_label_min = 6;
  if (this->mpls_label_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mpls_label_min(), target);
  }

  // optional uint32 mpls_label_max = 7;
  if (this->mpls_label_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mpls_label_max(), target);
  }

  // optional bool collector = 8;
  if (this->collector() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->collector(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gobgpapi.Global)
  return target;
}

int Global::ByteSize() const {
  int total_size = 0;

  // optional uint32 as = 1;
  if (this->as() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->as());
  }

  // optional string router_id = 2;
  if (this->router_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->router_id());
  }

  // optional int32 listen_port = 3;
  if (this->listen_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->listen_port());
  }

  // optional uint32 mpls_label_min = 6;
  if (this->mpls_label_min() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mpls_label_min());
  }

  // optional uint32 mpls_label_max = 7;
  if (this->mpls_label_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mpls_label_max());
  }

  // optional bool collector = 8;
  if (this->collector() != 0) {
    total_size += 1 + 1;
  }

  // repeated string listen_addresses = 4;
  total_size += 1 * this->listen_addresses_size();
  for (int i = 0; i < this->listen_addresses_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->listen_addresses(i));
  }

  // repeated uint32 families = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->families_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->families(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _families_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Global::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Global* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Global>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Global::MergeFrom(const Global& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  listen_addresses_.MergeFrom(from.listen_addresses_);
  families_.MergeFrom(from.families_);
  if (from.as() != 0) {
    set_as(from.as());
  }
  if (from.router_id().size() > 0) {

    router_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.router_id_);
  }
  if (from.listen_port() != 0) {
    set_listen_port(from.listen_port());
  }
  if (from.mpls_label_min() != 0) {
    set_mpls_label_min(from.mpls_label_min());
  }
  if (from.mpls_label_max() != 0) {
    set_mpls_label_max(from.mpls_label_max());
  }
  if (from.collector() != 0) {
    set_collector(from.collector());
  }
}

void Global::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Global::CopyFrom(const Global& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Global::IsInitialized() const {

  return true;
}

void Global::Swap(Global* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Global::InternalSwap(Global* other) {
  std::swap(as_, other->as_);
  router_id_.Swap(&other->router_id_);
  std::swap(listen_port_, other->listen_port_);
  listen_addresses_.UnsafeArenaSwap(&other->listen_addresses_);
  families_.UnsafeArenaSwap(&other->families_);
  std::swap(mpls_label_min_, other->mpls_label_min_);
  std::swap(mpls_label_max_, other->mpls_label_max_);
  std::swap(collector_, other->collector_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Global::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Global_descriptor_;
  metadata.reflection = Global_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Global

// optional uint32 as = 1;
void Global::clear_as() {
  as_ = 0u;
}
 ::google::protobuf::uint32 Global::as() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.as)
  return as_;
}
 void Global::set_as(::google::protobuf::uint32 value) {
  
  as_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Global.as)
}

// optional string router_id = 2;
void Global::clear_router_id() {
  router_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Global::router_id() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.router_id)
  return router_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Global::set_router_id(const ::std::string& value) {
  
  router_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gobgpapi.Global.router_id)
}
 void Global::set_router_id(const char* value) {
  
  router_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gobgpapi.Global.router_id)
}
 void Global::set_router_id(const char* value, size_t size) {
  
  router_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Global.router_id)
}
 ::std::string* Global::mutable_router_id() {
  
  // @@protoc_insertion_point(field_mutable:gobgpapi.Global.router_id)
  return router_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Global::release_router_id() {
  
  return router_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Global::set_allocated_router_id(::std::string* router_id) {
  if (router_id != NULL) {
    
  } else {
    
  }
  router_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), router_id);
  // @@protoc_insertion_point(field_set_allocated:gobgpapi.Global.router_id)
}

// optional int32 listen_port = 3;
void Global::clear_listen_port() {
  listen_port_ = 0;
}
 ::google::protobuf::int32 Global::listen_port() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.listen_port)
  return listen_port_;
}
 void Global::set_listen_port(::google::protobuf::int32 value) {
  
  listen_port_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Global.listen_port)
}

// repeated string listen_addresses = 4;
int Global::listen_addresses_size() const {
  return listen_addresses_.size();
}
void Global::clear_listen_addresses() {
  listen_addresses_.Clear();
}
 const ::std::string& Global::listen_addresses(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.listen_addresses)
  return listen_addresses_.Get(index);
}
 ::std::string* Global::mutable_listen_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:gobgpapi.Global.listen_addresses)
  return listen_addresses_.Mutable(index);
}
 void Global::set_listen_addresses(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gobgpapi.Global.listen_addresses)
  listen_addresses_.Mutable(index)->assign(value);
}
 void Global::set_listen_addresses(int index, const char* value) {
  listen_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gobgpapi.Global.listen_addresses)
}
 void Global::set_listen_addresses(int index, const char* value, size_t size) {
  listen_addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gobgpapi.Global.listen_addresses)
}
 ::std::string* Global::add_listen_addresses() {
  return listen_addresses_.Add();
}
 void Global::add_listen_addresses(const ::std::string& value) {
  listen_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Global.listen_addresses)
}
 void Global::add_listen_addresses(const char* value) {
  listen_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gobgpapi.Global.listen_addresses)
}
 void Global::add_listen_addresses(const char* value, size_t size) {
  listen_addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gobgpapi.Global.listen_addresses)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Global::listen_addresses() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Global.listen_addresses)
  return listen_addresses_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Global::mutable_listen_addresses() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Global.listen_addresses)
  return &listen_addresses_;
}

// repeated uint32 families = 5;
int Global::families_size() const {
  return families_.size();
}
void Global::clear_families() {
  families_.Clear();
}
 ::google::protobuf::uint32 Global::families(int index) const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.families)
  return families_.Get(index);
}
 void Global::set_families(int index, ::google::protobuf::uint32 value) {
  families_.Set(index, value);
  // @@protoc_insertion_point(field_set:gobgpapi.Global.families)
}
 void Global::add_families(::google::protobuf::uint32 value) {
  families_.Add(value);
  // @@protoc_insertion_point(field_add:gobgpapi.Global.families)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Global::families() const {
  // @@protoc_insertion_point(field_list:gobgpapi.Global.families)
  return families_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Global::mutable_families() {
  // @@protoc_insertion_point(field_mutable_list:gobgpapi.Global.families)
  return &families_;
}

// optional uint32 mpls_label_min = 6;
void Global::clear_mpls_label_min() {
  mpls_label_min_ = 0u;
}
 ::google::protobuf::uint32 Global::mpls_label_min() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.mpls_label_min)
  return mpls_label_min_;
}
 void Global::set_mpls_label_min(::google::protobuf::uint32 value) {
  
  mpls_label_min_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Global.mpls_label_min)
}

// optional uint32 mpls_label_max = 7;
void Global::clear_mpls_label_max() {
  mpls_label_max_ = 0u;
}
 ::google::protobuf::uint32 Global::mpls_label_max() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.mpls_label_max)
  return mpls_label_max_;
}
 void Global::set_mpls_label_max(::google::protobuf::uint32 value) {
  
  mpls_label_max_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Global.mpls_label_max)
}

// optional bool collector = 8;
void Global::clear_collector() {
  collector_ = false;
}
 bool Global::collector() const {
  // @@protoc_insertion_point(field_get:gobgpapi.Global.collector)
  return collector_;
}
 void Global::set_collector(bool value) {
  
  collector_ = value;
  // @@protoc_insertion_point(field_set:gobgpapi.Global.collector)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gobgpapi

// @@protoc_insertion_point(global_scope)
