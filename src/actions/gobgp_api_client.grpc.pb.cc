// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: gobgp_api_client.proto

#include "gobgp_api_client.pb.h"
#include "gobgp_api_client.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>
namespace gobgpapi {

static const char* GobgpApi_method_names[] = {
  "/gobgpapi.GobgpApi/GetGlobalConfig",
  "/gobgpapi.GobgpApi/ModGlobalConfig",
  "/gobgpapi.GobgpApi/GetNeighbors",
  "/gobgpapi.GobgpApi/GetNeighbor",
  "/gobgpapi.GobgpApi/ModNeighbor",
  "/gobgpapi.GobgpApi/GetRib",
  "/gobgpapi.GobgpApi/Reset",
  "/gobgpapi.GobgpApi/SoftReset",
  "/gobgpapi.GobgpApi/SoftResetIn",
  "/gobgpapi.GobgpApi/SoftResetOut",
  "/gobgpapi.GobgpApi/Shutdown",
  "/gobgpapi.GobgpApi/Enable",
  "/gobgpapi.GobgpApi/Disable",
  "/gobgpapi.GobgpApi/ModPath",
  "/gobgpapi.GobgpApi/ModPaths",
  "/gobgpapi.GobgpApi/MonitorRib",
  "/gobgpapi.GobgpApi/MonitorBestChanged",
  "/gobgpapi.GobgpApi/MonitorPeerState",
  "/gobgpapi.GobgpApi/MonitorROAValidation",
  "/gobgpapi.GobgpApi/GetMrt",
  "/gobgpapi.GobgpApi/ModMrt",
  "/gobgpapi.GobgpApi/ModBmp",
  "/gobgpapi.GobgpApi/GetRPKI",
  "/gobgpapi.GobgpApi/ModRPKI",
  "/gobgpapi.GobgpApi/GetROA",
  "/gobgpapi.GobgpApi/GetVrfs",
  "/gobgpapi.GobgpApi/ModVrf",
  "/gobgpapi.GobgpApi/GetDefinedSet",
  "/gobgpapi.GobgpApi/GetDefinedSets",
  "/gobgpapi.GobgpApi/ModDefinedSet",
  "/gobgpapi.GobgpApi/GetStatement",
  "/gobgpapi.GobgpApi/GetStatements",
  "/gobgpapi.GobgpApi/ModStatement",
  "/gobgpapi.GobgpApi/GetPolicy",
  "/gobgpapi.GobgpApi/GetPolicies",
  "/gobgpapi.GobgpApi/ModPolicy",
  "/gobgpapi.GobgpApi/GetPolicyAssignment",
  "/gobgpapi.GobgpApi/ModPolicyAssignment",
};

std::unique_ptr< GobgpApi::Stub> GobgpApi::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< GobgpApi::Stub> stub(new GobgpApi::Stub(channel));
  return stub;
}

GobgpApi::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_GetGlobalConfig_(GobgpApi_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModGlobalConfig_(GobgpApi_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNeighbors_(GobgpApi_method_names[2], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetNeighbor_(GobgpApi_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModNeighbor_(GobgpApi_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRib_(GobgpApi_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reset_(GobgpApi_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SoftReset_(GobgpApi_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SoftResetIn_(GobgpApi_method_names[8], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SoftResetOut_(GobgpApi_method_names[9], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Shutdown_(GobgpApi_method_names[10], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Enable_(GobgpApi_method_names[11], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Disable_(GobgpApi_method_names[12], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModPath_(GobgpApi_method_names[13], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModPaths_(GobgpApi_method_names[14], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_MonitorRib_(GobgpApi_method_names[15], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_MonitorBestChanged_(GobgpApi_method_names[16], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_MonitorPeerState_(GobgpApi_method_names[17], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_MonitorROAValidation_(GobgpApi_method_names[18], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetMrt_(GobgpApi_method_names[19], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ModMrt_(GobgpApi_method_names[20], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModBmp_(GobgpApi_method_names[21], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRPKI_(GobgpApi_method_names[22], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ModRPKI_(GobgpApi_method_names[23], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetROA_(GobgpApi_method_names[24], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetVrfs_(GobgpApi_method_names[25], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ModVrf_(GobgpApi_method_names[26], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDefinedSet_(GobgpApi_method_names[27], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDefinedSets_(GobgpApi_method_names[28], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ModDefinedSet_(GobgpApi_method_names[29], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStatement_(GobgpApi_method_names[30], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStatements_(GobgpApi_method_names[31], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ModStatement_(GobgpApi_method_names[32], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPolicy_(GobgpApi_method_names[33], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPolicies_(GobgpApi_method_names[34], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ModPolicy_(GobgpApi_method_names[35], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPolicyAssignment_(GobgpApi_method_names[36], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModPolicyAssignment_(GobgpApi_method_names[37], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GobgpApi::Stub::GetGlobalConfig(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Global* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetGlobalConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Global>* GobgpApi::Stub::AsyncGetGlobalConfigRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Global>(channel_.get(), cq, rpcmethod_GetGlobalConfig_, context, request);
}

::grpc::Status GobgpApi::Stub::ModGlobalConfig(::grpc::ClientContext* context, const ::gobgpapi::ModGlobalConfigArguments& request, ::gobgpapi::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ModGlobalConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* GobgpApi::Stub::AsyncModGlobalConfigRaw(::grpc::ClientContext* context, const ::gobgpapi::ModGlobalConfigArguments& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>(channel_.get(), cq, rpcmethod_ModGlobalConfig_, context, request);
}

::grpc::ClientReader< ::gobgpapi::Peer>* GobgpApi::Stub::GetNeighborsRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
  return new ::grpc::ClientReader< ::gobgpapi::Peer>(channel_.get(), rpcmethod_GetNeighbors_, context, request);
}

::grpc::ClientAsyncReader< ::gobgpapi::Peer>* GobgpApi::Stub::AsyncGetNeighborsRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::gobgpapi::Peer>(channel_.get(), cq, rpcmethod_GetNeighbors_, context, request, tag);
}

::grpc::Status GobgpApi::Stub::GetNeighbor(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Peer* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetNeighbor_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Peer>* GobgpApi::Stub::AsyncGetNeighborRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Peer>(channel_.get(), cq, rpcmethod_GetNeighbor_, context, request);
}

::grpc::Status GobgpApi::Stub::ModNeighbor(::grpc::ClientContext* context, const ::gobgpapi::ModNeighborArguments& request, ::gobgpapi::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ModNeighbor_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* GobgpApi::Stub::AsyncModNeighborRaw(::grpc::ClientContext* context, const ::gobgpapi::ModNeighborArguments& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>(channel_.get(), cq, rpcmethod_ModNeighbor_, context, request);
}

::grpc::Status GobgpApi::Stub::GetRib(::grpc::ClientContext* context, const ::gobgpapi::Table& request, ::gobgpapi::Table* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetRib_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Table>* GobgpApi::Stub::AsyncGetRibRaw(::grpc::ClientContext* context, const ::gobgpapi::Table& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Table>(channel_.get(), cq, rpcmethod_GetRib_, context, request);
}

::grpc::Status GobgpApi::Stub::Reset(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Reset_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* GobgpApi::Stub::AsyncResetRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>(channel_.get(), cq, rpcmethod_Reset_, context, request);
}

::grpc::Status GobgpApi::Stub::SoftReset(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SoftReset_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* GobgpApi::Stub::AsyncSoftResetRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>(channel_.get(), cq, rpcmethod_SoftReset_, context, request);
}

::grpc::Status GobgpApi::Stub::SoftResetIn(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SoftResetIn_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* GobgpApi::Stub::AsyncSoftResetInRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>(channel_.get(), cq, rpcmethod_SoftResetIn_, context, request);
}

::grpc::Status GobgpApi::Stub::SoftResetOut(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SoftResetOut_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* GobgpApi::Stub::AsyncSoftResetOutRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>(channel_.get(), cq, rpcmethod_SoftResetOut_, context, request);
}

::grpc::Status GobgpApi::Stub::Shutdown(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Shutdown_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* GobgpApi::Stub::AsyncShutdownRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>(channel_.get(), cq, rpcmethod_Shutdown_, context, request);
}

::grpc::Status GobgpApi::Stub::Enable(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Enable_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* GobgpApi::Stub::AsyncEnableRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>(channel_.get(), cq, rpcmethod_Enable_, context, request);
}

::grpc::Status GobgpApi::Stub::Disable(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::gobgpapi::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Disable_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* GobgpApi::Stub::AsyncDisableRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>(channel_.get(), cq, rpcmethod_Disable_, context, request);
}

::grpc::Status GobgpApi::Stub::ModPath(::grpc::ClientContext* context, const ::gobgpapi::ModPathArguments& request, ::gobgpapi::ModPathResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ModPath_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::ModPathResponse>* GobgpApi::Stub::AsyncModPathRaw(::grpc::ClientContext* context, const ::gobgpapi::ModPathArguments& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::ModPathResponse>(channel_.get(), cq, rpcmethod_ModPath_, context, request);
}

::grpc::ClientWriter< ::gobgpapi::ModPathsArguments>* GobgpApi::Stub::ModPathsRaw(::grpc::ClientContext* context, ::gobgpapi::Error* response) {
  return new ::grpc::ClientWriter< ::gobgpapi::ModPathsArguments>(channel_.get(), rpcmethod_ModPaths_, context, response);
}

::grpc::ClientAsyncWriter< ::gobgpapi::ModPathsArguments>* GobgpApi::Stub::AsyncModPathsRaw(::grpc::ClientContext* context, ::gobgpapi::Error* response, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncWriter< ::gobgpapi::ModPathsArguments>(channel_.get(), cq, rpcmethod_ModPaths_, context, response, tag);
}

::grpc::ClientReader< ::gobgpapi::Destination>* GobgpApi::Stub::MonitorRibRaw(::grpc::ClientContext* context, const ::gobgpapi::Table& request) {
  return new ::grpc::ClientReader< ::gobgpapi::Destination>(channel_.get(), rpcmethod_MonitorRib_, context, request);
}

::grpc::ClientAsyncReader< ::gobgpapi::Destination>* GobgpApi::Stub::AsyncMonitorRibRaw(::grpc::ClientContext* context, const ::gobgpapi::Table& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::gobgpapi::Destination>(channel_.get(), cq, rpcmethod_MonitorRib_, context, request, tag);
}

::grpc::ClientReader< ::gobgpapi::Destination>* GobgpApi::Stub::MonitorBestChangedRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
  return new ::grpc::ClientReader< ::gobgpapi::Destination>(channel_.get(), rpcmethod_MonitorBestChanged_, context, request);
}

::grpc::ClientAsyncReader< ::gobgpapi::Destination>* GobgpApi::Stub::AsyncMonitorBestChangedRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::gobgpapi::Destination>(channel_.get(), cq, rpcmethod_MonitorBestChanged_, context, request, tag);
}

::grpc::ClientReader< ::gobgpapi::Peer>* GobgpApi::Stub::MonitorPeerStateRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
  return new ::grpc::ClientReader< ::gobgpapi::Peer>(channel_.get(), rpcmethod_MonitorPeerState_, context, request);
}

::grpc::ClientAsyncReader< ::gobgpapi::Peer>* GobgpApi::Stub::AsyncMonitorPeerStateRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::gobgpapi::Peer>(channel_.get(), cq, rpcmethod_MonitorPeerState_, context, request, tag);
}

::grpc::ClientReader< ::gobgpapi::ROAResult>* GobgpApi::Stub::MonitorROAValidationRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
  return new ::grpc::ClientReader< ::gobgpapi::ROAResult>(channel_.get(), rpcmethod_MonitorROAValidation_, context, request);
}

::grpc::ClientAsyncReader< ::gobgpapi::ROAResult>* GobgpApi::Stub::AsyncMonitorROAValidationRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::gobgpapi::ROAResult>(channel_.get(), cq, rpcmethod_MonitorROAValidation_, context, request, tag);
}

::grpc::ClientReader< ::gobgpapi::MrtMessage>* GobgpApi::Stub::GetMrtRaw(::grpc::ClientContext* context, const ::gobgpapi::MrtArguments& request) {
  return new ::grpc::ClientReader< ::gobgpapi::MrtMessage>(channel_.get(), rpcmethod_GetMrt_, context, request);
}

::grpc::ClientAsyncReader< ::gobgpapi::MrtMessage>* GobgpApi::Stub::AsyncGetMrtRaw(::grpc::ClientContext* context, const ::gobgpapi::MrtArguments& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::gobgpapi::MrtMessage>(channel_.get(), cq, rpcmethod_GetMrt_, context, request, tag);
}

::grpc::Status GobgpApi::Stub::ModMrt(::grpc::ClientContext* context, const ::gobgpapi::ModMrtArguments& request, ::gobgpapi::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ModMrt_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* GobgpApi::Stub::AsyncModMrtRaw(::grpc::ClientContext* context, const ::gobgpapi::ModMrtArguments& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>(channel_.get(), cq, rpcmethod_ModMrt_, context, request);
}

::grpc::Status GobgpApi::Stub::ModBmp(::grpc::ClientContext* context, const ::gobgpapi::ModBmpArguments& request, ::gobgpapi::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ModBmp_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* GobgpApi::Stub::AsyncModBmpRaw(::grpc::ClientContext* context, const ::gobgpapi::ModBmpArguments& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>(channel_.get(), cq, rpcmethod_ModBmp_, context, request);
}

::grpc::ClientReader< ::gobgpapi::RPKI>* GobgpApi::Stub::GetRPKIRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
  return new ::grpc::ClientReader< ::gobgpapi::RPKI>(channel_.get(), rpcmethod_GetRPKI_, context, request);
}

::grpc::ClientAsyncReader< ::gobgpapi::RPKI>* GobgpApi::Stub::AsyncGetRPKIRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::gobgpapi::RPKI>(channel_.get(), cq, rpcmethod_GetRPKI_, context, request, tag);
}

::grpc::Status GobgpApi::Stub::ModRPKI(::grpc::ClientContext* context, const ::gobgpapi::ModRpkiArguments& request, ::gobgpapi::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ModRPKI_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* GobgpApi::Stub::AsyncModRPKIRaw(::grpc::ClientContext* context, const ::gobgpapi::ModRpkiArguments& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>(channel_.get(), cq, rpcmethod_ModRPKI_, context, request);
}

::grpc::ClientReader< ::gobgpapi::ROA>* GobgpApi::Stub::GetROARaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
  return new ::grpc::ClientReader< ::gobgpapi::ROA>(channel_.get(), rpcmethod_GetROA_, context, request);
}

::grpc::ClientAsyncReader< ::gobgpapi::ROA>* GobgpApi::Stub::AsyncGetROARaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::gobgpapi::ROA>(channel_.get(), cq, rpcmethod_GetROA_, context, request, tag);
}

::grpc::ClientReader< ::gobgpapi::Vrf>* GobgpApi::Stub::GetVrfsRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request) {
  return new ::grpc::ClientReader< ::gobgpapi::Vrf>(channel_.get(), rpcmethod_GetVrfs_, context, request);
}

::grpc::ClientAsyncReader< ::gobgpapi::Vrf>* GobgpApi::Stub::AsyncGetVrfsRaw(::grpc::ClientContext* context, const ::gobgpapi::Arguments& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::gobgpapi::Vrf>(channel_.get(), cq, rpcmethod_GetVrfs_, context, request, tag);
}

::grpc::Status GobgpApi::Stub::ModVrf(::grpc::ClientContext* context, const ::gobgpapi::ModVrfArguments& request, ::gobgpapi::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ModVrf_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* GobgpApi::Stub::AsyncModVrfRaw(::grpc::ClientContext* context, const ::gobgpapi::ModVrfArguments& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>(channel_.get(), cq, rpcmethod_ModVrf_, context, request);
}

::grpc::Status GobgpApi::Stub::GetDefinedSet(::grpc::ClientContext* context, const ::gobgpapi::DefinedSet& request, ::gobgpapi::DefinedSet* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetDefinedSet_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::DefinedSet>* GobgpApi::Stub::AsyncGetDefinedSetRaw(::grpc::ClientContext* context, const ::gobgpapi::DefinedSet& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::DefinedSet>(channel_.get(), cq, rpcmethod_GetDefinedSet_, context, request);
}

::grpc::ClientReader< ::gobgpapi::DefinedSet>* GobgpApi::Stub::GetDefinedSetsRaw(::grpc::ClientContext* context, const ::gobgpapi::DefinedSet& request) {
  return new ::grpc::ClientReader< ::gobgpapi::DefinedSet>(channel_.get(), rpcmethod_GetDefinedSets_, context, request);
}

::grpc::ClientAsyncReader< ::gobgpapi::DefinedSet>* GobgpApi::Stub::AsyncGetDefinedSetsRaw(::grpc::ClientContext* context, const ::gobgpapi::DefinedSet& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::gobgpapi::DefinedSet>(channel_.get(), cq, rpcmethod_GetDefinedSets_, context, request, tag);
}

::grpc::Status GobgpApi::Stub::ModDefinedSet(::grpc::ClientContext* context, const ::gobgpapi::ModDefinedSetArguments& request, ::gobgpapi::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ModDefinedSet_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* GobgpApi::Stub::AsyncModDefinedSetRaw(::grpc::ClientContext* context, const ::gobgpapi::ModDefinedSetArguments& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>(channel_.get(), cq, rpcmethod_ModDefinedSet_, context, request);
}

::grpc::Status GobgpApi::Stub::GetStatement(::grpc::ClientContext* context, const ::gobgpapi::Statement& request, ::gobgpapi::Statement* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetStatement_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Statement>* GobgpApi::Stub::AsyncGetStatementRaw(::grpc::ClientContext* context, const ::gobgpapi::Statement& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Statement>(channel_.get(), cq, rpcmethod_GetStatement_, context, request);
}

::grpc::ClientReader< ::gobgpapi::Statement>* GobgpApi::Stub::GetStatementsRaw(::grpc::ClientContext* context, const ::gobgpapi::Statement& request) {
  return new ::grpc::ClientReader< ::gobgpapi::Statement>(channel_.get(), rpcmethod_GetStatements_, context, request);
}

::grpc::ClientAsyncReader< ::gobgpapi::Statement>* GobgpApi::Stub::AsyncGetStatementsRaw(::grpc::ClientContext* context, const ::gobgpapi::Statement& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::gobgpapi::Statement>(channel_.get(), cq, rpcmethod_GetStatements_, context, request, tag);
}

::grpc::Status GobgpApi::Stub::ModStatement(::grpc::ClientContext* context, const ::gobgpapi::ModStatementArguments& request, ::gobgpapi::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ModStatement_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* GobgpApi::Stub::AsyncModStatementRaw(::grpc::ClientContext* context, const ::gobgpapi::ModStatementArguments& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>(channel_.get(), cq, rpcmethod_ModStatement_, context, request);
}

::grpc::Status GobgpApi::Stub::GetPolicy(::grpc::ClientContext* context, const ::gobgpapi::Policy& request, ::gobgpapi::Policy* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Policy>* GobgpApi::Stub::AsyncGetPolicyRaw(::grpc::ClientContext* context, const ::gobgpapi::Policy& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Policy>(channel_.get(), cq, rpcmethod_GetPolicy_, context, request);
}

::grpc::ClientReader< ::gobgpapi::Policy>* GobgpApi::Stub::GetPoliciesRaw(::grpc::ClientContext* context, const ::gobgpapi::Policy& request) {
  return new ::grpc::ClientReader< ::gobgpapi::Policy>(channel_.get(), rpcmethod_GetPolicies_, context, request);
}

::grpc::ClientAsyncReader< ::gobgpapi::Policy>* GobgpApi::Stub::AsyncGetPoliciesRaw(::grpc::ClientContext* context, const ::gobgpapi::Policy& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::gobgpapi::Policy>(channel_.get(), cq, rpcmethod_GetPolicies_, context, request, tag);
}

::grpc::Status GobgpApi::Stub::ModPolicy(::grpc::ClientContext* context, const ::gobgpapi::ModPolicyArguments& request, ::gobgpapi::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ModPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* GobgpApi::Stub::AsyncModPolicyRaw(::grpc::ClientContext* context, const ::gobgpapi::ModPolicyArguments& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>(channel_.get(), cq, rpcmethod_ModPolicy_, context, request);
}

::grpc::Status GobgpApi::Stub::GetPolicyAssignment(::grpc::ClientContext* context, const ::gobgpapi::PolicyAssignment& request, ::gobgpapi::PolicyAssignment* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetPolicyAssignment_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::PolicyAssignment>* GobgpApi::Stub::AsyncGetPolicyAssignmentRaw(::grpc::ClientContext* context, const ::gobgpapi::PolicyAssignment& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::PolicyAssignment>(channel_.get(), cq, rpcmethod_GetPolicyAssignment_, context, request);
}

::grpc::Status GobgpApi::Stub::ModPolicyAssignment(::grpc::ClientContext* context, const ::gobgpapi::ModPolicyAssignmentArguments& request, ::gobgpapi::Error* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ModPolicyAssignment_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>* GobgpApi::Stub::AsyncModPolicyAssignmentRaw(::grpc::ClientContext* context, const ::gobgpapi::ModPolicyAssignmentArguments& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::gobgpapi::Error>(channel_.get(), cq, rpcmethod_ModPolicyAssignment_, context, request);
}

GobgpApi::AsyncService::AsyncService() : ::grpc::AsynchronousService(GobgpApi_method_names, 38) {}

GobgpApi::Service::~Service() {
  delete service_;
}

::grpc::Status GobgpApi::Service::GetGlobalConfig(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::gobgpapi::Global* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestGetGlobalConfig(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Global>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::ModGlobalConfig(::grpc::ServerContext* context, const ::gobgpapi::ModGlobalConfigArguments* request, ::gobgpapi::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestModGlobalConfig(::grpc::ServerContext* context, ::gobgpapi::ModGlobalConfigArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::GetNeighbors(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::grpc::ServerWriter< ::gobgpapi::Peer>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestGetNeighbors(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncWriter< ::gobgpapi::Peer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::GetNeighbor(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::gobgpapi::Peer* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestGetNeighbor(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Peer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::ModNeighbor(::grpc::ServerContext* context, const ::gobgpapi::ModNeighborArguments* request, ::gobgpapi::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestModNeighbor(::grpc::ServerContext* context, ::gobgpapi::ModNeighborArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::GetRib(::grpc::ServerContext* context, const ::gobgpapi::Table* request, ::gobgpapi::Table* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestGetRib(::grpc::ServerContext* context, ::gobgpapi::Table* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Table>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::Reset(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::gobgpapi::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestReset(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::SoftReset(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::gobgpapi::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestSoftReset(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::SoftResetIn(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::gobgpapi::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestSoftResetIn(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::SoftResetOut(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::gobgpapi::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestSoftResetOut(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::Shutdown(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::gobgpapi::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestShutdown(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::Enable(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::gobgpapi::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestEnable(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::Disable(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::gobgpapi::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestDisable(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::ModPath(::grpc::ServerContext* context, const ::gobgpapi::ModPathArguments* request, ::gobgpapi::ModPathResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestModPath(::grpc::ServerContext* context, ::gobgpapi::ModPathArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::ModPathResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::ModPaths(::grpc::ServerContext* context, ::grpc::ServerReader< ::gobgpapi::ModPathsArguments>* reader, ::gobgpapi::Error* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestModPaths(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::gobgpapi::Error, ::gobgpapi::ModPathsArguments>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestClientStreaming(14, context, reader, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::MonitorRib(::grpc::ServerContext* context, const ::gobgpapi::Table* request, ::grpc::ServerWriter< ::gobgpapi::Destination>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestMonitorRib(::grpc::ServerContext* context, ::gobgpapi::Table* request, ::grpc::ServerAsyncWriter< ::gobgpapi::Destination>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(15, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::MonitorBestChanged(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::grpc::ServerWriter< ::gobgpapi::Destination>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestMonitorBestChanged(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncWriter< ::gobgpapi::Destination>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(16, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::MonitorPeerState(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::grpc::ServerWriter< ::gobgpapi::Peer>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestMonitorPeerState(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncWriter< ::gobgpapi::Peer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(17, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::MonitorROAValidation(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::grpc::ServerWriter< ::gobgpapi::ROAResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestMonitorROAValidation(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncWriter< ::gobgpapi::ROAResult>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(18, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::GetMrt(::grpc::ServerContext* context, const ::gobgpapi::MrtArguments* request, ::grpc::ServerWriter< ::gobgpapi::MrtMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestGetMrt(::grpc::ServerContext* context, ::gobgpapi::MrtArguments* request, ::grpc::ServerAsyncWriter< ::gobgpapi::MrtMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(19, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::ModMrt(::grpc::ServerContext* context, const ::gobgpapi::ModMrtArguments* request, ::gobgpapi::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestModMrt(::grpc::ServerContext* context, ::gobgpapi::ModMrtArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::ModBmp(::grpc::ServerContext* context, const ::gobgpapi::ModBmpArguments* request, ::gobgpapi::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestModBmp(::grpc::ServerContext* context, ::gobgpapi::ModBmpArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::GetRPKI(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::grpc::ServerWriter< ::gobgpapi::RPKI>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestGetRPKI(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncWriter< ::gobgpapi::RPKI>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(22, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::ModRPKI(::grpc::ServerContext* context, const ::gobgpapi::ModRpkiArguments* request, ::gobgpapi::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestModRPKI(::grpc::ServerContext* context, ::gobgpapi::ModRpkiArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::GetROA(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::grpc::ServerWriter< ::gobgpapi::ROA>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestGetROA(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncWriter< ::gobgpapi::ROA>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(24, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::GetVrfs(::grpc::ServerContext* context, const ::gobgpapi::Arguments* request, ::grpc::ServerWriter< ::gobgpapi::Vrf>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestGetVrfs(::grpc::ServerContext* context, ::gobgpapi::Arguments* request, ::grpc::ServerAsyncWriter< ::gobgpapi::Vrf>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(25, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::ModVrf(::grpc::ServerContext* context, const ::gobgpapi::ModVrfArguments* request, ::gobgpapi::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestModVrf(::grpc::ServerContext* context, ::gobgpapi::ModVrfArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::GetDefinedSet(::grpc::ServerContext* context, const ::gobgpapi::DefinedSet* request, ::gobgpapi::DefinedSet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestGetDefinedSet(::grpc::ServerContext* context, ::gobgpapi::DefinedSet* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::DefinedSet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::GetDefinedSets(::grpc::ServerContext* context, const ::gobgpapi::DefinedSet* request, ::grpc::ServerWriter< ::gobgpapi::DefinedSet>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestGetDefinedSets(::grpc::ServerContext* context, ::gobgpapi::DefinedSet* request, ::grpc::ServerAsyncWriter< ::gobgpapi::DefinedSet>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(28, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::ModDefinedSet(::grpc::ServerContext* context, const ::gobgpapi::ModDefinedSetArguments* request, ::gobgpapi::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestModDefinedSet(::grpc::ServerContext* context, ::gobgpapi::ModDefinedSetArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::GetStatement(::grpc::ServerContext* context, const ::gobgpapi::Statement* request, ::gobgpapi::Statement* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestGetStatement(::grpc::ServerContext* context, ::gobgpapi::Statement* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Statement>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::GetStatements(::grpc::ServerContext* context, const ::gobgpapi::Statement* request, ::grpc::ServerWriter< ::gobgpapi::Statement>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestGetStatements(::grpc::ServerContext* context, ::gobgpapi::Statement* request, ::grpc::ServerAsyncWriter< ::gobgpapi::Statement>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(31, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::ModStatement(::grpc::ServerContext* context, const ::gobgpapi::ModStatementArguments* request, ::gobgpapi::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestModStatement(::grpc::ServerContext* context, ::gobgpapi::ModStatementArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::GetPolicy(::grpc::ServerContext* context, const ::gobgpapi::Policy* request, ::gobgpapi::Policy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestGetPolicy(::grpc::ServerContext* context, ::gobgpapi::Policy* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Policy>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::GetPolicies(::grpc::ServerContext* context, const ::gobgpapi::Policy* request, ::grpc::ServerWriter< ::gobgpapi::Policy>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestGetPolicies(::grpc::ServerContext* context, ::gobgpapi::Policy* request, ::grpc::ServerAsyncWriter< ::gobgpapi::Policy>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(34, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::ModPolicy(::grpc::ServerContext* context, const ::gobgpapi::ModPolicyArguments* request, ::gobgpapi::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestModPolicy(::grpc::ServerContext* context, ::gobgpapi::ModPolicyArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::GetPolicyAssignment(::grpc::ServerContext* context, const ::gobgpapi::PolicyAssignment* request, ::gobgpapi::PolicyAssignment* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestGetPolicyAssignment(::grpc::ServerContext* context, ::gobgpapi::PolicyAssignment* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::PolicyAssignment>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GobgpApi::Service::ModPolicyAssignment(::grpc::ServerContext* context, const ::gobgpapi::ModPolicyAssignmentArguments* request, ::gobgpapi::Error* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GobgpApi::AsyncService::RequestModPolicyAssignment(::grpc::ServerContext* context, ::gobgpapi::ModPolicyAssignmentArguments* request, ::grpc::ServerAsyncResponseWriter< ::gobgpapi::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* GobgpApi::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::Arguments, ::gobgpapi::Global>(
          std::mem_fn(&GobgpApi::Service::GetGlobalConfig), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::ModGlobalConfigArguments, ::gobgpapi::Error>(
          std::mem_fn(&GobgpApi::Service::ModGlobalConfig), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[2],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< GobgpApi::Service, ::gobgpapi::Arguments, ::gobgpapi::Peer>(
          std::mem_fn(&GobgpApi::Service::GetNeighbors), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::Arguments, ::gobgpapi::Peer>(
          std::mem_fn(&GobgpApi::Service::GetNeighbor), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::ModNeighborArguments, ::gobgpapi::Error>(
          std::mem_fn(&GobgpApi::Service::ModNeighbor), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::Table, ::gobgpapi::Table>(
          std::mem_fn(&GobgpApi::Service::GetRib), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::Arguments, ::gobgpapi::Error>(
          std::mem_fn(&GobgpApi::Service::Reset), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::Arguments, ::gobgpapi::Error>(
          std::mem_fn(&GobgpApi::Service::SoftReset), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[8],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::Arguments, ::gobgpapi::Error>(
          std::mem_fn(&GobgpApi::Service::SoftResetIn), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[9],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::Arguments, ::gobgpapi::Error>(
          std::mem_fn(&GobgpApi::Service::SoftResetOut), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[10],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::Arguments, ::gobgpapi::Error>(
          std::mem_fn(&GobgpApi::Service::Shutdown), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[11],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::Arguments, ::gobgpapi::Error>(
          std::mem_fn(&GobgpApi::Service::Enable), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[12],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::Arguments, ::gobgpapi::Error>(
          std::mem_fn(&GobgpApi::Service::Disable), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[13],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::ModPathArguments, ::gobgpapi::ModPathResponse>(
          std::mem_fn(&GobgpApi::Service::ModPath), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[14],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< GobgpApi::Service, ::gobgpapi::ModPathsArguments, ::gobgpapi::Error>(
          std::mem_fn(&GobgpApi::Service::ModPaths), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[15],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< GobgpApi::Service, ::gobgpapi::Table, ::gobgpapi::Destination>(
          std::mem_fn(&GobgpApi::Service::MonitorRib), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[16],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< GobgpApi::Service, ::gobgpapi::Arguments, ::gobgpapi::Destination>(
          std::mem_fn(&GobgpApi::Service::MonitorBestChanged), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[17],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< GobgpApi::Service, ::gobgpapi::Arguments, ::gobgpapi::Peer>(
          std::mem_fn(&GobgpApi::Service::MonitorPeerState), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[18],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< GobgpApi::Service, ::gobgpapi::Arguments, ::gobgpapi::ROAResult>(
          std::mem_fn(&GobgpApi::Service::MonitorROAValidation), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[19],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< GobgpApi::Service, ::gobgpapi::MrtArguments, ::gobgpapi::MrtMessage>(
          std::mem_fn(&GobgpApi::Service::GetMrt), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[20],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::ModMrtArguments, ::gobgpapi::Error>(
          std::mem_fn(&GobgpApi::Service::ModMrt), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[21],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::ModBmpArguments, ::gobgpapi::Error>(
          std::mem_fn(&GobgpApi::Service::ModBmp), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[22],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< GobgpApi::Service, ::gobgpapi::Arguments, ::gobgpapi::RPKI>(
          std::mem_fn(&GobgpApi::Service::GetRPKI), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[23],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::ModRpkiArguments, ::gobgpapi::Error>(
          std::mem_fn(&GobgpApi::Service::ModRPKI), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[24],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< GobgpApi::Service, ::gobgpapi::Arguments, ::gobgpapi::ROA>(
          std::mem_fn(&GobgpApi::Service::GetROA), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[25],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< GobgpApi::Service, ::gobgpapi::Arguments, ::gobgpapi::Vrf>(
          std::mem_fn(&GobgpApi::Service::GetVrfs), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[26],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::ModVrfArguments, ::gobgpapi::Error>(
          std::mem_fn(&GobgpApi::Service::ModVrf), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[27],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::DefinedSet, ::gobgpapi::DefinedSet>(
          std::mem_fn(&GobgpApi::Service::GetDefinedSet), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[28],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< GobgpApi::Service, ::gobgpapi::DefinedSet, ::gobgpapi::DefinedSet>(
          std::mem_fn(&GobgpApi::Service::GetDefinedSets), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[29],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::ModDefinedSetArguments, ::gobgpapi::Error>(
          std::mem_fn(&GobgpApi::Service::ModDefinedSet), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[30],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::Statement, ::gobgpapi::Statement>(
          std::mem_fn(&GobgpApi::Service::GetStatement), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[31],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< GobgpApi::Service, ::gobgpapi::Statement, ::gobgpapi::Statement>(
          std::mem_fn(&GobgpApi::Service::GetStatements), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[32],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::ModStatementArguments, ::gobgpapi::Error>(
          std::mem_fn(&GobgpApi::Service::ModStatement), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[33],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::Policy, ::gobgpapi::Policy>(
          std::mem_fn(&GobgpApi::Service::GetPolicy), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[34],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< GobgpApi::Service, ::gobgpapi::Policy, ::gobgpapi::Policy>(
          std::mem_fn(&GobgpApi::Service::GetPolicies), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[35],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::ModPolicyArguments, ::gobgpapi::Error>(
          std::mem_fn(&GobgpApi::Service::ModPolicy), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[36],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::PolicyAssignment, ::gobgpapi::PolicyAssignment>(
          std::mem_fn(&GobgpApi::Service::GetPolicyAssignment), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GobgpApi_method_names[37],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GobgpApi::Service, ::gobgpapi::ModPolicyAssignmentArguments, ::gobgpapi::Error>(
          std::mem_fn(&GobgpApi::Service::ModPolicyAssignment), this)));
  return service_;
}


}  // namespace gobgpapi

